-fcase-merge                        Enable case-merging. Implied by -O. dynamic -fno-case-merge
-fcse                               Turn on common sub-expression elimination. Implied by -O.   dynamic -fno-cse
-fdicts-strict                      Make dictionaries strict    static  -fno-dicts-strict
-fdo-eta-reduction                  Enable eta-reduction. Implied by -O.    dynamic -fno-do-eta-reduction
-fdo-lambda-eta-expansion           Enable lambda eta-reduction dynamic -fno-do-lambda-eta-expansion
-feager-blackholing                 Turn on eager blackholing   dynamic -
-fenable-rewrite-rules              Switch on all rewrite rules (including rules generated by automatic specialisation of overloaded functions). Implied by -O. dynamic -fno-enable-rewrite-rules
-fvectorise                         Enable vectorisation of nested data parallelism dynamic -fno-vectorise
-favoid-vect                        Enable vectorisation avoidance (EXPERIMENTAL)   dynamic -fno-avoid-vect
-fexcess-precision                  Enable excess intermediate precision   dynamic -fno-excess-precision
-ffloat-in                          Turn on the float-in transformation. Implied by -O.    dynamic -fno-float-in
-ffull-laziness                     Turn on full laziness (floating bindings outwards). Implied by -O. dynamic -fno-full-laziness
-ffun-to-thunk                      Allow worker-wrapper to convert a function closure into a thunk if the function does not use any of its arguments. Off by default. dynamic -fno-fun-to-thunk
-fignore-asserts                    Ignore assertions in the source    dynamic -fno-ignore-asserts
-fignore-interface-pragmas          Ignore pragmas in interface files  dynamic -fno-ignore-interface-pragmas
-floopification                     Turn saturated self-recursive tail-calls into local jumps in the generated assembly.   dynamic -fno-loopification
-flate-dmd-anal                     Run demand analysis again, at the end of the simplification pipeline   dynamic -fno-late-dmd-anal
-fliberate-case                     Turn on the liberate-case transformation. Implied by -O2.  dynamic -fno-liberate-case
-fliberate-case-threshold=n         Set the size threshold for the liberate-case transformation to n (default: 200)    static  -fno-liberate-case-threshold
-fmax-relevant-bindings=N           Set the maximum number of bindings to display in type error messages (default 6).  dynamic -fno-max-relevant-bindings
-fmax-simplifier-iterations=N       Set the max iterations for the simplifier    dynamic -
-fmax-worker-args=N                 If a worker has that many arguments, none will be unpacked anymore (default: 10)   dynamic -
-fno-opt-coercion                   Turn off the coercion optimiser    static  -
-fno-pre-inlining                   Turn off pre-inlining  dynamic -
-fno-state-hack                     Turn off the "state hack" whereby any lambda with a real-world state token as argument is considered to be single-entry. Hence OK to inline things inside it.  static  -
-fpedantic-bottoms                  Make GHC be more precise about its treatment of bottom (but see also -fno-state-hack). In particular, GHC will not eta-expand through a case expression.   dynamic -fno-pedantic-bottoms
-fomit-interface-pragmas            Don't generate interface pragmas   dynamic -fno-omit-interface-pragmas
-fsimplifier-phases                 Set the number of phases for the simplifier (default 2). Ignored with -O0.  dynamic -
-fsimpl-tick-factor=n               Set the percentage factor for simplifier ticks (default 100)    dynamic -
-fspec-constr                       Turn on the SpecConstr transformation. Implied by -O2. dynamic -fno-spec-constr
-fspec-constr-threshold=n           Set the size threshold for the SpecConstr transformation to n (default: 200)    static  -fno-spec-constr-threshold
-fspec-constr-count=n               Set to n (default: 3) the maximum number of specialisations that will be created for any one function by the SpecConstr transformation   static  -fno-spec-constr-count
-fspecialise                        Turn on specialisation of overloaded functions. Implied by -O. dynamic -fno-specialise
-fstrictness                        Turn on strictness analysis. Implied by -O.    dynamic -fno-strictness
-fstrictness=before=n               Run an additional strictness analysis before simplifier phase n    dynamic -
-fstatic-argument-transformation    Turn on the static argument transformation. Implied by -O2.  dynamic -fno-static-argument-transformation
-funbox-strict-fields               Flatten strict constructor fields   dynamic -fno-unbox-strict-fields
-funbox-small-strict-fields         Flatten strict constructor fields with a pointer-sized representation    dynamic -fno-unbox-small-strict-fields
-funfolding-creation-threshold      Tweak unfolding settings dynamic -fno-unfolding-creation-threshold
-funfolding-fun-discount            Tweak unfolding settings dynamic -fno-unfolding-fun-discount
-funfolding-keeness-factor          Tweak unfolding settings dynamic -fno-unfolding-keeness-factor
-funfolding-use-threshold           Tweak unfolding settings dynamic -fno-unfolding-use-threshold
