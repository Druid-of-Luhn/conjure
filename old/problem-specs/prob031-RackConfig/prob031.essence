language ESSENCE 1.2.0
$ prob031.essence: Rack Configuration Problem
$ Problem details available at http://www.csplib.org/prob/prob031/
$ 25 July 2007
$

$ n_models: the number of rack models
$ n_types: the number of card types
$ n_cards: the number of cards being plugged in
$ n_racks: the number of racks to use
given n_big : int(1..)
given n_models, n_types, n_cards, n_racks : int(1..)

$ Model: a rack model is represented as an integer between 1 and n_models
$ Type: a card type is represented as an integer between 1 and n_types
$ Card: 
$ Rack: ...
# letting Model be domain int(1..n_models)
# letting Type be domain int(1..n_types)
# letting Card be domain int(1..n_cards)
# letting Rack be type of size n_racks

$ max_power: the maximum power a rack model can supply
$ max_connects : the maximum number of connections a rack model can accomodate
$ price: the price of a rack model
$ req_power: the amount of power required by a particular card type
$ ctype: the type of a particular card
given max_power    : function (total) int(1..n_models) -> int(1..n_big)
given max_connects : function (total) int(1..n_models) -> int(1..n_big)
given price        : function (total) int(1..n_models) -> int(1..n_big)
given req_power    : function (total) int(1..n_types)  -> int(1..n_big)
given ctype        : function (total) int(1..n_cards)  -> int(1..n_big)

$ model: the model of each rack
$ plugged: the set of cards plugged in to a particular rack
find model : function int(1..n_racks) -> int(1..n_models)
find plugged : function int(1..n_racks) -> set of int(1..n_cards)

$ minimise the total rack price
minimising forAll r : defined(model) . price(model(r))

such that
$ every card is plugged in to at least one rack
    forAll c : int(1..n_cards) . (
        exists r : defined(model) . (
            c in plugged(r)
        )
    ),
$ no card is plugged in to more than one rack
    forAll r1, r2 : defined(model) . (
        (r1 != r2) => (card(plugged(r1) intersect plugged(r2)) = 0)
    ),
$ the power demand placed on a rack does not exceed the maximum it can supply
    forAll r : defined(model) . (
        (sum c : plugged(r) . req_power(ctype(c))) <= max_power(model(r))
    ),
$ the number of cards plugged in to a rack does not exceed the number of slots
$ available
    forAll r : defined(model) . (
        card(plugged(r)) <= max_connects(model(r))
    )
