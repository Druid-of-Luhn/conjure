#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'

options = OpenStruct.new
options.dryRun = false
options.jobs = 1                # nil means pass -j to cabal. otherwise -jNUMBER
options.profiling = false
options.optimisation = false
options.documentation = false
options.llvm = false
options.traceLogs = false

OptionParser.new do |opts|
    opts.banner = "Usage: etc/build/make [options]"

    opts.on("--[no-]dry-run", "If enabled, calls cabal with --dry-run") do |v|
        options.dryRun = v
    end

    opts.on("-j[OPTIONAL]", "--jobs[=OPTIONAL]", "Build in parallel.") do |v|
        options.jobs = Integer(v)
    end

    opts.on("-d", "--[no-]documentation", "Enable/disable building documentation.") do |v|
        options.documentation = v
    end

    opts.on("-p", "--[no-]profiling", "Build with profiling enabled.") do |v|
        options.profiling = v
    end

    opts.on("-O", "--[no-]optimisation", "Enable/disable optimisation.") do |v|
        options.optimisation = v
    end

    opts.on("-l", "--[no-]llvm", "Enable/disable llvm.") do |v|
        options.llvm = v
    end

    opts.on("--[no-]trace-logs", "If enabled, logs are printed to stderr as they are cretaed. They will also be in the log file.") do |v|
        options.traceLogs = v
    end

end.parse!

`etc/build/version.sh`

unless File.exists?(".cabal-sandbox")
    puts "Creating cabal sandbox"
    cmdSandboxInit = []
    cmdSandboxInit << "cabal" << "sandbox" << "init"
    unless system(*cmdSandboxInit)
      puts "sandbox init failed."
      exit 1
    end
else
    puts "Using existing cabal sandbox"
end


cmdBuildDeps = []
cmdBuild = []

cmdBuildDeps << "cabal" << "install" << "--force-reinstalls" << "--only-dependencies"
cmdBuild << "cabal" << "install" << "--force-reinstalls"

cmdBuildDeps << "--bindir=" + ENV['HOME'] + "/.cabal/bin"
cmdBuild << "--bindir=" + ENV['HOME'] + "/.cabal/bin"

if options.jobs > 1
    cmdBuildDeps << "-j#{options.jobs}"
else
    cmdBuildDeps << "-j1"
end
cmdBuild << "-j1"

if options.documentation
    cmdBuildDeps << "--enable-documentation"
    cmdBuild << "--enable-documentation"
else
    cmdBuildDeps << "--disable-documentation"
    cmdBuild << "--disable-documentation"
end

if options.profiling
    cmdBuildDeps << "--enable-library-profiling"
    cmdBuildDeps << "--enable-executable-profiling"
    cmdBuild << "--enable-library-profiling"
    cmdBuild << "--enable-executable-profiling"
else
    cmdBuildDeps << "--disable-library-profiling"
    cmdBuildDeps << "--disable-executable-profiling"
    cmdBuild << "--disable-library-profiling"
    cmdBuild << "--disable-executable-profiling"
end

if options.optimisation
    cmdBuildDeps << "-O2"
    cmdBuildDeps << "--ghc-options=\"-funbox-strict-fields\""
    cmdBuild << "-O2"
    cmdBuild << "--ghc-options=\"-funbox-strict-fields\""
else
    cmdBuildDeps << "-O0"
    cmdBuild << "-O0"
end

cmdBuildDeps << '--ghc-options="-fllvm"'  if options.llvm
cmdBuild << '--ghc-options="-fllvm"'      if options.llvm

cmdBuild << '--ghc-options="-DTRACELOGS"' if options.traceLogs

if options.dryRun
    cmdBuild << "--dry-run"
    cmdBuild << "-v"
    puts cmdBuild.join(" ")
    unless system(*cmdBuild)
      puts "Build failed."
      exit 1
    end
else
    puts "[Building dependencies]"
    unless system(*cmdBuildDeps)
      puts "Build failed."
      exit 1
    end
    puts "[Building Conjure]"
    unless system(*cmdBuild)
      puts "Build failed."
      exit 1
    end
    puts "[Done]"
end

