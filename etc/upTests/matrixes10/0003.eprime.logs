[useChannelling] True
[representation] find x: matrix indexed by [int(1..2),
                                            int(1, 2)] of set (minSize 1) of int(6, 7, 8)
                 (#2)
                 Set~ExplicitVarSize, Set~Occurrence
[configuration] x§region4#Set~ExplicitVarSize x§region3#Set~ExplicitVarSize x§region1#Set~ExplicitVarSize x§region2#Set~Occurrence
[addedDecl] find x_Set~ExplicitVarSize:
                    matrix indexed by [int(1..2), int(1, 2), int(1..3)] of (bool, int(6, 7, 8))
[addedDecl] find x_Set~Occurrence:
                    matrix indexed by [int(1..2), int(1, 2), int(6, 7, 8)] of bool
[refn] 0
[applied] x§region1#Set~ExplicitVarSize[1, 1] = {6}
          {rules/refns/horizontal/set-eq-to-subsets.rule}
              x§region1#Set~ExplicitVarSize[1, 1] subsetEq {6}
              /\
              x§region1#Set~ExplicitVarSize[1, 1] supsetEq {6}
[applied] x§region1#Set~ExplicitVarSize[1, 1] subsetEq {6}
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__18 in x§region1#Set~ExplicitVarSize[1, 1] . v__18 in {6})
[applied] v__18 in {6}
          {rules/refns/horizontal/set-in-to-quantified.rule}
              6 = v__18
[applied] (forAll v__18 in x§region1#Set~ExplicitVarSize[1, 1] . 6 = v__18)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (forAll v__20 : int(1..3) , x_Set~ExplicitVarSize§region1[1, 1, v__20, 1]
                   . 6 = x_Set~ExplicitVarSize§region1[1, 1, v__20, 2])
[applied] x§region1#Set~ExplicitVarSize[1, 1] supsetEq {6}
          {rules/refns/horizontal/set-supseteq-to-subseteq.rule}
              {6} subsetEq x§region1#Set~ExplicitVarSize[1, 1]
[applied] {6} subsetEq x§region1#Set~ExplicitVarSize[1, 1]
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              6 in x§region1#Set~ExplicitVarSize[1, 1]
[applied] 6 in x§region1#Set~ExplicitVarSize[1, 1]
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__22 in x§region1#Set~ExplicitVarSize[1, 1] . v__22 = 6)
[applied] (exists v__22 in x§region1#Set~ExplicitVarSize[1, 1] . v__22 = 6)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (exists v__23 : int(1..3) , x_Set~ExplicitVarSize§region1[1, 1, v__23, 1]
                   . x_Set~ExplicitVarSize§region1[1, 1, v__23, 2] = 6)
[applied] x§region2#Set~Occurrence[1, 2] = {7}
          {rules/refns/horizontal/set-eq-to-subsets.rule}
              x§region2#Set~Occurrence[1, 2] subsetEq {7}
              /\
              x§region2#Set~Occurrence[1, 2] supsetEq {7}
[applied] x§region2#Set~Occurrence[1, 2] subsetEq {7}
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__24 in x§region2#Set~Occurrence[1, 2] . v__24 in {7})
[applied] v__24 in {7}
          {rules/refns/horizontal/set-in-to-quantified.rule}
              7 = v__24
[applied] (forAll v__24 in x§region2#Set~Occurrence[1, 2] . 7 = v__24)
          {rules/refns/vertical/Set~Occurrence/quantified.rule}
              (forAll v__26 : int(6, 7, 8) , x_Set~Occurrence§region2[1, 2, v__26]
                   . 7 = v__26)
[applied] x§region2#Set~Occurrence[1, 2] supsetEq {7}
          {rules/refns/horizontal/set-supseteq-to-subseteq.rule}
              {7} subsetEq x§region2#Set~Occurrence[1, 2]
[applied] {7} subsetEq x§region2#Set~Occurrence[1, 2]
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              7 in x§region2#Set~Occurrence[1, 2]
[applied] 7 in x§region2#Set~Occurrence[1, 2]
          {rules/refns/vertical/Set~Occurrence/in.rule}
              x_Set~Occurrence§region2[1, 2, 7] = true
[applied] x_Set~ExplicitVarSize§region1[v__4, v__3, v__5, 2]
          .<
          x_Set~ExplicitVarSize§region1[v__4, v__3, v__5 + 1, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              x_Set~ExplicitVarSize§region1[v__4, v__3, v__5, 2]
              <
              x_Set~ExplicitVarSize§region1[v__4, v__3, v__5 + 1, 2]
[removeRefinedDecl] find x: matrix indexed by [int(1..2),
                                               int(1, 2)] of set (minSize 1) of int(6, 7, 8)
[removedDecl] find x_Set~ExplicitVarSize:
                      matrix indexed by [int(1..2), int(1, 2), int(1..3)] of (bool, int(6, 7, 8))
[matrixToTuple] x_Set~ExplicitVarSize∑3
[repr] 1