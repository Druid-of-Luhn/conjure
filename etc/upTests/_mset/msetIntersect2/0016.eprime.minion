MINION 3
# CSE_number = 20
# CSE_eliminated_expressions = 80
# CSE_total_size = 100
**VARIABLES**
DISCRETE a_MSetOccurrence_00000 #
{0..4}
DISCRETE a_MSetOccurrence_00001 #
{0..4}
DISCRETE a_MSetOccurrence_00002 #
{0..4}
DISCRETE a_MSetOccurrence_00003 #
{0..4}
DISCRETE a_MSetOccurrence_00004 #
{0..4}
DISCRETE b_MSetOccurrence_00000 #
{0..4}
DISCRETE b_MSetOccurrence_00001 #
{0..4}
DISCRETE b_MSetOccurrence_00002 #
{0..4}
DISCRETE b_MSetOccurrence_00003 #
{0..4}
DISCRETE b_MSetOccurrence_00004 #
{0..4}
DISCRETE c #
{3..7}
BOOL aux0 #CSE: 2 occurrences of: ((0<b_MSetOccurrence_00001)<=(0<a_MSetOccurrence_00001))
BOOL aux1 #CSE: 2 occurrences of: ((0<b_MSetOccurrence_00000)<=(0<a_MSetOccurrence_00000))
BOOL aux2 #CSE: 2 occurrences of: ((0<b_MSetOccurrence_00003)<=(0<a_MSetOccurrence_00003))
BOOL aux3 #CSE: 2 occurrences of: ((0<b_MSetOccurrence_00002)<=(0<a_MSetOccurrence_00002))
BOOL aux4 #CSE: 2 occurrences of: ((0<b_MSetOccurrence_00004)<=(0<a_MSetOccurrence_00004))
BOOL aux5 #CSE: 2 occurrences of: ((0<a_MSetOccurrence_00004)<=(0<b_MSetOccurrence_00004))
BOOL aux6 #CSE: 2 occurrences of: ((0<a_MSetOccurrence_00003)<=(0<b_MSetOccurrence_00003))
BOOL aux7 #CSE: 2 occurrences of: ((0<a_MSetOccurrence_00000)<=(0<b_MSetOccurrence_00000))
BOOL aux8 #CSE: 2 occurrences of: ((0<a_MSetOccurrence_00002)<=(0<b_MSetOccurrence_00002))
BOOL aux9 #CSE: 2 occurrences of: ((0<a_MSetOccurrence_00001)<=(0<b_MSetOccurrence_00001))
BOOL aux10 #CSE: 6 occurrences of: (0<a_MSetOccurrence_00004)
BOOL aux11 #CSE: 6 occurrences of: (0<b_MSetOccurrence_00004)
BOOL aux12 #CSE: 6 occurrences of: (0<b_MSetOccurrence_00001)
BOOL aux13 #CSE: 6 occurrences of: (0<b_MSetOccurrence_00002)
BOOL aux14 #CSE: 6 occurrences of: (0<a_MSetOccurrence_00001)
BOOL aux15 #CSE: 6 occurrences of: (0<a_MSetOccurrence_00000)
BOOL aux16 #CSE: 6 occurrences of: (0<b_MSetOccurrence_00000)
BOOL aux17 #CSE: 6 occurrences of: (0<a_MSetOccurrence_00003)
BOOL aux18 #CSE: 6 occurrences of: (0<a_MSetOccurrence_00002)
BOOL aux19 #CSE: 6 occurrences of: (0<b_MSetOccurrence_00003)
BOOL aux20 #min(aux15, aux16)
BOOL aux21 #min(aux14, aux12)
BOOL aux22 #min(aux18, aux13)
BOOL aux23 #min(aux17, aux19)
BOOL aux24 #min(aux10, aux11)
BOOL aux25 #((aux16 -> aux1) /\ (aux12 -> aux0) /\ (aux13 -> aux3) /\ (aux19 -> aux2) /\ (aux11 -> aux4) /\ (aux16 -> aux7) /\ (aux12 -> aux9) /\ (aux13 -> aux8) /\ (aux19 -> aux6) /\ (aux11 -> aux5) /\ (aux15 -> aux1) /\ (aux14 -> aux0) /\ (aux18 -> aux3) /\ (aux17 -> aux2) /\ (aux10 -> aux4) /\ (aux15 -> aux7) /\ (aux14 -> aux9) /\ (aux18 -> aux8) /\ (aux17 -> aux6) /\ (aux10 -> aux5))
**SEARCH**
PRINT[[a_MSetOccurrence_00000],[a_MSetOccurrence_00001],[a_MSetOccurrence_00002],[a_MSetOccurrence_00003],[a_MSetOccurrence_00004],[b_MSetOccurrence_00000],[b_MSetOccurrence_00001],[b_MSetOccurrence_00002],[b_MSetOccurrence_00003],[b_MSetOccurrence_00004],[c]]
VARORDER STATIC [a_MSetOccurrence_00000,a_MSetOccurrence_00001,a_MSetOccurrence_00002,a_MSetOccurrence_00003,a_MSetOccurrence_00004,b_MSetOccurrence_00000,b_MSetOccurrence_00001,b_MSetOccurrence_00002,b_MSetOccurrence_00003,b_MSetOccurrence_00004,c]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25]
**CONSTRAINTS**
min([aux15,aux16],aux20)
min([aux14,aux12],aux21)
min([aux18,aux13],aux22)
min([aux17,aux19],aux23)
min([aux10,aux11],aux24)
reify(watched-and({ineq(aux16, aux1, 0),ineq(aux12, aux0, 0),ineq(aux13, aux3, 0),ineq(aux19, aux2, 0),ineq(aux11, aux4, 0),ineq(aux16, aux7, 0),ineq(aux12, aux9, 0),ineq(aux13, aux8, 0),ineq(aux19, aux6, 0),ineq(aux11, aux5, 0),ineq(aux15, aux1, 0),ineq(aux14, aux0, 0),ineq(aux18, aux3, 0),ineq(aux17, aux2, 0),ineq(aux10, aux4, 0),ineq(aux15, aux7, 0),ineq(aux14, aux9, 0),ineq(aux18, aux8, 0),ineq(aux17, aux6, 0),ineq(aux10, aux5, 0)}), aux25)
reify(ineq(aux12, aux14, 0), aux0)
reify(ineq(aux16, aux15, 0), aux1)
reify(ineq(aux19, aux17, 0), aux2)
reify(ineq(aux13, aux18, 0), aux3)
reify(ineq(aux11, aux10, 0), aux4)
reify(ineq(aux10, aux11, 0), aux5)
reify(ineq(aux17, aux19, 0), aux6)
reify(ineq(aux15, aux16, 0), aux7)
reify(ineq(aux18, aux13, 0), aux8)
reify(ineq(aux14, aux12, 0), aux9)
reify(ineq(0, a_MSetOccurrence_00004, -1), aux10)
reify(ineq(0, b_MSetOccurrence_00004, -1), aux11)
reify(ineq(0, b_MSetOccurrence_00001, -1), aux12)
reify(ineq(0, b_MSetOccurrence_00002, -1), aux13)
reify(ineq(0, a_MSetOccurrence_00001, -1), aux14)
reify(ineq(0, a_MSetOccurrence_00000, -1), aux15)
reify(ineq(0, b_MSetOccurrence_00000, -1), aux16)
reify(ineq(0, a_MSetOccurrence_00003, -1), aux17)
reify(ineq(0, a_MSetOccurrence_00002, -1), aux18)
reify(ineq(0, b_MSetOccurrence_00003, -1), aux19)
eq(aux25,0)
sumleq([aux15,aux14,aux18,aux17,aux10],4)
sumgeq([aux15,aux14,aux18,aux17,aux10],4)
sumleq([aux16,aux12,aux13,aux19,aux11],4)
sumgeq([aux16,aux12,aux13,aux19,aux11],4)
sumleq([aux20,aux21,aux22,aux23,aux24],c)
sumgeq([aux20,aux21,aux22,aux23,aux24],c)
**EOF**
