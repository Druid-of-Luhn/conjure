MINION 3
# CSE_number = 56
# CSE_eliminated_expressions = 169
# CSE_total_size = 298
**VARIABLES**
DISCRETE a_MSetExplicit_00000 #
{3..7}
DISCRETE a_MSetExplicit_00001 #
{3..7}
DISCRETE a_MSetExplicit_00002 #
{3..7}
DISCRETE a_MSetExplicit_00003 #
{3..7}
DISCRETE b_MSetOccurrence_00000 #
{0..4}
DISCRETE b_MSetOccurrence_00001 #
{0..4}
DISCRETE b_MSetOccurrence_00002 #
{0..4}
DISCRETE b_MSetOccurrence_00003 #
{0..4}
DISCRETE b_MSetOccurrence_00004 #
{0..4}
DISCRETE c #
{3..7}
DISCRETE aux0 #CSE: 3 occurrences of: ((a_MSetExplicit_00000=5) + (a_MSetExplicit_00001=5) + (a_MSetExplicit_00002=5) + (a_MSetExplicit_00003=5))
{0..4}
DISCRETE aux1 #CSE: 3 occurrences of: ((a_MSetExplicit_00000=4) + (a_MSetExplicit_00001=4) + (a_MSetExplicit_00002=4) + (a_MSetExplicit_00003=4))
{0..4}
DISCRETE aux2 #CSE: 3 occurrences of: ((a_MSetExplicit_00000=7) + (a_MSetExplicit_00001=7) + (a_MSetExplicit_00002=7) + (a_MSetExplicit_00003=7))
{0..4}
DISCRETE aux3 #CSE: 3 occurrences of: ((a_MSetExplicit_00000=6) + (a_MSetExplicit_00001=6) + (a_MSetExplicit_00002=6) + (a_MSetExplicit_00003=6))
{0..4}
DISCRETE aux4 #CSE: 3 occurrences of: ((a_MSetExplicit_00000=3) + (a_MSetExplicit_00001=3) + (a_MSetExplicit_00002=3) + (a_MSetExplicit_00003=3))
{0..4}
BOOL aux5 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=3)*(0<b_MSetOccurrence_00000))
BOOL aux6 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=4)*(0<b_MSetOccurrence_00001))
BOOL aux7 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=7)*(0<b_MSetOccurrence_00004))
BOOL aux8 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=5)*(0<b_MSetOccurrence_00002))
BOOL aux9 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=6)*(0<b_MSetOccurrence_00003))
BOOL aux10 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=6)*(0<b_MSetOccurrence_00003))
BOOL aux11 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=5)*(0<b_MSetOccurrence_00002))
BOOL aux12 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=4)*(0<b_MSetOccurrence_00001))
BOOL aux13 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=3)*(0<b_MSetOccurrence_00000))
BOOL aux14 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=7)*(0<b_MSetOccurrence_00004))
BOOL aux15 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=4)*(0<b_MSetOccurrence_00001))
BOOL aux16 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=3)*(0<b_MSetOccurrence_00000))
BOOL aux17 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=6)*(0<b_MSetOccurrence_00003))
BOOL aux18 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=5)*(0<b_MSetOccurrence_00002))
BOOL aux19 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=7)*(0<b_MSetOccurrence_00004))
BOOL aux20 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=5)*(0<b_MSetOccurrence_00002))
BOOL aux21 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=6)*(0<b_MSetOccurrence_00003))
BOOL aux22 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=7)*(0<b_MSetOccurrence_00004))
BOOL aux23 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=3)*(0<b_MSetOccurrence_00000))
BOOL aux24 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=4)*(0<b_MSetOccurrence_00001))
BOOL aux25 #CSE: 10 occurrences of: (0<b_MSetOccurrence_00000)
BOOL aux26 #CSE: 10 occurrences of: (0<b_MSetOccurrence_00001)
BOOL aux27 #CSE: 10 occurrences of: (0<b_MSetOccurrence_00003)
BOOL aux28 #CSE: 2 occurrences of: (a_MSetExplicit_00003=3)
BOOL aux29 #CSE: 2 occurrences of: (a_MSetExplicit_00003=4)
BOOL aux30 #CSE: 2 occurrences of: (a_MSetExplicit_00003=5)
BOOL aux31 #CSE: 2 occurrences of: (a_MSetExplicit_00003=6)
BOOL aux32 #CSE: 2 occurrences of: (a_MSetExplicit_00003=7)
BOOL aux33 #CSE: 10 occurrences of: (0<b_MSetOccurrence_00004)
BOOL aux34 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00003)
BOOL aux35 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00001)
BOOL aux36 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00002)
BOOL aux37 #CSE: 4 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00002)
BOOL aux38 #CSE: 4 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00003)
BOOL aux39 #CSE: 4 occurrences of: (a_MSetExplicit_00002=a_MSetExplicit_00003)
BOOL aux40 #CSE: 2 occurrences of: (a_MSetExplicit_00000=3)
BOOL aux41 #CSE: 2 occurrences of: (a_MSetExplicit_00002=3)
BOOL aux42 #CSE: 2 occurrences of: (a_MSetExplicit_00002=5)
BOOL aux43 #CSE: 2 occurrences of: (a_MSetExplicit_00002=4)
BOOL aux44 #CSE: 2 occurrences of: (a_MSetExplicit_00002=6)
BOOL aux45 #CSE: 2 occurrences of: (a_MSetExplicit_00002=7)
BOOL aux46 #CSE: 2 occurrences of: (a_MSetExplicit_00001=4)
BOOL aux47 #CSE: 2 occurrences of: (a_MSetExplicit_00001=5)
BOOL aux48 #CSE: 2 occurrences of: (a_MSetExplicit_00001=6)
BOOL aux49 #CSE: 2 occurrences of: (a_MSetExplicit_00001=7)
BOOL aux50 #CSE: 2 occurrences of: (a_MSetExplicit_00001=3)
BOOL aux51 #CSE: 2 occurrences of: (a_MSetExplicit_00000=4)
BOOL aux52 #CSE: 2 occurrences of: (a_MSetExplicit_00000=5)
BOOL aux53 #CSE: 2 occurrences of: (a_MSetExplicit_00000=6)
BOOL aux54 #CSE: 2 occurrences of: (a_MSetExplicit_00000=7)
BOOL aux55 #CSE: 10 occurrences of: (0<b_MSetOccurrence_00002)
BOOL aux56 #min(aux25, aux4)
BOOL aux57 #min(aux26, aux1)
BOOL aux58 #min(aux55, aux0)
BOOL aux59 #min(aux27, aux3)
BOOL aux60 #min(aux33, aux2)
BOOL aux61 #(aux25<=aux4)
BOOL aux62 #(aux26<=aux1)
BOOL aux63 #(aux55<=aux0)
BOOL aux64 #(aux27<=aux3)
BOOL aux65 #(aux33<=aux2)
BOOL aux66 #(aux4<=aux25)
BOOL aux67 #(aux1<=aux26)
BOOL aux68 #(aux0<=aux55)
BOOL aux69 #(aux3<=aux27)
BOOL aux70 #(aux2<=aux33)
BOOL aux71 #(((aux16 + aux15 + aux18 + aux17 + aux19-1-1*aux35-1*aux36-1*aux34)<=0) /\ ((-1*aux16-1*aux15-1*aux18-1*aux17-1*aux19 + 1 + aux35 + aux36 + aux34)<=0) /\ ((aux13 + aux12 + aux11 + aux10 + aux14-1-1*aux36-1*aux37-1*aux39)<=0) /\ ((-1*aux13-1*aux12-1*aux11-1*aux10-1*aux14 + 1 + aux36 + aux37 + aux39)<=0) /\ (aux25 -> aux61) /\ (aux26 -> aux62) /\ (aux55 -> aux63) /\ (aux27 -> aux64) /\ (aux33 -> aux65) /\ ((aux5 + aux6 + aux8 + aux9 + aux7-1-1*aux35-1*aux37-1*aux38)<=0) /\ ((-1*aux5-1*aux6-1*aux8-1*aux9-1*aux7 + 1 + aux35 + aux37 + aux38)<=0) /\ ((aux23 + aux24 + aux20 + aux21 + aux22-1-1*aux34-1*aux38-1*aux39)<=0) /\ (aux25 -> aux66) /\ (aux26 -> aux67) /\ (aux55 -> aux68) /\ (aux27 -> aux69) /\ (aux33 -> aux70) /\ ((-1*aux23-1*aux24-1*aux20-1*aux21-1*aux22 + 1 + aux34 + aux38 + aux39)<=0))
**SEARCH**
PRINT[[a_MSetExplicit_00000],[a_MSetExplicit_00001],[a_MSetExplicit_00002],[a_MSetExplicit_00003],[b_MSetOccurrence_00000],[b_MSetOccurrence_00001],[b_MSetOccurrence_00002],[b_MSetOccurrence_00003],[b_MSetOccurrence_00004],[c]]
VARORDER STATIC [a_MSetExplicit_00000,a_MSetExplicit_00001,a_MSetExplicit_00002,a_MSetExplicit_00003,b_MSetOccurrence_00000,b_MSetOccurrence_00001,b_MSetOccurrence_00002,b_MSetOccurrence_00003,b_MSetOccurrence_00004,c]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59,aux60,aux61,aux62,aux63,aux64,aux65,aux66,aux67,aux68,aux69,aux70,aux71]
**CONSTRAINTS**
min([aux25,aux4],aux56)
min([aux26,aux1],aux57)
min([aux55,aux0],aux58)
min([aux27,aux3],aux59)
min([aux33,aux2],aux60)
reify(ineq(aux25, aux4, 0), aux61)
reify(ineq(aux26, aux1, 0), aux62)
reify(ineq(aux55, aux0, 0), aux63)
reify(ineq(aux27, aux3, 0), aux64)
reify(ineq(aux33, aux2, 0), aux65)
reify(ineq(aux4, aux25, 0), aux66)
reify(ineq(aux1, aux26, 0), aux67)
reify(ineq(aux0, aux55, 0), aux68)
reify(ineq(aux3, aux27, 0), aux69)
reify(ineq(aux2, aux33, 0), aux70)
reify(watched-and({weightedsumleq([1,1,1,1,1,1,-1,-1,-1],[aux16,aux15,aux18,aux17,aux19,-1,aux35,aux36,aux34],0),weightedsumleq([-1,-1,-1,-1,-1,1,1,1,1],[aux16,aux15,aux18,aux17,aux19,1,aux35,aux36,aux34],0),weightedsumleq([1,1,1,1,1,1,-1,-1,-1],[aux13,aux12,aux11,aux10,aux14,-1,aux36,aux37,aux39],0),weightedsumleq([-1,-1,-1,-1,-1,1,1,1,1],[aux13,aux12,aux11,aux10,aux14,1,aux36,aux37,aux39],0),ineq(aux25, aux61, 0),ineq(aux26, aux62, 0),ineq(aux55, aux63, 0),ineq(aux27, aux64, 0),ineq(aux33, aux65, 0),weightedsumleq([1,1,1,1,1,1,-1,-1,-1],[aux5,aux6,aux8,aux9,aux7,-1,aux35,aux37,aux38],0),weightedsumleq([-1,-1,-1,-1,-1,1,1,1,1],[aux5,aux6,aux8,aux9,aux7,1,aux35,aux37,aux38],0),weightedsumleq([1,1,1,1,1,1,-1,-1,-1],[aux23,aux24,aux20,aux21,aux22,-1,aux34,aux38,aux39],0),ineq(aux25, aux66, 0),ineq(aux26, aux67, 0),ineq(aux55, aux68, 0),ineq(aux27, aux69, 0),ineq(aux33, aux70, 0),weightedsumleq([-1,-1,-1,-1,-1,1,1,1,1],[aux23,aux24,aux20,aux21,aux22,1,aux34,aux38,aux39],0)}), aux71)
product(aux50, aux25, aux5)
product(aux46, aux26, aux6)
product(aux49, aux33, aux7)
product(aux47, aux55, aux8)
product(aux48, aux27, aux9)
product(aux44, aux27, aux10)
product(aux42, aux55, aux11)
product(aux43, aux26, aux12)
product(aux41, aux25, aux13)
product(aux45, aux33, aux14)
product(aux51, aux26, aux15)
product(aux40, aux25, aux16)
product(aux53, aux27, aux17)
product(aux52, aux55, aux18)
product(aux54, aux33, aux19)
product(aux30, aux55, aux20)
product(aux31, aux27, aux21)
product(aux32, aux33, aux22)
product(aux28, aux25, aux23)
product(aux29, aux26, aux24)
reify(ineq(0, b_MSetOccurrence_00000, -1), aux25)
reify(ineq(0, b_MSetOccurrence_00001, -1), aux26)
reify(ineq(0, b_MSetOccurrence_00003, -1), aux27)
reify(w-literal(a_MSetExplicit_00003,3), aux28)
reify(w-literal(a_MSetExplicit_00003,4), aux29)
reify(w-literal(a_MSetExplicit_00003,5), aux30)
reify(w-literal(a_MSetExplicit_00003,6), aux31)
reify(w-literal(a_MSetExplicit_00003,7), aux32)
reify(ineq(0, b_MSetOccurrence_00004, -1), aux33)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00003), aux34)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00001), aux35)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00002), aux36)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00002), aux37)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00003), aux38)
reify(eq(a_MSetExplicit_00002,a_MSetExplicit_00003), aux39)
reify(w-literal(a_MSetExplicit_00000,3), aux40)
reify(w-literal(a_MSetExplicit_00002,3), aux41)
reify(w-literal(a_MSetExplicit_00002,5), aux42)
reify(w-literal(a_MSetExplicit_00002,4), aux43)
reify(w-literal(a_MSetExplicit_00002,6), aux44)
reify(w-literal(a_MSetExplicit_00002,7), aux45)
reify(w-literal(a_MSetExplicit_00001,4), aux46)
reify(w-literal(a_MSetExplicit_00001,5), aux47)
reify(w-literal(a_MSetExplicit_00001,6), aux48)
reify(w-literal(a_MSetExplicit_00001,7), aux49)
reify(w-literal(a_MSetExplicit_00001,3), aux50)
reify(w-literal(a_MSetExplicit_00000,4), aux51)
reify(w-literal(a_MSetExplicit_00000,5), aux52)
reify(w-literal(a_MSetExplicit_00000,6), aux53)
reify(w-literal(a_MSetExplicit_00000,7), aux54)
reify(ineq(0, b_MSetOccurrence_00002, -1), aux55)
eq(aux71,0)
ineq(a_MSetExplicit_00000, a_MSetExplicit_00001, 0)
ineq(a_MSetExplicit_00001, a_MSetExplicit_00002, 0)
ineq(a_MSetExplicit_00002, a_MSetExplicit_00003, 0)
sumleq([aux52,aux47,aux42,aux30],aux0)
sumgeq([aux52,aux47,aux42,aux30],aux0)
sumleq([aux51,aux46,aux43,aux29],aux1)
sumgeq([aux51,aux46,aux43,aux29],aux1)
sumleq([aux54,aux49,aux45,aux32],aux2)
sumgeq([aux54,aux49,aux45,aux32],aux2)
sumleq([aux53,aux48,aux44,aux31],aux3)
sumgeq([aux53,aux48,aux44,aux31],aux3)
sumleq([aux40,aux50,aux41,aux28],aux4)
sumgeq([aux40,aux50,aux41,aux28],aux4)
sumleq([aux25,aux26,aux55,aux27,aux33],4)
sumgeq([aux25,aux26,aux55,aux27,aux33],4)
sumleq([aux56,aux57,aux58,aux59,aux60],c)
sumgeq([aux56,aux57,aux58,aux59,aux60],c)
**EOF**
