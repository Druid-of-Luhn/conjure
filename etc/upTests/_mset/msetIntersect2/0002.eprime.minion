MINION 3
# CSE_number = 78
# CSE_eliminated_expressions = 276
# CSE_total_size = 364
**VARIABLES**
DISCRETE a_MSetExplicit_00000 #
{3..7}
DISCRETE a_MSetExplicit_00001 #
{3..7}
DISCRETE a_MSetExplicit_00002 #
{3..7}
DISCRETE a_MSetExplicit_00003 #
{3..7}
DISCRETE a_MSetOccurrence_00000 #
{0..4}
DISCRETE a_MSetOccurrence_00001 #
{0..4}
DISCRETE a_MSetOccurrence_00002 #
{0..4}
DISCRETE a_MSetOccurrence_00003 #
{0..4}
DISCRETE a_MSetOccurrence_00004 #
{0..4}
DISCRETE b_MSetExplicit_00000 #
{3..7}
DISCRETE b_MSetExplicit_00001 #
{3..7}
DISCRETE b_MSetExplicit_00002 #
{3..7}
DISCRETE b_MSetExplicit_00003 #
{3..7}
DISCRETE c #
{3..7}
DISCRETE aux0 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=5) + (a_MSetExplicit_00001=5) + (a_MSetExplicit_00002=5) + (a_MSetExplicit_00003=5))
{0..4}
DISCRETE aux1 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=4) + (a_MSetExplicit_00001=4) + (a_MSetExplicit_00002=4) + (a_MSetExplicit_00003=4))
{0..4}
DISCRETE aux2 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=7) + (a_MSetExplicit_00001=7) + (a_MSetExplicit_00002=7) + (a_MSetExplicit_00003=7))
{0..4}
DISCRETE aux3 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=6) + (a_MSetExplicit_00001=6) + (a_MSetExplicit_00002=6) + (a_MSetExplicit_00003=6))
{0..4}
DISCRETE aux4 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=3) + (a_MSetExplicit_00001=3) + (a_MSetExplicit_00002=3) + (a_MSetExplicit_00003=3))
{0..4}
BOOL aux5 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=3)*(0<a_MSetOccurrence_00000))
BOOL aux6 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=5)*(0<a_MSetOccurrence_00002))
BOOL aux7 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=4)*(0<a_MSetOccurrence_00001))
BOOL aux8 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=7)*(0<a_MSetOccurrence_00004))
BOOL aux9 #CSE: 2 occurrences of: ((a_MSetExplicit_00003=6)*(0<a_MSetOccurrence_00003))
BOOL aux10 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=3)*(0<a_MSetOccurrence_00000))
BOOL aux11 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=4)*(0<a_MSetOccurrence_00001))
BOOL aux12 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=5)*(0<a_MSetOccurrence_00002))
BOOL aux13 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=6)*(0<a_MSetOccurrence_00003))
BOOL aux14 #CSE: 2 occurrences of: ((a_MSetExplicit_00002=7)*(0<a_MSetOccurrence_00004))
BOOL aux15 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=5)*(0<a_MSetOccurrence_00002))
BOOL aux16 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=4)*(0<a_MSetOccurrence_00001))
BOOL aux17 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=3)*(0<a_MSetOccurrence_00000))
BOOL aux18 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=7)*(0<a_MSetOccurrence_00004))
BOOL aux19 #CSE: 2 occurrences of: ((a_MSetExplicit_00001=6)*(0<a_MSetOccurrence_00003))
BOOL aux20 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=3)*(0<a_MSetOccurrence_00000))
BOOL aux21 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=6)*(0<a_MSetOccurrence_00003))
BOOL aux22 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=7)*(0<a_MSetOccurrence_00004))
BOOL aux23 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=4)*(0<a_MSetOccurrence_00001))
BOOL aux24 #CSE: 2 occurrences of: ((a_MSetExplicit_00000=5)*(0<a_MSetOccurrence_00002))
BOOL aux25 #CSE: 8 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00003)
BOOL aux26 #CSE: 10 occurrences of: (0<a_MSetOccurrence_00001)
BOOL aux27 #CSE: 8 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00001)
BOOL aux28 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00003)
BOOL aux29 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00002)
BOOL aux30 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00001)
BOOL aux31 #CSE: 4 occurrences of: (b_MSetExplicit_00001=b_MSetExplicit_00003)
BOOL aux32 #CSE: 4 occurrences of: (b_MSetExplicit_00001=b_MSetExplicit_00002)
BOOL aux33 #CSE: 4 occurrences of: (b_MSetExplicit_00002=b_MSetExplicit_00003)
BOOL aux34 #CSE: 2 occurrences of: (a_MSetExplicit_00003=7)
BOOL aux35 #CSE: 2 occurrences of: (a_MSetExplicit_00003=6)
BOOL aux36 #CSE: 2 occurrences of: (a_MSetExplicit_00003=5)
BOOL aux37 #CSE: 2 occurrences of: (a_MSetExplicit_00003=4)
BOOL aux38 #CSE: 2 occurrences of: (a_MSetExplicit_00003=3)
BOOL aux39 #CSE: 2 occurrences of: (a_MSetExplicit_00000=7)
BOOL aux40 #CSE: 2 occurrences of: (a_MSetExplicit_00000=6)
BOOL aux41 #CSE: 2 occurrences of: (a_MSetExplicit_00000=5)
BOOL aux42 #CSE: 2 occurrences of: (a_MSetExplicit_00000=4)
BOOL aux43 #CSE: 2 occurrences of: (a_MSetExplicit_00000=3)
BOOL aux44 #CSE: 2 occurrences of: (a_MSetExplicit_00001=7)
BOOL aux45 #CSE: 2 occurrences of: (a_MSetExplicit_00001=6)
BOOL aux46 #CSE: 2 occurrences of: (a_MSetExplicit_00001=5)
BOOL aux47 #CSE: 2 occurrences of: (a_MSetExplicit_00001=4)
BOOL aux48 #CSE: 2 occurrences of: (a_MSetExplicit_00001=3)
BOOL aux49 #CSE: 2 occurrences of: (a_MSetExplicit_00002=7)
BOOL aux50 #CSE: 2 occurrences of: (a_MSetExplicit_00002=6)
BOOL aux51 #CSE: 2 occurrences of: (a_MSetExplicit_00002=5)
BOOL aux52 #CSE: 2 occurrences of: (a_MSetExplicit_00002=4)
BOOL aux53 #CSE: 2 occurrences of: (a_MSetExplicit_00002=3)
BOOL aux54 #CSE: 10 occurrences of: (0<a_MSetOccurrence_00003)
BOOL aux55 #CSE: 10 occurrences of: (0<a_MSetOccurrence_00002)
BOOL aux56 #CSE: 8 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00002)
BOOL aux57 #CSE: 10 occurrences of: (0<a_MSetOccurrence_00000)
BOOL aux58 #CSE: 8 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00003)
BOOL aux59 #CSE: 10 occurrences of: (0<a_MSetOccurrence_00004)
BOOL aux60 #CSE: 8 occurrences of: (a_MSetExplicit_00002=a_MSetExplicit_00003)
BOOL aux61 #CSE: 8 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00002)
BOOL aux62 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00000)
BOOL aux63 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00001)
BOOL aux64 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00002)
BOOL aux65 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00003)
BOOL aux66 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00000)
BOOL aux67 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00001)
BOOL aux68 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00002)
BOOL aux69 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00003)
BOOL aux70 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00000)
BOOL aux71 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00001)
BOOL aux72 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00002)
BOOL aux73 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00003)
BOOL aux74 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00000)
BOOL aux75 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00001)
BOOL aux76 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00002)
BOOL aux77 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00003)
BOOL aux78 #(b_MSetExplicit_00000=3)
BOOL aux79 #(b_MSetExplicit_00001=3)
BOOL aux80 #(b_MSetExplicit_00002=3)
BOOL aux81 #(b_MSetExplicit_00003=3)
DISCRETE aux82 #(aux78 + aux79 + aux80 + aux81)
{0..4}
BOOL aux83 #min(aux57, aux82)
BOOL aux84 #(b_MSetExplicit_00000=4)
BOOL aux85 #(b_MSetExplicit_00001=4)
BOOL aux86 #(b_MSetExplicit_00002=4)
BOOL aux87 #(b_MSetExplicit_00003=4)
DISCRETE aux88 #(aux84 + aux85 + aux86 + aux87)
{0..4}
BOOL aux89 #min(aux26, aux88)
BOOL aux90 #(b_MSetExplicit_00000=5)
BOOL aux91 #(b_MSetExplicit_00001=5)
BOOL aux92 #(b_MSetExplicit_00002=5)
BOOL aux93 #(b_MSetExplicit_00003=5)
DISCRETE aux94 #(aux90 + aux91 + aux92 + aux93)
{0..4}
BOOL aux95 #min(aux55, aux94)
BOOL aux96 #(b_MSetExplicit_00000=6)
BOOL aux97 #(b_MSetExplicit_00001=6)
BOOL aux98 #(b_MSetExplicit_00002=6)
BOOL aux99 #(b_MSetExplicit_00003=6)
DISCRETE aux100 #(aux96 + aux97 + aux98 + aux99)
{0..4}
BOOL aux101 #min(aux54, aux100)
BOOL aux102 #(b_MSetExplicit_00000=7)
BOOL aux103 #(b_MSetExplicit_00001=7)
BOOL aux104 #(b_MSetExplicit_00002=7)
BOOL aux105 #(b_MSetExplicit_00003=7)
DISCRETE aux106 #(aux102 + aux103 + aux104 + aux105)
{0..4}
BOOL aux107 #min(aux59, aux106)
BOOL aux108 #(((-1-1*aux25-1*aux58-1*aux60 + aux73 + aux65 + aux69 + aux77)<=0) /\ ((1 + aux27 + aux56 + aux58-1*aux71-1*aux63-1*aux67-1*aux75)<=0) /\ ((-1-1*aux30-1*aux29-1*aux28 + aux70 + aux71 + aux72 + aux73)<=0) /\ ((-1-1*aux27-1*aux61-1*aux25 + aux70 + aux62 + aux66 + aux74)<=0) /\ ((1 + aux28 + aux31 + aux33-1*aux74-1*aux75-1*aux76-1*aux77)<=0) /\ ((1 + aux25 + aux58 + aux60-1*aux73-1*aux65-1*aux69-1*aux77)<=0) /\ ((-1-1*aux29-1*aux32-1*aux33 + aux66 + aux67 + aux68 + aux69)<=0) /\ ((1 + aux30 + aux29 + aux28-1*aux70-1*aux71-1*aux72-1*aux73)<=0) /\ ((-1-1*aux61-1*aux56-1*aux60 + aux72 + aux64 + aux68 + aux76)<=0) /\ ((1 + aux27 + aux61 + aux25-1*aux70-1*aux62-1*aux66-1*aux74)<=0) /\ ((1 + aux29 + aux32 + aux33-1*aux66-1*aux67-1*aux68-1*aux69)<=0) /\ ((1 + aux61 + aux56 + aux60-1*aux72-1*aux64-1*aux68-1*aux76)<=0) /\ ((-1-1*aux30-1*aux32-1*aux31 + aux62 + aux63 + aux64 + aux65)<=0) /\ ((-1-1*aux27-1*aux56-1*aux58 + aux71 + aux63 + aux67 + aux75)<=0) /\ ((-1-1*aux28-1*aux31-1*aux33 + aux74 + aux75 + aux76 + aux77)<=0) /\ ((1 + aux30 + aux32 + aux31-1*aux62-1*aux63-1*aux64-1*aux65)<=0))
BOOL aux109 #(aux57<=aux4)
BOOL aux110 #(aux26<=aux1)
BOOL aux111 #(aux55<=aux0)
BOOL aux112 #(aux54<=aux3)
BOOL aux113 #(aux59<=aux2)
BOOL aux114 #(aux4<=aux57)
BOOL aux115 #(aux1<=aux26)
BOOL aux116 #(aux0<=aux55)
BOOL aux117 #(aux3<=aux54)
BOOL aux118 #(aux2<=aux59)
**SEARCH**
PRINT[[a_MSetExplicit_00000],[a_MSetExplicit_00001],[a_MSetExplicit_00002],[a_MSetExplicit_00003],[a_MSetOccurrence_00000],[a_MSetOccurrence_00001],[a_MSetOccurrence_00002],[a_MSetOccurrence_00003],[a_MSetOccurrence_00004],[b_MSetExplicit_00000],[b_MSetExplicit_00001],[b_MSetExplicit_00002],[b_MSetExplicit_00003],[c]]
VARORDER STATIC [a_MSetExplicit_00000,a_MSetExplicit_00001,a_MSetExplicit_00002,a_MSetExplicit_00003,a_MSetOccurrence_00000,a_MSetOccurrence_00001,a_MSetOccurrence_00002,a_MSetOccurrence_00003,a_MSetOccurrence_00004,b_MSetExplicit_00000,b_MSetExplicit_00001,b_MSetExplicit_00002,b_MSetExplicit_00003,c]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59,aux60,aux61,aux62,aux63,aux64,aux65,aux66,aux67,aux68,aux69,aux70,aux71,aux72,aux73,aux74,aux75,aux76,aux77,aux78,aux79,aux80,aux81,aux82,aux83,aux84,aux85,aux86,aux87,aux88,aux89,aux90,aux91,aux92,aux93,aux94,aux95,aux96,aux97,aux98,aux99,aux100,aux101,aux102,aux103,aux104,aux105,aux106,aux107,aux108,aux109,aux110,aux111,aux112,aux113,aux114,aux115,aux116,aux117,aux118]
**CONSTRAINTS**
reify(w-literal(b_MSetExplicit_00000,3), aux78)
reify(w-literal(b_MSetExplicit_00001,3), aux79)
reify(w-literal(b_MSetExplicit_00002,3), aux80)
reify(w-literal(b_MSetExplicit_00003,3), aux81)
min([aux57,aux82],aux83)
reify(w-literal(b_MSetExplicit_00000,4), aux84)
reify(w-literal(b_MSetExplicit_00001,4), aux85)
reify(w-literal(b_MSetExplicit_00002,4), aux86)
reify(w-literal(b_MSetExplicit_00003,4), aux87)
min([aux26,aux88],aux89)
reify(w-literal(b_MSetExplicit_00000,5), aux90)
reify(w-literal(b_MSetExplicit_00001,5), aux91)
reify(w-literal(b_MSetExplicit_00002,5), aux92)
reify(w-literal(b_MSetExplicit_00003,5), aux93)
min([aux55,aux94],aux95)
reify(w-literal(b_MSetExplicit_00000,6), aux96)
reify(w-literal(b_MSetExplicit_00001,6), aux97)
reify(w-literal(b_MSetExplicit_00002,6), aux98)
reify(w-literal(b_MSetExplicit_00003,6), aux99)
min([aux54,aux100],aux101)
reify(w-literal(b_MSetExplicit_00000,7), aux102)
reify(w-literal(b_MSetExplicit_00001,7), aux103)
reify(w-literal(b_MSetExplicit_00002,7), aux104)
reify(w-literal(b_MSetExplicit_00003,7), aux105)
min([aux59,aux106],aux107)
reify(watched-and({weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux25,aux58,aux60,aux73,aux65,aux69,aux77],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux27,aux56,aux58,aux71,aux63,aux67,aux75],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux30,aux29,aux28,aux70,aux71,aux72,aux73],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux27,aux61,aux25,aux70,aux62,aux66,aux74],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux28,aux31,aux33,aux74,aux75,aux76,aux77],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux25,aux58,aux60,aux73,aux65,aux69,aux77],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux29,aux32,aux33,aux66,aux67,aux68,aux69],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux30,aux29,aux28,aux70,aux71,aux72,aux73],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux61,aux56,aux60,aux72,aux64,aux68,aux76],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux27,aux61,aux25,aux70,aux62,aux66,aux74],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux29,aux32,aux33,aux66,aux67,aux68,aux69],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux61,aux56,aux60,aux72,aux64,aux68,aux76],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux30,aux32,aux31,aux62,aux63,aux64,aux65],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux27,aux56,aux58,aux71,aux63,aux67,aux75],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux28,aux31,aux33,aux74,aux75,aux76,aux77],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux30,aux32,aux31,aux62,aux63,aux64,aux65],0)}), aux108)
reify(ineq(aux57, aux4, 0), aux109)
reify(ineq(aux26, aux1, 0), aux110)
reify(ineq(aux55, aux0, 0), aux111)
reify(ineq(aux54, aux3, 0), aux112)
reify(ineq(aux59, aux2, 0), aux113)
reify(ineq(aux4, aux57, 0), aux114)
reify(ineq(aux1, aux26, 0), aux115)
reify(ineq(aux0, aux55, 0), aux116)
reify(ineq(aux3, aux54, 0), aux117)
reify(ineq(aux2, aux59, 0), aux118)
product(aux38, aux57, aux5)
product(aux36, aux55, aux6)
product(aux37, aux26, aux7)
product(aux34, aux59, aux8)
product(aux35, aux54, aux9)
product(aux53, aux57, aux10)
product(aux52, aux26, aux11)
product(aux51, aux55, aux12)
product(aux50, aux54, aux13)
product(aux49, aux59, aux14)
product(aux46, aux55, aux15)
product(aux47, aux26, aux16)
product(aux48, aux57, aux17)
product(aux44, aux59, aux18)
product(aux45, aux54, aux19)
product(aux43, aux57, aux20)
product(aux40, aux54, aux21)
product(aux39, aux59, aux22)
product(aux42, aux26, aux23)
product(aux41, aux55, aux24)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00003), aux25)
reify(ineq(0, a_MSetOccurrence_00001, -1), aux26)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00001), aux27)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00003), aux28)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00002), aux29)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00001), aux30)
reify(eq(b_MSetExplicit_00001,b_MSetExplicit_00003), aux31)
reify(eq(b_MSetExplicit_00001,b_MSetExplicit_00002), aux32)
reify(eq(b_MSetExplicit_00002,b_MSetExplicit_00003), aux33)
reify(w-literal(a_MSetExplicit_00003,7), aux34)
reify(w-literal(a_MSetExplicit_00003,6), aux35)
reify(w-literal(a_MSetExplicit_00003,5), aux36)
reify(w-literal(a_MSetExplicit_00003,4), aux37)
reify(w-literal(a_MSetExplicit_00003,3), aux38)
reify(w-literal(a_MSetExplicit_00000,7), aux39)
reify(w-literal(a_MSetExplicit_00000,6), aux40)
reify(w-literal(a_MSetExplicit_00000,5), aux41)
reify(w-literal(a_MSetExplicit_00000,4), aux42)
reify(w-literal(a_MSetExplicit_00000,3), aux43)
reify(w-literal(a_MSetExplicit_00001,7), aux44)
reify(w-literal(a_MSetExplicit_00001,6), aux45)
reify(w-literal(a_MSetExplicit_00001,5), aux46)
reify(w-literal(a_MSetExplicit_00001,4), aux47)
reify(w-literal(a_MSetExplicit_00001,3), aux48)
reify(w-literal(a_MSetExplicit_00002,7), aux49)
reify(w-literal(a_MSetExplicit_00002,6), aux50)
reify(w-literal(a_MSetExplicit_00002,5), aux51)
reify(w-literal(a_MSetExplicit_00002,4), aux52)
reify(w-literal(a_MSetExplicit_00002,3), aux53)
reify(ineq(0, a_MSetOccurrence_00003, -1), aux54)
reify(ineq(0, a_MSetOccurrence_00002, -1), aux55)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00002), aux56)
reify(ineq(0, a_MSetOccurrence_00000, -1), aux57)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00003), aux58)
reify(ineq(0, a_MSetOccurrence_00004, -1), aux59)
reify(eq(a_MSetExplicit_00002,a_MSetExplicit_00003), aux60)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00002), aux61)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00000), aux62)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00001), aux63)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00002), aux64)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00003), aux65)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00000), aux66)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00001), aux67)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00002), aux68)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00003), aux69)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00000), aux70)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00001), aux71)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00002), aux72)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00003), aux73)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00000), aux74)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00001), aux75)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00002), aux76)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00003), aux77)
eq(aux108,0)
ineq(aux57, aux109, 0)
ineq(aux26, aux110, 0)
ineq(aux55, aux111, 0)
ineq(aux54, aux112, 0)
ineq(aux59, aux113, 0)
ineq(aux57, aux114, 0)
ineq(aux26, aux115, 0)
ineq(aux55, aux116, 0)
ineq(aux54, aux117, 0)
ineq(aux59, aux118, 0)
ineq(a_MSetExplicit_00000, a_MSetExplicit_00001, 0)
ineq(a_MSetExplicit_00001, a_MSetExplicit_00002, 0)
ineq(a_MSetExplicit_00002, a_MSetExplicit_00003, 0)
ineq(b_MSetExplicit_00000, b_MSetExplicit_00001, 0)
ineq(b_MSetExplicit_00001, b_MSetExplicit_00002, 0)
ineq(b_MSetExplicit_00002, b_MSetExplicit_00003, 0)
weightedsumleq([1,-1,-1,-1,1,1,1,1,1],[-1,aux27,aux61,aux25,aux20,aux23,aux24,aux21,aux22],0)
weightedsumleq([1,-1,-1,-1,1,1,1,1,1],[-1,aux27,aux56,aux58,aux17,aux16,aux15,aux19,aux18],0)
weightedsumleq([1,-1,-1,-1,1,1,1,1,1],[-1,aux61,aux56,aux60,aux10,aux11,aux12,aux13,aux14],0)
weightedsumleq([1,-1,-1,-1,1,1,1,1,1],[-1,aux25,aux58,aux60,aux5,aux7,aux6,aux9,aux8],0)
weightedsumleq([1,1,1,1,-1,-1,-1,-1,-1],[1,aux27,aux61,aux25,aux20,aux23,aux24,aux21,aux22],0)
weightedsumleq([1,1,1,1,-1,-1,-1,-1,-1],[1,aux27,aux56,aux58,aux17,aux16,aux15,aux19,aux18],0)
weightedsumleq([1,1,1,1,-1,-1,-1,-1,-1],[1,aux61,aux56,aux60,aux10,aux11,aux12,aux13,aux14],0)
weightedsumleq([1,1,1,1,-1,-1,-1,-1,-1],[1,aux25,aux58,aux60,aux5,aux7,aux6,aux9,aux8],0)
sumleq([aux78,aux79,aux80,aux81],aux82)
sumgeq([aux78,aux79,aux80,aux81],aux82)
sumleq([aux84,aux85,aux86,aux87],aux88)
sumgeq([aux84,aux85,aux86,aux87],aux88)
sumleq([aux90,aux91,aux92,aux93],aux94)
sumgeq([aux90,aux91,aux92,aux93],aux94)
sumleq([aux96,aux97,aux98,aux99],aux100)
sumgeq([aux96,aux97,aux98,aux99],aux100)
sumleq([aux102,aux103,aux104,aux105],aux106)
sumgeq([aux102,aux103,aux104,aux105],aux106)
sumleq([aux41,aux46,aux51,aux36],aux0)
sumgeq([aux41,aux46,aux51,aux36],aux0)
sumleq([aux42,aux47,aux52,aux37],aux1)
sumgeq([aux42,aux47,aux52,aux37],aux1)
sumleq([aux39,aux44,aux49,aux34],aux2)
sumgeq([aux39,aux44,aux49,aux34],aux2)
sumleq([aux40,aux45,aux50,aux35],aux3)
sumgeq([aux40,aux45,aux50,aux35],aux3)
sumleq([aux43,aux48,aux53,aux38],aux4)
sumgeq([aux43,aux48,aux53,aux38],aux4)
sumleq([aux57,aux26,aux55,aux54,aux59],4)
sumgeq([aux57,aux26,aux55,aux54,aux59],4)
sumleq([aux83,aux89,aux95,aux101,aux107],c)
sumgeq([aux83,aux89,aux95,aux101,aux107],c)
**EOF**
