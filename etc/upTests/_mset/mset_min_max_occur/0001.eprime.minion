MINION 3
# CSE_number = 10
# CSE_eliminated_expressions = 30
# CSE_total_size = 160
**VARIABLES**
DISCRETE x_MSetExplicit_00000 #
{0..9}
DISCRETE x_MSetExplicit_00001 #
{0..9}
DISCRETE x_MSetExplicit_00002 #
{0..9}
DISCRETE x_MSetExplicit_00003 #
{0..9}
DISCRETE x_MSetExplicit_00004 #
{0..9}
DISCRETE aux0 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=8) + (x_MSetExplicit_00001=8) + (x_MSetExplicit_00002=8) + (x_MSetExplicit_00003=8) + (x_MSetExplicit_00004=8))
{0..5}
DISCRETE aux1 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=4) + (x_MSetExplicit_00001=4) + (x_MSetExplicit_00002=4) + (x_MSetExplicit_00003=4) + (x_MSetExplicit_00004=4))
{0..5}
DISCRETE aux2 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=9) + (x_MSetExplicit_00001=9) + (x_MSetExplicit_00002=9) + (x_MSetExplicit_00003=9) + (x_MSetExplicit_00004=9))
{0..5}
DISCRETE aux3 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=0) + (x_MSetExplicit_00001=0) + (x_MSetExplicit_00002=0) + (x_MSetExplicit_00003=0) + (x_MSetExplicit_00004=0))
{0..5}
DISCRETE aux4 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=5) + (x_MSetExplicit_00001=5) + (x_MSetExplicit_00002=5) + (x_MSetExplicit_00003=5) + (x_MSetExplicit_00004=5))
{0..5}
DISCRETE aux5 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=1) + (x_MSetExplicit_00001=1) + (x_MSetExplicit_00002=1) + (x_MSetExplicit_00003=1) + (x_MSetExplicit_00004=1))
{0..5}
DISCRETE aux6 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=6) + (x_MSetExplicit_00001=6) + (x_MSetExplicit_00002=6) + (x_MSetExplicit_00003=6) + (x_MSetExplicit_00004=6))
{0..5}
DISCRETE aux7 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=2) + (x_MSetExplicit_00001=2) + (x_MSetExplicit_00002=2) + (x_MSetExplicit_00003=2) + (x_MSetExplicit_00004=2))
{0..5}
DISCRETE aux8 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=7) + (x_MSetExplicit_00001=7) + (x_MSetExplicit_00002=7) + (x_MSetExplicit_00003=7) + (x_MSetExplicit_00004=7))
{0..5}
DISCRETE aux9 #CSE: 3 occurrences of: ((x_MSetExplicit_00000=3) + (x_MSetExplicit_00001=3) + (x_MSetExplicit_00002=3) + (x_MSetExplicit_00003=3) + (x_MSetExplicit_00004=3))
{0..5}
BOOL aux10 #(x_MSetExplicit_00000=8)
BOOL aux11 #(x_MSetExplicit_00001=8)
BOOL aux12 #(x_MSetExplicit_00002=8)
BOOL aux13 #(x_MSetExplicit_00003=8)
BOOL aux14 #(x_MSetExplicit_00004=8)
BOOL aux15 #(x_MSetExplicit_00000=4)
BOOL aux16 #(x_MSetExplicit_00001=4)
BOOL aux17 #(x_MSetExplicit_00002=4)
BOOL aux18 #(x_MSetExplicit_00003=4)
BOOL aux19 #(x_MSetExplicit_00004=4)
BOOL aux20 #(x_MSetExplicit_00000=9)
BOOL aux21 #(x_MSetExplicit_00001=9)
BOOL aux22 #(x_MSetExplicit_00002=9)
BOOL aux23 #(x_MSetExplicit_00003=9)
BOOL aux24 #(x_MSetExplicit_00004=9)
BOOL aux25 #(x_MSetExplicit_00000=0)
BOOL aux26 #(x_MSetExplicit_00001=0)
BOOL aux27 #(x_MSetExplicit_00002=0)
BOOL aux28 #(x_MSetExplicit_00003=0)
BOOL aux29 #(x_MSetExplicit_00004=0)
BOOL aux30 #(x_MSetExplicit_00000=5)
BOOL aux31 #(x_MSetExplicit_00001=5)
BOOL aux32 #(x_MSetExplicit_00002=5)
BOOL aux33 #(x_MSetExplicit_00003=5)
BOOL aux34 #(x_MSetExplicit_00004=5)
BOOL aux35 #(x_MSetExplicit_00000=1)
BOOL aux36 #(x_MSetExplicit_00001=1)
BOOL aux37 #(x_MSetExplicit_00002=1)
BOOL aux38 #(x_MSetExplicit_00003=1)
BOOL aux39 #(x_MSetExplicit_00004=1)
BOOL aux40 #(x_MSetExplicit_00000=6)
BOOL aux41 #(x_MSetExplicit_00001=6)
BOOL aux42 #(x_MSetExplicit_00002=6)
BOOL aux43 #(x_MSetExplicit_00003=6)
BOOL aux44 #(x_MSetExplicit_00004=6)
BOOL aux45 #(x_MSetExplicit_00000=2)
BOOL aux46 #(x_MSetExplicit_00001=2)
BOOL aux47 #(x_MSetExplicit_00002=2)
BOOL aux48 #(x_MSetExplicit_00003=2)
BOOL aux49 #(x_MSetExplicit_00004=2)
BOOL aux50 #(x_MSetExplicit_00000=7)
BOOL aux51 #(x_MSetExplicit_00001=7)
BOOL aux52 #(x_MSetExplicit_00002=7)
BOOL aux53 #(x_MSetExplicit_00003=7)
BOOL aux54 #(x_MSetExplicit_00004=7)
BOOL aux55 #(x_MSetExplicit_00000=3)
BOOL aux56 #(x_MSetExplicit_00001=3)
BOOL aux57 #(x_MSetExplicit_00002=3)
BOOL aux58 #(x_MSetExplicit_00003=3)
BOOL aux59 #(x_MSetExplicit_00004=3)
**SEARCH**
PRINT[[x_MSetExplicit_00000],[x_MSetExplicit_00001],[x_MSetExplicit_00002],[x_MSetExplicit_00003],[x_MSetExplicit_00004]]
VARORDER STATIC [x_MSetExplicit_00000,x_MSetExplicit_00001,x_MSetExplicit_00002,x_MSetExplicit_00003,x_MSetExplicit_00004]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59]
**CONSTRAINTS**
reify(w-literal(x_MSetExplicit_00000,8), aux10)
reify(w-literal(x_MSetExplicit_00001,8), aux11)
reify(w-literal(x_MSetExplicit_00002,8), aux12)
reify(w-literal(x_MSetExplicit_00003,8), aux13)
reify(w-literal(x_MSetExplicit_00004,8), aux14)
reify(w-literal(x_MSetExplicit_00000,4), aux15)
reify(w-literal(x_MSetExplicit_00001,4), aux16)
reify(w-literal(x_MSetExplicit_00002,4), aux17)
reify(w-literal(x_MSetExplicit_00003,4), aux18)
reify(w-literal(x_MSetExplicit_00004,4), aux19)
reify(w-literal(x_MSetExplicit_00000,9), aux20)
reify(w-literal(x_MSetExplicit_00001,9), aux21)
reify(w-literal(x_MSetExplicit_00002,9), aux22)
reify(w-literal(x_MSetExplicit_00003,9), aux23)
reify(w-literal(x_MSetExplicit_00004,9), aux24)
reify(w-literal(x_MSetExplicit_00000,0), aux25)
reify(w-literal(x_MSetExplicit_00001,0), aux26)
reify(w-literal(x_MSetExplicit_00002,0), aux27)
reify(w-literal(x_MSetExplicit_00003,0), aux28)
reify(w-literal(x_MSetExplicit_00004,0), aux29)
reify(w-literal(x_MSetExplicit_00000,5), aux30)
reify(w-literal(x_MSetExplicit_00001,5), aux31)
reify(w-literal(x_MSetExplicit_00002,5), aux32)
reify(w-literal(x_MSetExplicit_00003,5), aux33)
reify(w-literal(x_MSetExplicit_00004,5), aux34)
reify(w-literal(x_MSetExplicit_00000,1), aux35)
reify(w-literal(x_MSetExplicit_00001,1), aux36)
reify(w-literal(x_MSetExplicit_00002,1), aux37)
reify(w-literal(x_MSetExplicit_00003,1), aux38)
reify(w-literal(x_MSetExplicit_00004,1), aux39)
reify(w-literal(x_MSetExplicit_00000,6), aux40)
reify(w-literal(x_MSetExplicit_00001,6), aux41)
reify(w-literal(x_MSetExplicit_00002,6), aux42)
reify(w-literal(x_MSetExplicit_00003,6), aux43)
reify(w-literal(x_MSetExplicit_00004,6), aux44)
reify(w-literal(x_MSetExplicit_00000,2), aux45)
reify(w-literal(x_MSetExplicit_00001,2), aux46)
reify(w-literal(x_MSetExplicit_00002,2), aux47)
reify(w-literal(x_MSetExplicit_00003,2), aux48)
reify(w-literal(x_MSetExplicit_00004,2), aux49)
reify(w-literal(x_MSetExplicit_00000,7), aux50)
reify(w-literal(x_MSetExplicit_00001,7), aux51)
reify(w-literal(x_MSetExplicit_00002,7), aux52)
reify(w-literal(x_MSetExplicit_00003,7), aux53)
reify(w-literal(x_MSetExplicit_00004,7), aux54)
reify(w-literal(x_MSetExplicit_00000,3), aux55)
reify(w-literal(x_MSetExplicit_00001,3), aux56)
reify(w-literal(x_MSetExplicit_00002,3), aux57)
reify(w-literal(x_MSetExplicit_00003,3), aux58)
reify(w-literal(x_MSetExplicit_00004,3), aux59)
watched-or({watched-and({ineq(2, aux3, 0),ineq(aux3, 3, 0)}),w-literal(aux3,0)})
watched-or({watched-and({ineq(2, aux5, 0),ineq(aux5, 3, 0)}),w-literal(aux5,0)})
watched-or({watched-and({ineq(2, aux7, 0),ineq(aux7, 3, 0)}),w-literal(aux7,0)})
watched-or({watched-and({ineq(2, aux9, 0),ineq(aux9, 3, 0)}),w-literal(aux9,0)})
watched-or({watched-and({ineq(2, aux1, 0),ineq(aux1, 3, 0)}),w-literal(aux1,0)})
watched-or({watched-and({ineq(2, aux4, 0),ineq(aux4, 3, 0)}),w-literal(aux4,0)})
watched-or({watched-and({ineq(2, aux6, 0),ineq(aux6, 3, 0)}),w-literal(aux6,0)})
watched-or({watched-and({ineq(2, aux8, 0),ineq(aux8, 3, 0)}),w-literal(aux8,0)})
watched-or({watched-and({ineq(2, aux0, 0),ineq(aux0, 3, 0)}),w-literal(aux0,0)})
watched-or({watched-and({ineq(2, aux2, 0),ineq(aux2, 3, 0)}),w-literal(aux2,0)})
ineq(x_MSetExplicit_00000, x_MSetExplicit_00001, 0)
ineq(x_MSetExplicit_00001, x_MSetExplicit_00002, 0)
ineq(x_MSetExplicit_00002, x_MSetExplicit_00003, 0)
ineq(x_MSetExplicit_00003, x_MSetExplicit_00004, 0)
ineq(4, x_MSetExplicit_00000, -1)
ineq(4, x_MSetExplicit_00001, -1)
ineq(4, x_MSetExplicit_00002, -1)
ineq(4, x_MSetExplicit_00003, -1)
ineq(4, x_MSetExplicit_00004, -1)
sumleq([aux10,aux11,aux12,aux13,aux14],aux0)
sumgeq([aux10,aux11,aux12,aux13,aux14],aux0)
sumleq([aux15,aux16,aux17,aux18,aux19],aux1)
sumgeq([aux15,aux16,aux17,aux18,aux19],aux1)
sumleq([aux20,aux21,aux22,aux23,aux24],aux2)
sumgeq([aux20,aux21,aux22,aux23,aux24],aux2)
sumleq([aux25,aux26,aux27,aux28,aux29],aux3)
sumgeq([aux25,aux26,aux27,aux28,aux29],aux3)
sumleq([aux30,aux31,aux32,aux33,aux34],aux4)
sumgeq([aux30,aux31,aux32,aux33,aux34],aux4)
sumleq([aux35,aux36,aux37,aux38,aux39],aux5)
sumgeq([aux35,aux36,aux37,aux38,aux39],aux5)
sumleq([aux40,aux41,aux42,aux43,aux44],aux6)
sumgeq([aux40,aux41,aux42,aux43,aux44],aux6)
sumleq([aux45,aux46,aux47,aux48,aux49],aux7)
sumgeq([aux45,aux46,aux47,aux48,aux49],aux7)
sumleq([aux50,aux51,aux52,aux53,aux54],aux8)
sumgeq([aux50,aux51,aux52,aux53,aux54],aux8)
sumleq([aux55,aux56,aux57,aux58,aux59],aux9)
sumgeq([aux55,aux56,aux57,aux58,aux59],aux9)
**EOF**
