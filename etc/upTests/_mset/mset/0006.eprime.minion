MINION 3
# CSE_number = 19
# CSE_eliminated_expressions = 55
# CSE_total_size = 57
**VARIABLES**
DISCRETE x_MSetOccurrence_00000 #
{0..5}
DISCRETE x_MSetOccurrence_00001 #
{0..5}
DISCRETE x_MSetOccurrence_00002 #
{0..5}
DISCRETE x_MSetOccurrence_00003 #
{0..5}
DISCRETE x_MSetOccurrence_00004 #
{0..5}
DISCRETE x_MSetOccurrence_00005 #
{0..5}
DISCRETE y_MSetExplicit_00000 #
{3..7}
DISCRETE y_MSetExplicit_00001 #
{3..7}
DISCRETE y_MSetExplicit_00002 #
{3..7}
BOOL aux0 #CSE: 6 occurrences of: (0<x_MSetOccurrence_00001)
BOOL aux1 #CSE: 6 occurrences of: (0<x_MSetOccurrence_00002)
BOOL aux2 #CSE: 6 occurrences of: (0<x_MSetOccurrence_00003)
BOOL aux3 #CSE: 2 occurrences of: (y_MSetExplicit_00001=y_MSetExplicit_00002)
BOOL aux4 #CSE: 2 occurrences of: (y_MSetExplicit_00000=y_MSetExplicit_00002)
BOOL aux5 #CSE: 2 occurrences of: (y_MSetExplicit_00000=y_MSetExplicit_00001)
BOOL aux6 #CSE: 2 occurrences of: (7=y_MSetExplicit_00002)
BOOL aux7 #CSE: 2 occurrences of: (7=y_MSetExplicit_00001)
BOOL aux8 #CSE: 2 occurrences of: (7=y_MSetExplicit_00000)
BOOL aux9 #CSE: 2 occurrences of: (5=y_MSetExplicit_00000)
BOOL aux10 #CSE: 2 occurrences of: (5=y_MSetExplicit_00002)
BOOL aux11 #CSE: 2 occurrences of: (5=y_MSetExplicit_00001)
BOOL aux12 #CSE: 2 occurrences of: (6=y_MSetExplicit_00002)
BOOL aux13 #CSE: 2 occurrences of: (6=y_MSetExplicit_00000)
BOOL aux14 #CSE: 2 occurrences of: (6=y_MSetExplicit_00001)
BOOL aux15 #CSE: 2 occurrences of: (4=y_MSetExplicit_00002)
BOOL aux16 #CSE: 2 occurrences of: (4=y_MSetExplicit_00000)
BOOL aux17 #CSE: 2 occurrences of: (4=y_MSetExplicit_00001)
BOOL aux18 #(0<x_MSetOccurrence_00004)
BOOL aux19 #(0<x_MSetOccurrence_00005)
BOOL aux20 #(aux9*aux0)
BOOL aux21 #(aux13*aux1)
BOOL aux22 #(aux8*aux2)
BOOL aux23 #(aux11*aux0)
BOOL aux24 #(aux14*aux1)
BOOL aux25 #(aux7*aux2)
BOOL aux26 #(aux10*aux0)
BOOL aux27 #(aux12*aux1)
BOOL aux28 #(aux6*aux2)
BOOL aux29 #((aux9 + aux11 + aux10)<=aux0)
BOOL aux30 #((aux13 + aux14 + aux12)<=aux1)
BOOL aux31 #((aux8 + aux7 + aux6)<=aux2)
**SEARCH**
PRINT[[x_MSetOccurrence_00000],[x_MSetOccurrence_00001],[x_MSetOccurrence_00002],[x_MSetOccurrence_00003],[x_MSetOccurrence_00004],[x_MSetOccurrence_00005],[y_MSetExplicit_00000],[y_MSetExplicit_00001],[y_MSetExplicit_00002]]
VARORDER STATIC [x_MSetOccurrence_00000,x_MSetOccurrence_00001,x_MSetOccurrence_00002,x_MSetOccurrence_00003,x_MSetOccurrence_00004,x_MSetOccurrence_00005,y_MSetExplicit_00000,y_MSetExplicit_00001,y_MSetExplicit_00002]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31]
**CONSTRAINTS**
reify(ineq(0, x_MSetOccurrence_00004, -1), aux18)
reify(ineq(0, x_MSetOccurrence_00005, -1), aux19)
product(aux9, aux0, aux20)
product(aux13, aux1, aux21)
product(aux8, aux2, aux22)
product(aux11, aux0, aux23)
product(aux14, aux1, aux24)
product(aux7, aux2, aux25)
product(aux10, aux0, aux26)
product(aux12, aux1, aux27)
product(aux6, aux2, aux28)
reify(sumleq([aux9,aux11,aux10],aux0), aux29)
reify(sumleq([aux13,aux14,aux12],aux1), aux30)
reify(sumleq([aux8,aux7,aux6],aux2), aux31)
reify(ineq(0, x_MSetOccurrence_00001, -1), aux0)
reify(ineq(0, x_MSetOccurrence_00002, -1), aux1)
reify(ineq(0, x_MSetOccurrence_00003, -1), aux2)
reify(eq(y_MSetExplicit_00001,y_MSetExplicit_00002), aux3)
reify(eq(y_MSetExplicit_00000,y_MSetExplicit_00002), aux4)
reify(eq(y_MSetExplicit_00000,y_MSetExplicit_00001), aux5)
reify(w-literal(y_MSetExplicit_00002,7), aux6)
reify(w-literal(y_MSetExplicit_00001,7), aux7)
reify(w-literal(y_MSetExplicit_00000,7), aux8)
reify(w-literal(y_MSetExplicit_00000,5), aux9)
reify(w-literal(y_MSetExplicit_00002,5), aux10)
reify(w-literal(y_MSetExplicit_00001,5), aux11)
reify(w-literal(y_MSetExplicit_00002,6), aux12)
reify(w-literal(y_MSetExplicit_00000,6), aux13)
reify(w-literal(y_MSetExplicit_00001,6), aux14)
reify(w-literal(y_MSetExplicit_00002,4), aux15)
reify(w-literal(y_MSetExplicit_00000,4), aux16)
reify(w-literal(y_MSetExplicit_00001,4), aux17)
ineq(0, x_MSetOccurrence_00000, -1)
ineq(y_MSetExplicit_00000, y_MSetExplicit_00001, 0)
ineq(y_MSetExplicit_00001, y_MSetExplicit_00002, 0)
weightedsumleq([-1,-1,-1,-1,1,1,1],[aux16,aux20,aux21,aux22,1,aux5,aux4],0)
weightedsumleq([-1,-1,-1,-1,1,1,1],[aux17,aux23,aux24,aux25,1,aux5,aux3],0)
weightedsumleq([-1,-1,-1,-1,1,1,1],[aux15,aux26,aux27,aux28,1,aux4,aux3],0)
sumleq([aux16,aux17,aux15],1)
ineq(aux0, aux29, 0)
ineq(aux1, aux30, 0)
ineq(aux2, aux31, 0)
sumleq([1,aux0,aux1,aux2,aux18,aux19],5)
sumgeq([1,aux0,aux1,aux2,aux18,aux19],5)
**EOF**
