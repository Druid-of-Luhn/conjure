[useChannelling] True
[representation] find f: function (total) int(1..2) --> int(-1, 1) (#2) Function~1D, Function~AsReln
[configuration] f§region1#Function~1D
[addedDecl] find f_Function~1D: matrix indexed by [int(1..2)] of int(-1, 1)
[refn] 0
[applied] f§region1#Function~1D = function(1 --> -1, 2 --> 1)
          {rules/refns/horizontal/function-eq.rule}
              (forAll v__3 in defined(f§region1#Function~1D) . f§region1#Function~1D(v__3) = function(1 --> -1, 2 --> 1)(v__3))
[applied] f§region1#Function~1D(v__3)
          {rules/refns/vertical/Function~1D/image.rule}
              f_Function~1D§region1[v__3]
[applied] function(1 --> -1, 2 --> 1)(v__3)
          {builtIn.functionLiteralApply}
              toInt(1 = v__3) * -1 + toInt(2 = v__3)
[applied] (forAll v__3 in defined(f§region1#Function~1D) . f_Function~1D§region1[v__3] = toInt(1 = v__3) * -1 + toInt(2 = v__3))
          {rules/refns/horizontal/function-defined-quantified.rule}
              (forAll v__5 in toSet(f§region1#Function~1D) . f_Function~1D§region1[v__5[1]] = toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]))
[applied] (forAll v__5 in toSet(f§region1#Function~1D) . f_Function~1D§region1[v__5[1]] = toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]))
          {rules/refns/vertical/Function~1D/toSet-quantified.rule}
              (forAll v__6 : int(1..2) . f_Function~1D§region1[v__6] = toInt(1 = v__6) * -1 + toInt(2 = v__6))
[removeRefinedDecl] find f: function (total) int(1..2) --> int(-1, 1)
[repr] 1