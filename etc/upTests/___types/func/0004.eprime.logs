[useChannelling] True
[representation] find f: function (total) int(1..2) --> int(-1, 1) (#2) Function~1D, Function~AsReln
[configuration] f§region1#Function~AsReln
[addedDecl] find f_Function~AsReln: relation of (int(1..2) * int(-1, 1))
[addedStructuralCons] {Function~AsReln}
                      (forAll v__1 : int(1..2) . (sum v__2 in toSet(f_Function~AsReln§region1) . toInt(v__1 = v__2[1])) = 1)
[refn] 0
[applied] f§region1#Function~AsReln = function(1 --> -1, 2 --> 1)
          {rules/refns/horizontal/function-eq.rule}
              (forAll v__3 in defined(f§region1#Function~AsReln) . f§region1#Function~AsReln(v__3) = function(1 --> -1, 2 --> 1)(v__3))
[applied] f§region1#Function~AsReln(v__3)
          {rules/refns/vertical/Function~AsReln/image-int.rule}
              (sum v__4 in toSet(f_Function~AsReln§region1) , v__4[1] = v__3 . v__4[2])
[applied] function(1 --> -1, 2 --> 1)(v__3)
          {builtIn.functionLiteralApply}
              toInt(1 = v__3) * -1 + toInt(2 = v__3)
[applied] (forAll v__3 in defined(f§region1#Function~AsReln)
               . (sum v__4 in toSet(f_Function~AsReln§region1) , v__4[1] = v__3 . v__4[2]) = toInt(1 = v__3) * -1 + toInt(2 = v__3))
          {rules/refns/horizontal/function-defined-quantified.rule}
              (forAll v__6 in toSet(f§region1#Function~AsReln)
                   . (sum v__4 in toSet(f_Function~AsReln§region1) , v__4[1] = v__6[1] . v__4[2]) = toInt(1 = v__6[1]) * -1 + toInt(2 = v__6[1]))
[applied] (forAll v__6 in toSet(f§region1#Function~AsReln)
               . (sum v__4 in toSet(f_Function~AsReln§region1) , v__4[1] = v__6[1] . v__4[2]) = toInt(1 = v__6[1]) * -1 + toInt(2 = v__6[1]))
          {rules/refns/vertical/Function~AsReln/quantified.rule}
              (forAll v__6 in toSet(f_Function~AsReln§region1)
                   . (sum v__4 in toSet(f_Function~AsReln§region1) , v__4[1] = v__6[1] . v__4[2]) = toInt(1 = v__6[1]) * -1 + toInt(2 = v__6[1]))
[removeRefinedDecl] find f: function (total) int(1..2) --> int(-1, 1)
[repr] 1
[representation] find f_Function~AsReln: relation of (int(1..2) * int(-1, 1)) (#2) RelationAsSet, RelationIntMatrix2
[configuration] f_Function~AsReln§region1#RelationIntMatrix2
[addedDecl] find f_Function~AsReln_RelationIntMatrix2: matrix indexed by [int(1..2), int(-1, 1)] of bool
[refn] 1
[applied] (sum v__1 in toSet(f_Function~AsReln§region1#RelationIntMatrix2) , v__1[1] = v__0[1] . v__1[2])
          {rules/refns/vertical/relation-IntMatrix2/relation-IntMatrix2-toSet.rule}
              (sum v__7 : int(1..2) . (sum v__8 : int(-1, 1) , v__7 = v__0[1] /\ f_Function~AsReln_RelationIntMatrix2§region1[v__7, v__8] . v__8))
[applied] (forAll v__0 in toSet(f_Function~AsReln§region1#RelationIntMatrix2)
               . (sum v__7 : int(1..2) . (sum v__8 : int(-1, 1) , v__7 = v__0[1] /\ f_Function~AsReln_RelationIntMatrix2§region1[v__7, v__8] . v__8))
                 =
                 toInt(1 = v__0[1]) * -1 + toInt(2 = v__0[1]))
          {rules/refns/vertical/relation-IntMatrix2/relation-IntMatrix2-toSet.rule}
              (forAll v__9 : int(1..2)
                   . (forAll v__10 : int(-1, 1) , f_Function~AsReln_RelationIntMatrix2§region1[v__9, v__10]
                          . (sum v__7 : int(1..2) . (sum v__8 : int(-1, 1) , v__7 = v__9 /\ f_Function~AsReln_RelationIntMatrix2§region1[v__7, v__8] . v__8))
                            =
                            toInt(1 = v__9) * -1 + toInt(2 = v__9)))
[applied] (sum v__1 in toSet(f_Function~AsReln§region1#RelationIntMatrix2) . toInt(v__0 = v__1[1]))
          {rules/refns/vertical/relation-IntMatrix2/relation-IntMatrix2-toSet.rule}
              (sum v__11 : int(1..2) . (sum v__12 : int(-1, 1) , f_Function~AsReln_RelationIntMatrix2§region1[v__11, v__12] . toInt(v__0 = v__11)))
[removeRefinedDecl] find f_Function~AsReln: relation of (int(1..2) * int(-1, 1))
[repr] 2