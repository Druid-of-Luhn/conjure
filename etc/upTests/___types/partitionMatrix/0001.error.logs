[useChannelling] True
[representation] find p: partition from
                             matrix indexed by [int(1..2)] of int(1..2)
                 (#1)
                 MSetOfSets
[configuration] pÂ§region1#MSetOfSets
[addedDecl] find p_MSetOfSets:
                    mset of set of matrix indexed by [int(1..2)] of int(1..2)
[refn] 0
[applied] v__1 != v__2
          {rules/refns/horizontal/neq-to-eq.rule}
              !(v__1 = v__2)
[applied] v__1 = v__2
          {rules/refns/horizontal/set-eq-to-subsets.rule}
              v__1 subsetEq v__2 /\ v__1 supsetEq v__2
[applied] v__1 subsetEq v__2
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__4 in v__1 . v__4 in v__2)
[applied] v__4 in v__2
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__5 in v__2 . v__5 = v__4)
[applied] v__1 supsetEq v__2
          {rules/refns/horizontal/set-supseteq-to-subseteq.rule}
              v__2 subsetEq v__1
[applied] v__2 subsetEq v__1
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__6 in v__2 . v__6 in v__1)
[applied] v__6 in v__1
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__7 in v__1 . v__7 = v__6)
[applied] |v__1 intersect v__2|
          {rules/refns/horizontal/set-card.rule}
              (sum v__8 in v__1 intersect v__2 . 1)
[applied] (sum v__8 in v__1 intersect v__2 . 1)
          {rules/refns/horizontal/set-intersect-quantifier.rule}
              (sum v__8 in v__1 , v__8 in v__2 . 1)
[applied] v__8 in v__2
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__9 in v__2 . v__9 = v__8)
[applied] v__1 in v__3
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__10 in v__3 . (forAll v__11 : int(1..2) . v__10[v__11] = v__1[v__11]))
[removeRefinedDecl] find p: partition from
                                matrix indexed by [int(1..2)] of int(1..2)
[repr] 1