language ESSENCE' 1.0

find m_SetExplicitVarSize_tuple1:
        matrix indexed by [int(4, 5), int(1..3)] of bool
find m_SetExplicitVarSize_tuple2:
        matrix indexed by [int(4, 5), int(1..3), int(6..8)] of int(10..13)
such that
    forAll v__0 : int(4, 5)
        . (forAll v__1 : int(1..2)
               . m_SetExplicitVarSize_tuple1[v__0, v__1]
                 /\
                 m_SetExplicitVarSize_tuple1[v__0, v__1 + 1]
                 ->
                 flatten(m_SetExplicitVarSize_tuple2[v__0, v__1, ..])
                 <lex
                 flatten(m_SetExplicitVarSize_tuple2[v__0, v__1 + 1, ..]))
          /\
          (forAll v__1 : int(1..2)
               . m_SetExplicitVarSize_tuple1[v__0, v__1]
                 >=
                 m_SetExplicitVarSize_tuple1[v__0, v__1 + 1]),
    forAll v__0 : int(4, 5)
        . (sum v__1 : int(1..3) . m_SetExplicitVarSize_tuple1[v__0, v__1]) >= 1
