language ESSENCE' 1.0

given n: int(1..5)
find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..2 ** n)] of bool
find x_SetExplicitVarSize_tuple2_SetOccurrence:
        matrix indexed by [int(1..2 ** n), int(1..n)] of bool
such that
    (sum v__0 : int(1..2 ** n) . x_SetExplicitVarSize_tuple1[v__0]) >= n,
    forAll v__0 : int(1..2 ** n)
        . x_SetExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..n)
               . x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1] * v__1)
          <
          n + 3,
    forAll v__0 : int(1..2 ** n)
        . (sum v__1 : int(1..n) . x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1])
          >=
          1,
    forAll v__0 : int(1..2 ** n - 1)
        . x_SetExplicitVarSize_tuple1[v__0] /\ x_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          flatten(x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, ..])
          <lex
          flatten(x_SetExplicitVarSize_tuple2_SetOccurrence[v__0 + 1, ..]),
    forAll v__0 : int(1..2 ** n - 1)
        . x_SetExplicitVarSize_tuple1[v__0] <= x_SetExplicitVarSize_tuple1[v__0 + 1]
