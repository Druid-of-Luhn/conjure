[useChannelling] True
[handleEnums] letting VCol be new type enum {r, ry, g, y}
              ~~>
              letting VCol_fromEnum be domain int(1..4)
[handleEnums] letting PCol be new type enum {pr, pg}
              ~~>
              letting PCol_fromEnum be domain int(1..2)
[representation] find valid:
                         set of function (total) int(1..n) --> (int(1..4), int(1..2))
                 (#2)
                 Set~ExplicitVarSize, Set~ExplicitVarSizeWithMarker
[configuration] valid§region1#Set~ExplicitVarSize
[addedDecl] find valid_Set~ExplicitVarSize:
                    matrix indexed by [int(1..n * 8)] of (bool,
                                                          function (total) int(1..n) --> (int(1..4), int(1..2)))
[addedStructuralCons] (forAll v__1 : int(1..n * 8 - 1)
                           , valid_Set~ExplicitVarSize§region1[v__1, 1]
                             /\
                             valid_Set~ExplicitVarSize§region1[v__1 + 1, 1]
                           . valid_Set~ExplicitVarSize§region1[v__1, 2]
                             .<
                             valid_Set~ExplicitVarSize§region1[v__1 + 1, 2])
                      /\
                      (forAll v__1 : int(1..n * 8 - 1)
                           . valid_Set~ExplicitVarSize§region1[v__1, 1]
                             >=
                             valid_Set~ExplicitVarSize§region1[v__1 + 1, 1])
[refn] 0
[applied] {c(rd), c(rd % n + 1)} in {{(1, 1), (3, 2)}, {(2, 1), (4, 1)}}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              {(1, 1), (3, 2)} = {c(rd), c(rd % n + 1)}
              \/
              {(2, 1), (4, 1)} = {c(rd), c(rd % n + 1)}
[applied] {(1, 1), (3, 2)} = {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/eq-to-subsets.rule}
              {(1, 1), (3, 2)} subsetEq {c(rd), c(rd % n + 1)}
              /\
              {(1, 1), (3, 2)} supsetEq {c(rd), c(rd % n + 1)}
[applied] {(1, 1), (3, 2)} subsetEq {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              (1, 1) in {c(rd), c(rd % n + 1)} /\ (3, 2) in {c(rd), c(rd % n + 1)}
[applied] (1, 1) in {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              c(rd)[1] = 1 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 1 /\ c(rd % n + 1)[2] = 1
[applied] (3, 2) in {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              c(rd)[1] = 3 /\ c(rd)[2] = 2 \/ c(rd % n + 1)[1] = 3 /\ c(rd % n + 1)[2] = 2
[applied] {(1, 1), (3, 2)} supsetEq {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/supseteq-to-subseteq.rule}
              {c(rd), c(rd % n + 1)} subsetEq {(1, 1), (3, 2)}
[applied] {c(rd), c(rd % n + 1)} subsetEq {(1, 1), (3, 2)}
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              c(rd) in {(1, 1), (3, 2)} /\ c(rd % n + 1) in {(1, 1), (3, 2)}
[applied] c(rd) in {(1, 1), (3, 2)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              1 = c(rd)[1] /\ 1 = c(rd)[2] \/ 3 = c(rd)[1] /\ 2 = c(rd)[2]
[applied] c(rd % n + 1) in {(1, 1), (3, 2)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              1 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]
              \/
              3 = c(rd % n + 1)[1] /\ 2 = c(rd % n + 1)[2]
[applied] {(2, 1), (4, 1)} = {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/eq-to-subsets.rule}
              {(2, 1), (4, 1)} subsetEq {c(rd), c(rd % n + 1)}
              /\
              {(2, 1), (4, 1)} supsetEq {c(rd), c(rd % n + 1)}
[applied] {(2, 1), (4, 1)} subsetEq {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              (2, 1) in {c(rd), c(rd % n + 1)} /\ (4, 1) in {c(rd), c(rd % n + 1)}
[applied] (2, 1) in {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              c(rd)[1] = 2 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 2 /\ c(rd % n + 1)[2] = 1
[applied] (4, 1) in {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              c(rd)[1] = 4 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 4 /\ c(rd % n + 1)[2] = 1
[applied] {(2, 1), (4, 1)} supsetEq {c(rd), c(rd % n + 1)}
          {rules/refns/horizontal/set/supseteq-to-subseteq.rule}
              {c(rd), c(rd % n + 1)} subsetEq {(2, 1), (4, 1)}
[applied] {c(rd), c(rd % n + 1)} subsetEq {(2, 1), (4, 1)}
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              c(rd) in {(2, 1), (4, 1)} /\ c(rd % n + 1) in {(2, 1), (4, 1)}
[applied] c(rd) in {(2, 1), (4, 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              2 = c(rd)[1] /\ 1 = c(rd)[2] \/ 4 = c(rd)[1] /\ 1 = c(rd)[2]
[applied] c(rd % n + 1) in {(2, 1), (4, 1)}
          {rules/refns/horizontal/set/in-to-quantified.rule}
              2 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]
              \/
              4 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]
[applied] (forAll c in valid§region1#Set~ExplicitVarSize
               . (forAll rd : int(1..n)
                      . (c(rd)[1] = 1 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 1 /\ c(rd % n + 1)[2] = 1)
                        /\
                        (c(rd)[1] = 3 /\ c(rd)[2] = 2 \/ c(rd % n + 1)[1] = 3 /\ c(rd % n + 1)[2] = 2)
                        /\
                        ((1 = c(rd)[1] /\ 1 = c(rd)[2] \/ 3 = c(rd)[1] /\ 2 = c(rd)[2])
                         /\
                         (1 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]
                          \/
                          3 = c(rd % n + 1)[1] /\ 2 = c(rd % n + 1)[2]))
                        \/
                        (c(rd)[1] = 2 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 2 /\ c(rd % n + 1)[2] = 1)
                        /\
                        (c(rd)[1] = 4 /\ c(rd)[2] = 1 \/ c(rd % n + 1)[1] = 4 /\ c(rd % n + 1)[2] = 1)
                        /\
                        ((2 = c(rd)[1] /\ 1 = c(rd)[2] \/ 4 = c(rd)[1] /\ 1 = c(rd)[2])
                         /\
                         (2 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]
                          \/
                          4 = c(rd % n + 1)[1] /\ 1 = c(rd % n + 1)[2]))))
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (forAll v__16 : int(1..n * 8) , valid_Set~ExplicitVarSize§region1[v__16, 1]
                   . (forAll rd : int(1..n)
                          . (valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1] = 1
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                             \/
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1] = 1
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2] = 1)
                            /\
                            (valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1] = 3
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2] = 2
                             \/
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1] = 3
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2] = 2)
                            /\
                            ((1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2]
                              \/
                              3 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1]
                              /\
                              2 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2])
                             /\
                             (1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2]
                              \/
                              3 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1]
                              /\
                              2 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2]))
                            \/
                            (valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1] = 2
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                             \/
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1] = 2
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2] = 1)
                            /\
                            (valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1] = 4
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                             \/
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1] = 4
                             /\
                             valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2] = 1)
                            /\
                            ((2 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2]
                              \/
                              4 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd)[2])
                             /\
                             (2 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2]
                              \/
                              4 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[1]
                              /\
                              1 = valid_Set~ExplicitVarSize§region1[v__16, 2](rd % n + 1)[2]))))
[removeRefinedDecl] find valid:
                            set of function (total) int(1..n) --> (int(1..4), int(1..2))
[removedDecl] find valid_Set~ExplicitVarSize:
                      matrix indexed by [int(1..n * 8)] of (bool,
                                                            function (total) int(1..n) --> (int(1..4), int(1..2)))
[matrixToTuple] valid_Set~ExplicitVarSize∑1
[repr] 1
[representation] find valid_Set~ExplicitVarSize_tuple2:
                         matrix indexed by [int(1..n * 8)] of function (total)
                                                                  int(1..n) --> (int(1..4), int(1..2))
                 (#2)
                 Matrix1D, AsReln
[configuration] valid_Set~ExplicitVarSize_tuple2§region1#Matrix1D
[addedDecl] find valid_Set~ExplicitVarSize_tuple2_Matrix1D:
                    matrix indexed by [int(1..n * 8), int(1..n)] of (int(1..4), int(1..2))
[refn] 1
[applied] valid_Set~ExplicitVarSize_tuple2§region1#Matrix1D[v__0](v__1)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, v__1]
[applied] valid_Set~ExplicitVarSize_tuple2§region1#Matrix1D[v__0](v__1 % n + 1)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, v__1 % n + 1]
[applied] valid_Set~ExplicitVarSize_tuple2§region1#Matrix1D[v__0]
          .<
          valid_Set~ExplicitVarSize_tuple2§region1#Matrix1D[v__0 + 1]
          {rules/refns/vertical/function-matrix1d/DotLt.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 1]
              .<
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 1]
              \/
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 1]
              =
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 1]
              /\
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 2]
              .<
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 2]
              \/
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 1]
              =
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 1]
              /\
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 2]
              =
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 2]
              /\
              (valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 1]
               .<
               valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 1]
               \/
               valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 1]
               =
               valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 1]
               /\
               valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 2]
               .<
               valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 2])
[applied] valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 1]
          .<
          valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 1]
          {rules/refns/horizontal/DotLt-ints.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 1]
              <
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 1]
[applied] valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 2]
          .<
          valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 1, 2]
              <
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 1, 2]
[applied] valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 1]
          .<
          valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 1]
          {rules/refns/horizontal/DotLt-ints.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 1]
              <
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 1]
[applied] valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 2]
          .<
          valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0, 2, 2]
              <
              valid_Set~ExplicitVarSize_tuple2_Matrix1D§region1[v__0 + 1, 2, 2]
[removeRefinedDecl] find valid_Set~ExplicitVarSize_tuple2:
                            matrix indexed by [int(1..n * 8)] of function (total)
                                                                     int(1..n) --> (int(1..4), int(1..2))
[removedDecl] find valid_Set~ExplicitVarSize_tuple2_Matrix1D:
                      matrix indexed by [int(1..n * 8), int(1..n)] of (int(1..4), int(1..2))
[matrixToTuple] valid_Set~ExplicitVarSize_tuple2_Matrix1D∑2
[repr] 2