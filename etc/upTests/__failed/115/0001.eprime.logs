[useChannelling] True
[representation] find route: function (total) int(1..n_planes) --> function int(1..n_flights) --> int(1..n_flights) (#2) Function~1D, Function~AsReln
[configuration] route§region1#Function~1D
[addedDecl] find route_Function~1D: matrix indexed by [int(1..n_planes)] of function int(1..n_flights) --> int(1..n_flights)
[refn] 0
[removeRefinedDecl] find route: function (total) int(1..n_planes) --> function int(1..n_flights) --> int(1..n_flights)
[repr] 1
[representation] find route_Function~1D: matrix indexed by [int(1..n_planes)] of function int(1..n_flights) --> int(1..n_flights)
                 (#2)
                 Function~1DPartial, Function~AsReln
[configuration] route_Function~1D§region1#Function~1DPartial
[addedDecl] find route_Function~1D_Function~1DPartial: matrix indexed by [int(1..n_planes), int(1..n_flights)] of (bool, int(1..n_flights))
[Evaluator.dontCare] dontCare(route_Function~1D_Function~1DPartial§region1[v__4, v__5, 2]) ~~> route_Function~1D_Function~1DPartial§region1[v__4, v__5, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__4 : int(1..n_planes)
                           . (forAll v__5 : int(1..n_flights) , !route_Function~1D_Function~1DPartial§region1[v__4, v__5, 1]
                                  . route_Function~1D_Function~1DPartial§region1[v__4, v__5, 2] = 1))
[refn] 1
[removeRefinedDecl] find route_Function~1D: matrix indexed by [int(1..n_planes)] of function int(1..n_flights) --> int(1..n_flights)
[matrixToTuple] route_Function~1D_Function~1DPartial∑2
[removedDecl] find route_Function~1D_Function~1DPartial: matrix indexed by [int(1..n_planes), int(1..n_flights)] of (bool, int(1..n_flights))
              Added the following:
              find route_Function~1D_Function~1DPartial_tuple1: matrix indexed by [int(1..n_planes), int(1..n_flights)] of bool
              find route_Function~1D_Function~1DPartial_tuple2: matrix indexed by [int(1..n_planes), int(1..n_flights)] of int(1..n_flights)
[repr] 2