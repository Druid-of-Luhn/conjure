[useChannelling] True
[handleEnums] letting Material be new type enum {glass, plastic}
              ~~>
              letting Material_fromEnum be domain int(1..2)
[representation] find contents: function int(1..(sum m : int(1..2) . function(1 --> 1, 2 --> 2)(m))) --> mset (maxOccur 3) of int(1..2)
                 (#2)
                 Function~1DPartial, Function~AsReln
[configuration] contents§region1#Function~1DPartial
[addedDecl] find contents_Function~1DPartial:
                    matrix indexed by [int(1..(sum m : int(1..2) . function(1 --> 1, 2 --> 2)(m)))] of (bool, mset (maxOccur 3) of int(1..2))
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..(sum m : int(1..2) . function(1 --> 1, 2 --> 2)(m))) , !contents_Function~1DPartial§region1[v__1, 1]
                           . dontCare(contents_Function~1DPartial§region1[v__1, 2]))
[refn] 0
[applied] function(1 --> 1, 2 --> 2)(m)
          {builtIn.functionLiteralApply}
              toInt(1 = m) + toInt(2 = m) * 2
[removeRefinedDecl] find contents: function int(1..(sum m : int(1..2) . function(1 --> 1, 2 --> 2)(m))) --> mset (maxOccur 3) of int(1..2)
[matrixToTuple] contents_Function~1DPartial∑1
[removedDecl] find contents_Function~1DPartial:
                      matrix indexed by [int(1..(sum m : int(1..2) . toInt(1 = m) + toInt(2 = m) * 2))] of (bool, mset (maxOccur 3) of int(1..2))
              Added the following:
              find contents_Function~1DPartial_tuple1: matrix indexed by [int(1..(sum m : int(1..2) . toInt(1 = m) + toInt(2 = m) * 2))] of bool
              find contents_Function~1DPartial_tuple2: matrix indexed by [int(1..(sum m : int(1..2) . toInt(1 = m) + toInt(2 = m) * 2))] of mset (maxOccur 3) of int(1..2)
[repr] 1
[representation] find contents: function int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2)) --> mset (maxOccur 3) of int(1..2)
                 (#2)
                 Function~1DPartial, Function~AsReln
[representation] find contents_Function~1DPartial_tuple2:
                         matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of mset (maxOccur 3) of int(1..2)
                 (#1)
                 MSet~Occurrence
[configuration] contents_Function~1DPartial_tuple2§region1#MSet~Occurrence contents_Function~1DPartial_tuple2§region2#MSet~Occurrence contents§region1#Function~1DPartial
[addedDecl] find contents_Function~1DPartial_tuple2_MSet~Occurrence:
                    matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2)), int(1..2)] of int(0..3)
[addedDecl] find contents_Function~1DPartial:
                    matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of (bool, mset (maxOccur 3) of int(1..2))
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__7 : int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2)) , !contents_Function~1DPartial§region1[v__7, 1]
                           . dontCare(contents_Function~1DPartial§region1[v__7, 2]))
[refn] 1
[applied] dontCare(contents_Function~1DPartial_tuple2§region1#MSet~Occurrence[v__0])
          {rules/refns/horizontal/dontcare/abstract.rule}
              dontCare(contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0])
[Evaluator.dontCare] dontCare(contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__10])
                     ~~>
                     contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__10] = 0
[applied] dontCare(contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0])
          {rules/refns/horizontal/dontcare/matrix.rule}
              (forAll v__10 : int(1..2) . contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__10] = 0)
[removeRefinedDecl] find contents: function int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2)) --> mset (maxOccur 3) of int(1..2)
[removeRefinedDecl] find contents_Function~1DPartial_tuple2:
                            matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of mset (maxOccur 3) of int(1..2)
[removedDecl] find contents_Function~1DPartial:
                      matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of (bool, mset (maxOccur 3) of int(1..2))
              Added the following:
              find contents_Function~1DPartial_tuple1: matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of bool
              find contents_Function~1DPartial_tuple2:
                      matrix indexed by [int(1..(sum v__0 : int(1..2) . toInt(1 = v__0) + toInt(2 = v__0) * 2))] of mset (maxOccur 3) of int(1..2)
[repr] 2
[configuration] contents_Function~1DPartial_tuple2§region1#MSet~Occurrence
[refn] 2
[Evaluator.dontCare] dontCare(contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__11])
                     ~~>
                     contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__11] = 0
[applied] dontCare(contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0])
          {rules/refns/horizontal/dontcare/matrix.rule}
              (forAll v__11 : int(1..2) . contents_Function~1DPartial_tuple2_MSet~Occurrence§region1[v__0, v__11] = 0)
[repr] 3