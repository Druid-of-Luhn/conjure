language ESSENCE' 1.0

find x_SetExplicit_RelationIntMatrix2:
        matrix indexed by [int(1..2), int(1..2), int(3)] of bool
such that
    flatten(x_SetExplicit_RelationIntMatrix2[1, .., ..])
    <lex
    flatten(x_SetExplicit_RelationIntMatrix2[2, .., ..]),
    exists v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . (forAll v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2] -> 2 = v__1 /\ 3 = v__2))
          /\
          (exists v__1 : int(1..2)
               . (exists v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2]
                        /\
                        (v__1 = 2 /\ v__2 = 3))),
    exists v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . (forAll v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2] -> false)),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . (forAll v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2] -> false))
          \/
          (exists v__1 : int(1..2)
               . (exists v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2] /\ (v__1 = 2 /\ v__2 = 3)))
          /\
          (forAll v__1 : int(1..2)
               . (forAll v__2 : int(3)
                      . x_SetExplicit_RelationIntMatrix2[v__0, v__1, v__2] -> 2 = v__1 /\ 3 = v__2))
