language ESSENCE' 1.0

find x_SetExplicit_SetExplicit:
        matrix indexed by [int(1..3), int(1..4)] of int(0..9)
such that
    exists v__0 : int(1..3)
        . (forAll v__1 : int(1..4)
               . 1 = x_SetExplicit_SetExplicit[v__0, v__1]
                 \/
                 9 = x_SetExplicit_SetExplicit[v__0, v__1]
                 \/
                 3 = x_SetExplicit_SetExplicit[v__0, v__1]
                 \/
                 2 = x_SetExplicit_SetExplicit[v__0, v__1])
          /\
          ((exists v__1 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__1] = 1)
           /\
           (exists v__1 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__1] = 9)
           /\
           (exists v__1 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__1] = 3)
           /\
           (exists v__1 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__1] = 2)),
    forAll v__0 : int(1..2)
        . flatten(x_SetExplicit_SetExplicit[v__0, ..])
          <lex
          flatten(x_SetExplicit_SetExplicit[v__0 + 1, ..]),
    forAll v__0 : int(1..3)
        . (forAll v__1 : int(1..3)
               . x_SetExplicit_SetExplicit[v__0, v__1]
                 <
                 x_SetExplicit_SetExplicit[v__0, v__1 + 1])
