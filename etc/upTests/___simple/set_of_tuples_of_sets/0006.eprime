language ESSENCE' 1.0

find x_SetExplicit_tuple1_SetOccurrence:
        matrix indexed by [int(1..2), int(2..4)] of bool
find x_SetExplicit_tuple2: matrix indexed by [int(1..2)] of int(4..7)
find x_SetExplicit_tuple3_SetOccurrence:
        matrix indexed by [int(1..2), int(6..9)] of bool
find x_SetExplicit_tuple3_SetExplicit:
        matrix indexed by [int(1..2), int(1..1)] of int(6..9)
such that
    flatten(x_SetExplicit_tuple1_SetOccurrence[1, ..])
    <lex
    flatten(x_SetExplicit_tuple1_SetOccurrence[2, ..])
    \/
    (forAll v__0 : int(2..4)
         . (exists v__1 : int(2..4)
                . x_SetExplicit_tuple1_SetOccurrence[1, v__1] /\ v__1 = v__0)
           <->
           (exists v__1 : int(2..4)
                . x_SetExplicit_tuple1_SetOccurrence[2, v__1] /\ v__1 = v__0))
    /\
    (forAll v__0 : int(2..4)
         . (exists v__1 : int(2..4)
                . x_SetExplicit_tuple1_SetOccurrence[1, v__1] /\ v__1 = v__0)
           <->
           (exists v__1 : int(2..4)
                . x_SetExplicit_tuple1_SetOccurrence[2, v__1] /\ v__1 = v__0))
    /\
    (x_SetExplicit_tuple2[1] < x_SetExplicit_tuple2[2]
     \/
     x_SetExplicit_tuple2[1] = x_SetExplicit_tuple2[2]
     /\
     flatten(x_SetExplicit_tuple3_SetExplicit[1, ..])
     <lex
     flatten(x_SetExplicit_tuple3_SetExplicit[2, ..])),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(6..9)
               . x_SetExplicit_tuple3_SetExplicit[v__0, 1] = v__1
                 <->
                 x_SetExplicit_tuple3_SetOccurrence[v__0, v__1] = true)
          /\
          (forAll v__1 : int(6..9)
               . x_SetExplicit_tuple3_SetExplicit[v__0, 1] = v__1
                 <->
                 x_SetExplicit_tuple3_SetOccurrence[v__0, v__1] = true),
    forAll v__0 : int(1..2)
        . (sum v__1 : int(2..4) . x_SetExplicit_tuple1_SetOccurrence[v__0, v__1]) = 2,
    forAll v__0 : int(1..2)
        . (sum v__1 : int(6..9) . x_SetExplicit_tuple3_SetOccurrence[v__0, v__1]) = 1
