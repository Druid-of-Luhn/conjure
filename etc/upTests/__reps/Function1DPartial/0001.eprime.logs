[useChannelling] True
[representation] find route: function (total) int(3..n_planes) --> function int(4..n_flights) --> int(7..10) (#2) Function~1D, Function~AsReln
[configuration] route§region1#Function~1D
[addedDecl] find route_Function~1D: matrix indexed by [int(3..n_planes)] of function int(4..n_flights) --> int(7..10)
[refn] 0
[applied] |r|
          {rules/refns/horizontal/function-card.rule}
              |toSet(r)|
[applied] |toSet(r)|
          {rules/refns/horizontal/set/card.rule}
              (sum v__3 in toSet(r) . 1)
[applied] (forAll r in range(route§region1#Function~1D) . (sum v__3 in toSet(r) . 1) > 1)
          {rules/refns/horizontal/function-range-quantified.rule}
              (forAll v__4 in toSet(route§region1#Function~1D) . (sum v__3 in toSet(v__4[2]) . 1) > 1)
[applied] (forAll v__4 in toSet(route§region1#Function~1D) . (sum v__3 in toSet(v__4[2]) . 1) > 1)
          {rules/refns/vertical/Function~1D/toSet-quantified.rule}
              (forAll v__5 : int(3..n_planes) . (sum v__3 in toSet(route_Function~1D§region1[v__5]) . 1) > 1)
[removeRefinedDecl] find route: function (total) int(3..n_planes) --> function int(4..n_flights) --> int(7..10)
[repr] 1
[representation] find route_Function~1D: matrix indexed by [int(3..n_planes)] of function int(4..n_flights) --> int(7..10)
                 (#2)
                 Function~1DPartial, Function~AsReln
[configuration] route_Function~1D§region1#Function~1DPartial
[addedDecl] find route_Function~1D_Function~1DPartial: matrix indexed by [int(3..n_planes), int(4..n_flights)] of (bool, int(7..10))
[Evaluator.dontCare] dontCare(route_Function~1D_Function~1DPartial§region1[v__7, v__8, 2]) ~~> route_Function~1D_Function~1DPartial§region1[v__7, v__8, 2] = 7
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__7 : int(3..n_planes)
                           . (forAll v__8 : int(4..n_flights) , !route_Function~1D_Function~1DPartial§region1[v__7, v__8, 1]
                                  . route_Function~1D_Function~1DPartial§region1[v__7, v__8, 2] = 7))
[refn] 1
[applied] (sum v__1 in toSet(route_Function~1D§region1#Function~1DPartial[v__0]) . 1)
          {rules/refns/vertical/Function~1DPartial/toSet-quantified.rule}
              (sum v__13 : int(4..n_flights) , route_Function~1D_Function~1DPartial§region1[v__0, v__13, 1] . 1)
[removeRefinedDecl] find route_Function~1D: matrix indexed by [int(3..n_planes)] of function int(4..n_flights) --> int(7..10)
[matrixToTuple] route_Function~1D_Function~1DPartial∑2
[removedDecl] find route_Function~1D_Function~1DPartial: matrix indexed by [int(3..n_planes), int(4..n_flights)] of (bool, int(7..10))
              Added the following:
              find route_Function~1D_Function~1DPartial_tuple1: matrix indexed by [int(3..n_planes), int(4..n_flights)] of bool
              find route_Function~1D_Function~1DPartial_tuple2: matrix indexed by [int(3..n_planes), int(4..n_flights)] of int(7..10)
[repr] 2