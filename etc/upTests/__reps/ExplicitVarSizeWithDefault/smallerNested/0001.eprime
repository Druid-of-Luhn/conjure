language ESSENCE' 1.0

find s_SetExplicit_SetExplicitVarSize_tuple1:
        matrix indexed by [int(1..2), int(1..4)] of bool
find s_SetExplicit_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(1..4)] of int(1..4)
such that
    exists v__0 : int(1..4)
        . (forAll v__1 : int(1..4)
               . v__1 < v__0
                 ->
                 s_SetExplicit_SetExplicitVarSize_tuple2[1, v__1]
                 =
                 s_SetExplicit_SetExplicitVarSize_tuple2[2, v__1])
          /\
          (s_SetExplicit_SetExplicitVarSize_tuple1[1, v__0]
           /\
           s_SetExplicit_SetExplicitVarSize_tuple1[2, v__0]
           /\
           s_SetExplicit_SetExplicitVarSize_tuple2[1, v__0]
           <
           s_SetExplicit_SetExplicitVarSize_tuple2[2, v__0]
           \/
           s_SetExplicit_SetExplicitVarSize_tuple1[1, v__0]
           >
           s_SetExplicit_SetExplicitVarSize_tuple1[2, v__0]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..3)
               . s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1]
                 /\
                 s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1 + 1]
                 ->
                 s_SetExplicit_SetExplicitVarSize_tuple2[v__0, v__1]
                 <
                 s_SetExplicit_SetExplicitVarSize_tuple2[v__0, v__1 + 1])
          /\
          (forAll v__1 : int(1..3)
               . s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1]
                 >=
                 s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1 + 1]),
    forAll v__0 : int(1..2)
        . (sum v__1 : int(1..4) . s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1])
          >=
          3,
    forAll v__0 : int(1..2)
        . (exists v__1 : int(1..4)
               . s_SetExplicit_SetExplicitVarSize_tuple1[v__0, v__1]
                 /\
                 s_SetExplicit_SetExplicitVarSize_tuple2[v__0, v__1] = 2)
