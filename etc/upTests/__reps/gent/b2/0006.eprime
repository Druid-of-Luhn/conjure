language ESSENCE' 1.0

find x_SetGent: matrix indexed by [int(0..9)] of int(0..2)
find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find x_SetExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(0..9)
such that
    x_SetExplicitVarSize_tuple1[2]
    ->
    x_SetExplicitVarSize_tuple2[1] < x_SetExplicitVarSize_tuple2[2],
    x_SetExplicitVarSize_tuple1[2] -> x_SetExplicitVarSize_tuple1[1],
    8
    <
    {aux__0 @ find aux__0: int(0..9)
              such that
                  forAll v__0 : int(1..2)
                      . x_SetExplicitVarSize_tuple1[v__0]
                        ->
                        x_SetExplicitVarSize_tuple2[v__0] <= aux__0,
                  exists v__0 : int(1..2)
                      . x_SetExplicitVarSize_tuple1[v__0]
                        /\
                        x_SetExplicitVarSize_tuple2[v__0] = aux__0},
    x_SetGent[2] > 0,
    forAll v__0 : int(0..9)
        . x_SetGent[v__0] > 0
          ->
          (exists v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple1[v__1]
                 /\
                 x_SetExplicitVarSize_tuple2[v__1] = v__0),
    forAll v__0 : int(0..9)
        . x_SetGent[v__0] = 0
          \/
          x_SetGent[v__0]
          =
          1 + (sum v__1 : int(0..9) . (v__1 < v__0 /\ x_SetGent[v__1] > 0) * 1),
    forAll v__0 : int(1..2)
        . x_SetExplicitVarSize_tuple1[v__0]
          ->
          x_SetGent[x_SetExplicitVarSize_tuple2[v__0]] > 0,
    forAll v__0 : int(1..2)
        . !x_SetExplicitVarSize_tuple1[v__0] -> x_SetExplicitVarSize_tuple2[v__0] = 0
