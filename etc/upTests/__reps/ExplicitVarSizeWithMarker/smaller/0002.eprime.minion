MINION 3
# CSE_number = 12
# CSE_eliminated_expressions = 37
# CSE_total_size = 54
**VARIABLES**
DISCRETE s_SetExplicitVarSizeWithDefault_00000 #
{1..5}
DISCRETE s_SetExplicitVarSizeWithDefault_00001 #
{1..5}
DISCRETE s_SetExplicitVarSizeWithDefault_00002 #
{1..5}
BOOL aux0 #CSE: 7 occurrences of: (5 != s_SetExplicitVarSizeWithDefault_00001)
BOOL aux1 #CSE: 6 occurrences of: (5 != s_SetExplicitVarSizeWithDefault_00002)
BOOL aux2 #CSE: 6 occurrences of: (5 != s_SetExplicitVarSizeWithDefault_00000)
BOOL aux3 #CSE: 2 occurrences of: (3=s_SetExplicitVarSizeWithDefault_00002)
BOOL aux4 #CSE: 2 occurrences of: (3=s_SetExplicitVarSizeWithDefault_00001)
BOOL aux5 #CSE: 2 occurrences of: (3=s_SetExplicitVarSizeWithDefault_00000)
BOOL aux6 #CSE: 2 occurrences of: (4=s_SetExplicitVarSizeWithDefault_00000)
BOOL aux7 #CSE: 2 occurrences of: (4=s_SetExplicitVarSizeWithDefault_00001)
BOOL aux8 #CSE: 2 occurrences of: (4=s_SetExplicitVarSizeWithDefault_00002)
BOOL aux9 #CSE: 2 occurrences of: (2=s_SetExplicitVarSizeWithDefault_00000)
BOOL aux10 #CSE: 2 occurrences of: (2=s_SetExplicitVarSizeWithDefault_00001)
BOOL aux11 #CSE: 2 occurrences of: (2=s_SetExplicitVarSizeWithDefault_00002)
BOOL aux12 #(aux2 /\ aux0)
BOOL aux13 #(s_SetExplicitVarSizeWithDefault_00000<s_SetExplicitVarSizeWithDefault_00001)
BOOL aux14 #(aux0 /\ aux1)
BOOL aux15 #(s_SetExplicitVarSizeWithDefault_00001<s_SetExplicitVarSizeWithDefault_00002)
BOOL aux16 #(aux9 \/ aux5 \/ aux6)
BOOL aux17 #(aux10 \/ aux4 \/ aux7)
BOOL aux18 #(aux11 \/ aux3 \/ aux8)
**SEARCH**
PRINT[[s_SetExplicitVarSizeWithDefault_00000],[s_SetExplicitVarSizeWithDefault_00001],[s_SetExplicitVarSizeWithDefault_00002]]
VARORDER STATIC [s_SetExplicitVarSizeWithDefault_00000,s_SetExplicitVarSizeWithDefault_00001,s_SetExplicitVarSizeWithDefault_00002]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18]
**CONSTRAINTS**
reify(watched-and({w-literal(aux2,1),w-literal(aux0,1)}), aux12)
reify(ineq(s_SetExplicitVarSizeWithDefault_00000, s_SetExplicitVarSizeWithDefault_00001, -1), aux13)
reify(watched-and({w-literal(aux0,1),w-literal(aux1,1)}), aux14)
reify(ineq(s_SetExplicitVarSizeWithDefault_00001, s_SetExplicitVarSizeWithDefault_00002, -1), aux15)
reify(watched-or({w-literal(aux9,1),w-literal(aux5,1),w-literal(aux6,1)}), aux16)
reify(watched-or({w-literal(aux10,1),w-literal(aux4,1),w-literal(aux7,1)}), aux17)
reify(watched-or({w-literal(aux11,1),w-literal(aux3,1),w-literal(aux8,1)}), aux18)
reify(diseq(5,s_SetExplicitVarSizeWithDefault_00001), aux0)
reify(diseq(5,s_SetExplicitVarSizeWithDefault_00002), aux1)
reify(diseq(5,s_SetExplicitVarSizeWithDefault_00000), aux2)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00002,3), aux3)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00001,3), aux4)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00000,3), aux5)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00000,4), aux6)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00001,4), aux7)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00002,4), aux8)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00000,2), aux9)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00001,2), aux10)
reify(w-literal(s_SetExplicitVarSizeWithDefault_00002,2), aux11)
sumgeq([aux2,aux0,aux1],1)
watched-or({watched-and({w-literal(aux9,1),w-literal(aux2,1)}),watched-and({w-literal(aux10,1),w-literal(aux0,1)}),watched-and({w-literal(aux11,1),w-literal(aux1,1)})})
watched-or({watched-and({w-literal(aux5,1),w-literal(aux2,1)}),watched-and({w-literal(aux4,1),w-literal(aux0,1)}),watched-and({w-literal(aux3,1),w-literal(aux1,1)})})
watched-or({watched-and({w-literal(aux6,1),w-literal(aux2,1)}),watched-and({w-literal(aux7,1),w-literal(aux0,1)}),watched-and({w-literal(aux8,1),w-literal(aux1,1)})})
ineq(aux12, aux13, 0)
ineq(aux14, aux15, 0)
ineq(s_SetExplicitVarSizeWithDefault_00000, s_SetExplicitVarSizeWithDefault_00001, 0)
ineq(s_SetExplicitVarSizeWithDefault_00001, s_SetExplicitVarSizeWithDefault_00002, 0)
ineq(aux2, aux16, 0)
ineq(aux0, aux17, 0)
ineq(aux1, aux18, 0)
**EOF**
