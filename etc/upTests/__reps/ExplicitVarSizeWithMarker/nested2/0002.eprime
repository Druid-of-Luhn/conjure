language ESSENCE' 1.0

find s_SetExplicitVarSize_tuple1: matrix indexed by [int(1..5)] of bool
find s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..5), int(1..3)] of int(1..6)
such that
    (sum v__0 : int(1..5) . s_SetExplicitVarSize_tuple1[v__0]) >= 1,
    forAll v__0 : int(1..4)
        . s_SetExplicitVarSize_tuple1[v__0] /\ s_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, ..]
          <lex
          s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0 + 1, ..],
    forAll v__0 : int(1..4)
        . s_SetExplicitVarSize_tuple1[v__0] >= s_SetExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..5)
        . (forAll v__1 : int(1..2)
               . s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1] != 6
                 /\
                 s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1 + 1] != 6
                 ->
                 s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <
                 s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1 + 1])
          /\
          (forAll v__1 : int(1..2)
               . s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <=
                 s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1 + 1]),
    forAll v__0 : int(1..5)
        . (sum v__1 : int(1..3)
               . s_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1] != 6)
          >=
          2
