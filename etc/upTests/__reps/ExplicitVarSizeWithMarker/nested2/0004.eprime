language ESSENCE' 1.0

find s_SetExplicitVarSize_tuple1: matrix indexed by [int(1..5)] of bool
find s_SetExplicitVarSize_tuple2_SetOccurrence:
        matrix indexed by [int(1..5), int(1..5)] of bool
such that
    (sum v__0 : int(1..5) . s_SetExplicitVarSize_tuple1[v__0]) >= 1,
    forAll v__0 : int(1..4)
        . s_SetExplicitVarSize_tuple1[v__0] /\ s_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          flatten(s_SetExplicitVarSize_tuple2_SetOccurrence[v__0 + 1, ..])
          <lex
          flatten(s_SetExplicitVarSize_tuple2_SetOccurrence[v__0, ..]),
    forAll v__0 : int(1..4)
        . s_SetExplicitVarSize_tuple1[v__0] >= s_SetExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..5)
        . (sum v__1 : int(1..5) . s_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1])
          >=
          2
          /\
          (sum v__1 : int(1..5) . s_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1])
          <=
          3
