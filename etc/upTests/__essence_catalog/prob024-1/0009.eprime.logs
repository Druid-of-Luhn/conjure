[useChannelling] True
[representation] find seq:
                         function (total, surjective) int(1..n * k) --> int(1..n)
                 (#2)
                 AsReln, Matrix1D
[configuration] seq§region1#Matrix1D
[addedDecl] find seq_Matrix1D: matrix indexed by [int(1..n * k)] of int(1..n)
[refn] 0
[applied] i in range(f)
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__5 in range(f) . v__5 = i)
[applied] (exists v__5 in range(f) . v__5 = i)
          {rules/refns/horizontal/function-range-quantified.rule}
              (exists v__6 in toSet(f) . v__6[2] = i)
[applied] i in preImage(seq§region1#Matrix1D, m)
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__7 in preImage(seq§region1#Matrix1D, m) . v__7 = i)
[applied] (exists v__7 in preImage(seq§region1#Matrix1D, m) . v__7 = i)
          {rules/refns/horizontal/function-preImage-quantified.rule}
              (exists v__8 : int(1..n * k) , seq§region1#Matrix1D(v__8) = m . v__8 = i)
[applied] seq§region1#Matrix1D(v__8)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              seq_Matrix1D§region1[v__8]
[representation] function (total, injective) int(1..k) --> int(1..n * k)
                 (#2)
                 AsReln, Matrix1D
[applied] (exists f : function (total, injective) int(1..k) --> int(1..n * k)
               . (forAll i : int(1..n * k)
                      . (exists v__6 in toSet(f) . v__6[2] = i)
                        <->
                        (exists v__8 : int(1..n * k) , seq_Matrix1D§region1[v__8] = m . v__8 = i))
                 /\
                 (forAll j : int(1..k - 1) . f(j + 1) - f(j) = m + 1))
          {builtIn.abstractDomsInQuans}
              (exists f_AsReln : relation of (int(1..k) * int(1..n * k))
                   , (forAll v__9 : int(1..k)
                          . (sum v__10 in toSet(f_AsReln§regionS) . v__9 = v__10[1]) = 1)
                     /\
                     (forAll v__9 in toSet(f_AsReln§regionS)
                          . (forAll v__10 in toSet(f_AsReln§regionS) , v__9[1] != v__10[1]
                                 . v__9[2] != v__10[2]))
                   . (forAll i : int(1..n * k)
                          . (exists v__6 in toSet(f§regionS#AsReln) . v__6[2] = i)
                            <->
                            (exists v__8 : int(1..n * k) , seq_Matrix1D§region1[v__8] = m . v__8 = i))
                     /\
                     (forAll j : int(1..k - 1)
                          . f§regionS#AsReln(j + 1) - f§regionS#AsReln(j) = m + 1))
          {builtIn.abstractDomsInQuans}
              (exists f_Matrix1D : matrix indexed by [int(1..k)] of int(1..n * k)
                   , allDiff(f_Matrix1D§regionS)
                   . (forAll i : int(1..n * k)
                          . (exists v__6 in toSet(f§regionS#Matrix1D) . v__6[2] = i)
                            <->
                            (exists v__8 : int(1..n * k) , seq_Matrix1D§region1[v__8] = m . v__8 = i))
                     /\
                     (forAll j : int(1..k - 1)
                          . f§regionS#Matrix1D(j + 1) - f§regionS#Matrix1D(j) = m + 1))
[applied] (exists v__6 in toSet(f§regionS#Matrix1D) . v__6[2] = i)
          {rules/refns/vertical/function-matrix1d/function-toSet-quantified.rule}
              (exists v__11 : int(1..k) . f_Matrix1D§regionS[v__11] = i)
[applied] f§regionS#Matrix1D(j + 1)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              f_Matrix1D§regionS[j + 1]
[applied] f§regionS#Matrix1D(j)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              f_Matrix1D§regionS[j]
[removeRefinedDecl] find seq:
                            function (total, surjective) int(1..n * k) --> int(1..n)
[repr] 1