[useChannelling] True
[representation] find seq:
                         function (total, surjective) int(1..n * k) --> int(1..n)
                 (#2)
                 AsReln, Matrix1D
[configuration] seq§region1#AsReln
[addedDecl] find seq_AsReln: relation of (int(1..n * k) * int(1..n))
[refn] 0
[applied] i in range(f)
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__5 in range(f) . v__5 = i)
[applied] (exists v__5 in range(f) . v__5 = i)
          {rules/refns/horizontal/function-range-quantified.rule}
              (exists v__6 in toSet(f) . v__6[2] = i)
[applied] i in preImage(seq§region1#AsReln, m)
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__7 in preImage(seq§region1#AsReln, m) . v__7 = i)
[applied] (exists v__7 in preImage(seq§region1#AsReln, m) . v__7 = i)
          {rules/refns/horizontal/function-preImage-quantified.rule}
              (exists v__8 : int(1..n * k) , seq§region1#AsReln(v__8) = m . v__8 = i)
[applied] seq§region1#AsReln(v__8)
          {rules/refns/vertical/function-asreln/function-asreln-image-int.rule}
              (sum v__9 in toSet(seq_AsReln§region1) , v__9[1] = v__8 . v__9[2])
[representation] function (total, injective) int(1..k) --> int(1..n * k)
                 (#2)
                 AsReln, Matrix1D
[applied] (exists f : function (total, injective) int(1..k) --> int(1..n * k)
               . (forAll i : int(1..n * k)
                      . (exists v__6 in toSet(f) . v__6[2] = i)
                        <->
                        (exists v__8 : int(1..n * k)
                             , (sum v__9 in toSet(seq_AsReln§region1) , v__9[1] = v__8 . v__9[2]) = m
                             . v__8 = i))
                 /\
                 (forAll j : int(1..k - 1) . f(j + 1) - f(j) = m + 1))
          {builtIn.abstractDomsInQuans}
              (exists f_AsReln : relation of (int(1..k) * int(1..n * k))
                   , (forAll v__10 : int(1..k)
                          . (sum v__11 in toSet(f_AsReln§regionS) . v__10 = v__11[1]) = 1)
                     /\
                     (forAll v__10 in toSet(f_AsReln§regionS)
                          . (forAll v__11 in toSet(f_AsReln§regionS) , v__10[1] != v__11[1]
                                 . v__10[2] != v__11[2]))
                   . (forAll i : int(1..n * k)
                          . (exists v__6 in toSet(f§regionS#AsReln) . v__6[2] = i)
                            <->
                            (exists v__8 : int(1..n * k)
                                 , (sum v__9 in toSet(seq_AsReln§region1) , v__9[1] = v__8 . v__9[2]) = m
                                 . v__8 = i))
                     /\
                     (forAll j : int(1..k - 1)
                          . f§regionS#AsReln(j + 1) - f§regionS#AsReln(j) = m + 1))
          {builtIn.abstractDomsInQuans}
              (exists f_Matrix1D : matrix indexed by [int(1..k)] of int(1..n * k)
                   , allDiff(f_Matrix1D§regionS)
                   . (forAll i : int(1..n * k)
                          . (exists v__6 in toSet(f§regionS#Matrix1D) . v__6[2] = i)
                            <->
                            (exists v__8 : int(1..n * k)
                                 , (sum v__9 in toSet(seq_AsReln§region1) , v__9[1] = v__8 . v__9[2]) = m
                                 . v__8 = i))
                     /\
                     (forAll j : int(1..k - 1)
                          . f§regionS#Matrix1D(j + 1) - f§regionS#Matrix1D(j) = m + 1))
[applied] (exists v__6 in toSet(f§regionS#Matrix1D) . v__6[2] = i)
          {rules/refns/vertical/function-matrix1d/function-toSet-quantified.rule}
              (exists v__12 : int(1..k) . f_Matrix1D§regionS[v__12] = i)
[applied] f§regionS#Matrix1D(j + 1)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              f_Matrix1D§regionS[j + 1]
[applied] f§regionS#Matrix1D(j)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              f_Matrix1D§regionS[j]
[removeRefinedDecl] find seq:
                            function (total, surjective) int(1..n * k) --> int(1..n)
[repr] 1
[representation] find seq_AsReln: relation of (int(1..n * k) * int(1..n))
                 (#2)
                 RelationIntMatrix2, RelationAsSet
[configuration] seq_AsReln§region1#RelationAsSet
[addedDecl] find seq_AsReln_RelationAsSet: set of (int(1..n * k), int(1..n))
[refn] 1
[applied] (sum v__4 in toSet(seq_AsReln§region1#RelationAsSet) , v__4[1] = v__3
               . v__4[2])
          {rules/refns/vertical/relation-RelationAsSet/relation-RelationAsSet-toSet.rule}
              (sum v__4 in seq_AsReln_RelationAsSet§region1 , v__4[1] = v__3 . v__4[2])
[removeRefinedDecl] find seq_AsReln: relation of (int(1..n * k) * int(1..n))
[repr] 2
[representation] find seq_AsReln_RelationAsSet:
                         set of (int(1..n * k), int(1..n))
                 (#1)
                 Set~ExplicitVarSize
[configuration] seq_AsReln_RelationAsSet§region1#Set~ExplicitVarSize
[addedDecl] find seq_AsReln_RelationAsSet_Set~ExplicitVarSize:
                    matrix indexed by [int(1..n * k * n)] of (bool, (int(1..n * k), int(1..n)))
[refn] 2
[applied] (sum v__4 in seq_AsReln_RelationAsSet§region1#Set~ExplicitVarSize
               , v__4[1] = v__3
               . v__4[2])
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (sum v__14 : int(1..n * k * n)
                   , seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__14, 2, 1] = v__3
                     /\
                     seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__14, 1]
                   . seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__14, 2, 2])
[applied] seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13, 2, 1]
          .<
          seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13 + 1, 2, 1]
          {rules/refns/horizontal/DotLt-ints.rule}
              seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13, 2, 1]
              <
              seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13 + 1, 2, 1]
[applied] seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13, 2, 2]
          .<
          seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13 + 1, 2, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13, 2, 2]
              <
              seq_AsReln_RelationAsSet_Set~ExplicitVarSize§region1[v__13 + 1, 2, 2]
[removeRefinedDecl] find seq_AsReln_RelationAsSet:
                            set of (int(1..n * k), int(1..n))
[removedDecl] find seq_AsReln_RelationAsSet_Set~ExplicitVarSize:
                      matrix indexed by [int(1..n * k * n)] of (bool, (int(1..n * k), int(1..n)))
[matrixToTuple] seq_AsReln_RelationAsSet_Set~ExplicitVarSize∑1
[removedDecl] find seq_AsReln_RelationAsSet_Set~ExplicitVarSize_tuple2:
                      matrix indexed by [int(1..n * k * n)] of (int(1..n * k), int(1..n))
[matrixToTuple] seq_AsReln_RelationAsSet_Set~ExplicitVarSize_tuple2∑1
[repr] 3