MINION 3
# CSE_number = 0
# CSE_eliminated_expressions = 0
# CSE_total_size = 0
**VARIABLES**
BOOL se_SetExplicitVarSize_tuple1_00000 #
BOOL se_SetExplicitVarSize_tuple1_00001 #
DISCRETE se_SetExplicitVarSize_tuple2_00000 #
{1..2}
DISCRETE se_SetExplicitVarSize_tuple2_00001 #
{1..2}
BOOL aux0 #(se_SetExplicitVarSize_tuple1_00000 /\ se_SetExplicitVarSize_tuple1_00001)
BOOL aux1 #(se_SetExplicitVarSize_tuple2_00000<se_SetExplicitVarSize_tuple2_00001)
**SEARCH**
PRINT[[se_SetExplicitVarSize_tuple1_00000],[se_SetExplicitVarSize_tuple1_00001],[se_SetExplicitVarSize_tuple2_00000],[se_SetExplicitVarSize_tuple2_00001]]
VARORDER STATIC [se_SetExplicitVarSize_tuple1_00000,se_SetExplicitVarSize_tuple1_00001,se_SetExplicitVarSize_tuple2_00000,se_SetExplicitVarSize_tuple2_00001]
VARORDER AUX [aux0,aux1]
**CONSTRAINTS**
reify(watched-and({w-literal(se_SetExplicitVarSize_tuple1_00000,1),w-literal(se_SetExplicitVarSize_tuple1_00001,1)}), aux0)
reify(ineq(se_SetExplicitVarSize_tuple2_00000, se_SetExplicitVarSize_tuple2_00001, -1), aux1)
ineq(aux0, aux1, 0)
ineq(se_SetExplicitVarSize_tuple1_00001, se_SetExplicitVarSize_tuple1_00000, 0)
sumgeq([se_SetExplicitVarSize_tuple1_00000,se_SetExplicitVarSize_tuple1_00001],1)
**EOF**
