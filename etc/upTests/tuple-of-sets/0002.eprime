language ESSENCE' 1.0

find a_tuple1: int(0..9)
find b_tuple1: int(0..9)
find b_tuple2: int(3..8)
find b_tuple3_SetExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find b_tuple3_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(3..4)
find c_tuple1: int(0..9)
find c_tuple2_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..2)] of int(3..5)
find c_tuple3_tuple1_SetExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find c_tuple3_tuple1_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(3..4)
find c_tuple3_tuple2_tuple1: int(3..4)
find c_tuple3_tuple2_tuple2: bool
such that
    c_tuple2_SetExplicitVarSizeWithDefault[1] != 5
    /\
    c_tuple2_SetExplicitVarSizeWithDefault[2] != 5
    ->
    c_tuple2_SetExplicitVarSizeWithDefault[1]
    <
    c_tuple2_SetExplicitVarSizeWithDefault[2],
    b_tuple3_SetExplicitVarSize_tuple1[1] /\ b_tuple3_SetExplicitVarSize_tuple1[2]
    ->
    b_tuple3_SetExplicitVarSize_tuple2[1] < b_tuple3_SetExplicitVarSize_tuple2[2],
    c_tuple3_tuple1_SetExplicitVarSize_tuple1[1]
    /\
    c_tuple3_tuple1_SetExplicitVarSize_tuple1[2]
    ->
    c_tuple3_tuple1_SetExplicitVarSize_tuple2[1]
    <
    c_tuple3_tuple1_SetExplicitVarSize_tuple2[2],
    b_tuple1 < 2,
    c_tuple2_SetExplicitVarSizeWithDefault[1]
    <=
    c_tuple2_SetExplicitVarSizeWithDefault[2],
    c_tuple1 = a_tuple1,
    c_tuple3_tuple2_tuple1 = 3,
    c_tuple3_tuple2_tuple2 = true,
    b_tuple2 > b_tuple1,
    b_tuple3_SetExplicitVarSize_tuple1[1] >= b_tuple3_SetExplicitVarSize_tuple1[2],
    c_tuple3_tuple1_SetExplicitVarSize_tuple1[1]
    >=
    c_tuple3_tuple1_SetExplicitVarSize_tuple1[2],
    exists v__0 : int(1..2)
        . c_tuple3_tuple1_SetExplicitVarSize_tuple1[v__0]
          /\
          c_tuple3_tuple1_SetExplicitVarSize_tuple2[v__0] = 3,
    exists v__0 : int(1..2)
        . c_tuple3_tuple1_SetExplicitVarSize_tuple1[v__0]
          /\
          c_tuple3_tuple1_SetExplicitVarSize_tuple2[v__0] = 4,
    forAll v__0 : int(1..2)
        . c_tuple3_tuple1_SetExplicitVarSize_tuple1[v__0]
          ->
          3 = c_tuple3_tuple1_SetExplicitVarSize_tuple2[v__0]
          \/
          4 = c_tuple3_tuple1_SetExplicitVarSize_tuple2[v__0],
    forAll v__0 : int(3..4)
        . (exists v__1 : int(1..2)
               . c_tuple2_SetExplicitVarSizeWithDefault[v__1] != 5
                 /\
                 c_tuple2_SetExplicitVarSizeWithDefault[v__1] = v__0)
          <->
          (exists v__1 : int(1..2)
               . b_tuple3_SetExplicitVarSize_tuple1[v__1]
                 /\
                 b_tuple3_SetExplicitVarSize_tuple2[v__1] = v__0)
