[handleGivenIntDom] given DOM1 new domain int
                    ~~>
                    given DOM1_size: int(1..)
[handleGivenIntDom] given DOM2 new domain int
                    ~~>
                    given DOM2_size: int(1..)
[handleGivenIntDom] given DOM3 new domain int
                    ~~>
                    given DOM3_size: int(1..)
[handleGivenIntDom] given DOM4 new domain int
                    ~~>
                    given DOM4_size: int(1..)
[handleInfDom] given DOM1_size: int(1..)
               ~~>
               given DOM1_size: int(1..MAXINT)
[handleInfDom] given DOM2_size: int(1..)
               ~~>
               given DOM2_size: int(1..MAXINT)
[handleInfDom] given DOM3_size: int(1..)
               ~~>
               given DOM3_size: int(1..MAXINT)
[handleInfDom] given DOM4_size: int(1..)
               ~~>
               given DOM4_size: int(1..MAXINT)
[builtIn.tupleDomInQuantification] (sum v__2 : (DOM2, (DOM3, DOM4))
                                        , v__2[1] = v__2[2, 1]
                                        . v__2[2, 2])
                                   ~~>
                                   (sum v__3 : DOM2
                                        . (sum v__4 : (DOM3, DOM4) , (v__3, v__4)[1] = (v__3, v__4)[2, 1]
                                               . (v__3, v__4)[2, 2]))
[applied] (sum v__2 : (DOM2, (DOM3, DOM4)) , v__2[1] = v__2[2, 1] . v__2[2, 2])
          {builtIn.tupleDomInQuantification}
              (sum v__3 : DOM2 . (sum v__4 : (DOM3, DOM4) , v__3 = v__4[1] . v__4[2]))
[builtIn.tupleDomInQuantification] (sum v__4 : (DOM3, DOM4) , v__3 = v__4[1]
                                        . v__4[2])
                                   ~~>
                                   (sum v__5 : DOM3 . (sum v__6 : DOM4 , v__3 = (v__5, v__6)[1] . (v__5, v__6)[2]))
[applied] (sum v__4 : (DOM3, DOM4) , v__3 = v__4[1] . v__4[2])
          {builtIn.tupleDomInQuantification}
              (sum v__5 : DOM3 . (sum v__6 : DOM4 , v__3 = v__5 . v__6))