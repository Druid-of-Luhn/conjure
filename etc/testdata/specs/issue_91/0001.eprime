language ESSENCE' 1.0

find x_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2), int(1, 2), int(1..3)] of bool
find x_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(1, 2), int(1..3)] of int(6..8)
such that
    forAll v__3 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, 1, v__3]
          ->
          6 = x_ExplicitVarSize_tuple2[1, 1, v__3],
    exists v__8 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, 1, v__8]
          /\
          x_ExplicitVarSize_tuple2[1, 1, v__8] = 6,
    forAll v__11 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, 2, v__11]
          ->
          7 = x_ExplicitVarSize_tuple2[1, 2, v__11],
    exists v__14 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, 2, v__14]
          /\
          x_ExplicitVarSize_tuple2[1, 2, v__14] = 7,
    forAll v__17 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, 1, v__17]
          ->
          7 = x_ExplicitVarSize_tuple2[2, 1, v__17]
          \/
          8 = x_ExplicitVarSize_tuple2[2, 1, v__17],
    exists v__20 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, 1, v__20]
          /\
          x_ExplicitVarSize_tuple2[2, 1, v__20] = 7,
    exists v__22 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, 1, v__22]
          /\
          x_ExplicitVarSize_tuple2[2, 1, v__22] = 8,
    forAll v__25 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, 2, v__25]
          ->
          8 = x_ExplicitVarSize_tuple2[2, 2, v__25],
    exists v__28 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, 2, v__28]
          /\
          x_ExplicitVarSize_tuple2[2, 2, v__28] = 8,
    forAll v__4 : int(1..3)
        . (forAll v__5 : int(1..3)
               . v__4 < v__5 /\ x_ExplicitVarSize_tuple1[1, 1, v__4]
                 /\
                 x_ExplicitVarSize_tuple1[1, 1, v__5]
                 ->
                 x_ExplicitVarSize_tuple2[1, 1, v__4] < x_ExplicitVarSize_tuple2[1, 1, v__5]),
    forAll v__4 : int(1..2)
        . x_ExplicitVarSize_tuple1[1, 1, v__4]
          <=
          x_ExplicitVarSize_tuple1[1, 1, v__4 + 1],
    forAll v__4 : int(1..3)
        . (forAll v__5 : int(1..3)
               . v__4 < v__5 /\ x_ExplicitVarSize_tuple1[1, 2, v__4]
                 /\
                 x_ExplicitVarSize_tuple1[1, 2, v__5]
                 ->
                 x_ExplicitVarSize_tuple2[1, 2, v__4] < x_ExplicitVarSize_tuple2[1, 2, v__5]),
    forAll v__4 : int(1..2)
        . x_ExplicitVarSize_tuple1[1, 2, v__4]
          <=
          x_ExplicitVarSize_tuple1[1, 2, v__4 + 1],
    forAll v__4 : int(1..3)
        . (forAll v__5 : int(1..3)
               . v__4 < v__5 /\ x_ExplicitVarSize_tuple1[2, 1, v__4]
                 /\
                 x_ExplicitVarSize_tuple1[2, 1, v__5]
                 ->
                 x_ExplicitVarSize_tuple2[2, 1, v__4] < x_ExplicitVarSize_tuple2[2, 1, v__5]),
    forAll v__4 : int(1..2)
        . x_ExplicitVarSize_tuple1[2, 1, v__4]
          <=
          x_ExplicitVarSize_tuple1[2, 1, v__4 + 1],
    forAll v__4 : int(1..3)
        . (forAll v__5 : int(1..3)
               . v__4 < v__5 /\ x_ExplicitVarSize_tuple1[2, 2, v__4]
                 /\
                 x_ExplicitVarSize_tuple1[2, 2, v__5]
                 ->
                 x_ExplicitVarSize_tuple2[2, 2, v__4] < x_ExplicitVarSize_tuple2[2, 2, v__5]),
    forAll v__4 : int(1..2)
        . x_ExplicitVarSize_tuple1[2, 2, v__4]
          <=
          x_ExplicitVarSize_tuple1[2, 2, v__4 + 1],
    x_ExplicitVarSize_tuple1[1, 1, 1]
    +
    (x_ExplicitVarSize_tuple1[1, 1, 2] + x_ExplicitVarSize_tuple1[1, 1, 3])
    >=
    1,
    x_ExplicitVarSize_tuple1[1, 2, 1]
    +
    (x_ExplicitVarSize_tuple1[1, 2, 2] + x_ExplicitVarSize_tuple1[1, 2, 3])
    >=
    1,
    x_ExplicitVarSize_tuple1[2, 1, 1]
    +
    (x_ExplicitVarSize_tuple1[2, 1, 2] + x_ExplicitVarSize_tuple1[2, 1, 3])
    >=
    1,
    x_ExplicitVarSize_tuple1[2, 2, 1]
    +
    (x_ExplicitVarSize_tuple1[2, 2, 2] + x_ExplicitVarSize_tuple1[2, 2, 3])
    >=
    1
