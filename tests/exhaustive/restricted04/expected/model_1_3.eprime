language ESSENCE' 1.0

find x_FunctionNDPartial_Flags: matrix indexed by [int(1..2), int(1..2)] of bool
find x_FunctionNDPartial_Values:
        matrix indexed by [int(1..2), int(1..2)] of int(1..3)
find aux1_ExplicitVarSizeWithMarker_Marker: int(0..2)
find aux1_ExplicitVarSizeWithMarker_Values_1:
        matrix indexed by [int(1..2)] of int(1)
find aux1_ExplicitVarSizeWithMarker_Values_2:
        matrix indexed by [int(1..2)] of int(1..2)
find aux2_ExplicitVarSizeWithFlags_Flags:
        matrix indexed by [int(1..2), int(1..3)] of bool
find aux2_ExplicitVarSizeWithFlags_Values:
        matrix indexed by [int(1..2), int(1..3)] of int(1..3)
such that
    2 <= aux1_ExplicitVarSizeWithMarker_Marker ->
    aux1_ExplicitVarSizeWithMarker_Values_1[1] <
    aux1_ExplicitVarSizeWithMarker_Values_1[2]
    \/
    aux1_ExplicitVarSizeWithMarker_Values_1[1] =
    aux1_ExplicitVarSizeWithMarker_Values_1[2]
    /\
    aux1_ExplicitVarSizeWithMarker_Values_2[1] <
    aux1_ExplicitVarSizeWithMarker_Values_2[2],
    and([q10 > aux1_ExplicitVarSizeWithMarker_Marker ->
         aux1_ExplicitVarSizeWithMarker_Values_1[q10] = 1 /\
         aux1_ExplicitVarSizeWithMarker_Values_2[q10] = 1
             | q10 : int(1..2)]),
    and([x_FunctionNDPartial_Flags[q30_1, q30_2] ->
         or([q32 <= aux1_ExplicitVarSizeWithMarker_Marker /\
             (aux1_ExplicitVarSizeWithMarker_Values_1[q32] = q30_1 /\
              aux1_ExplicitVarSizeWithMarker_Values_2[q32] = q30_2)
                 | q32 : int(1..2)])
             | q30_1 : int(1..2), q30_2 : int(1..2),
               or([1 = q30_1 /\ q29_2 = q30_2 | q29_2 : int(1..2)])]),
    and([q13 <= aux1_ExplicitVarSizeWithMarker_Marker ->
         or([x_FunctionNDPartial_Flags[q34_1, q34_2] /\
             (q34_1 = aux1_ExplicitVarSizeWithMarker_Values_1[q13] /\
              q34_2 = aux1_ExplicitVarSizeWithMarker_Values_2[q13])
                 | q34_1 : int(1..2), q34_2 : int(1..2),
                   or([1 = q34_1 /\ q33_2 = q34_2 | q33_2 : int(1..2)])])
             | q13 : int(1..2)]),
    and([and([aux2_ExplicitVarSizeWithFlags_Flags[q12, q18 + 1] ->
              aux2_ExplicitVarSizeWithFlags_Values[q12, q18] <
              aux2_ExplicitVarSizeWithFlags_Values[q12, q18 + 1]
                  | q18 : int(1..2)])
             | q12 : int(1..2)]),
    and([and([aux2_ExplicitVarSizeWithFlags_Flags[q12, q19] = false ->
              aux2_ExplicitVarSizeWithFlags_Values[q12, q19] = 1
                  | q19 : int(1..3)])
             | q12 : int(1..2)]),
    and([and([aux2_ExplicitVarSizeWithFlags_Flags[q12, q20 + 1] ->
              aux2_ExplicitVarSizeWithFlags_Flags[q12, q20]
                  | q20 : int(1..2)])
             | q12 : int(1..2)]),
    and([and([x_FunctionNDPartial_Flags[q24_1, q24_2] ->
              or([aux2_ExplicitVarSizeWithFlags_Flags[q12, q28] /\
                  aux2_ExplicitVarSizeWithFlags_Values[q12, q28] =
                  x_FunctionNDPartial_Values[q24_1, q24_2]
                      | q28 : int(1..3)])
                  | q24_1 : int(1..2), q24_2 : int(1..2)])
             | q12 : int(1..2)]),
    and([and([aux2_ExplicitVarSizeWithFlags_Flags[q12, q25] ->
              or([x_FunctionNDPartial_Flags[q26_1, q26_2] /\
                  x_FunctionNDPartial_Values[q26_1, q26_2] =
                  aux2_ExplicitVarSizeWithFlags_Values[q12, q25]
                      | q26_1 : int(1..2), q26_2 : int(1..2)])
                  | q25 : int(1..3)])
             | q12 : int(1..2)]),
    and([q12 <= aux1_ExplicitVarSizeWithMarker_Marker ->
         or([aux2_ExplicitVarSizeWithFlags_Flags[q12, q23] /\
             aux2_ExplicitVarSizeWithFlags_Values[q12, q23] =
             aux1_ExplicitVarSizeWithMarker_Values_2[q12]
                 | q23 : int(1..3)])
             | q12 : int(1..2)]),
    and([x_FunctionNDPartial_Flags[q1_1, q1_2] /\
         x_FunctionNDPartial_Flags[q2_1, q2_2]
         ->
         x_FunctionNDPartial_Values[q1_1, q1_2] != x_FunctionNDPartial_Values[q2_1, q2_2]
             | q1_1 : int(1..2), q1_2 : int(1..2), q2_1 : int(1..2), q2_2 : int(1..2),
               !(q1_1 = q2_1 /\ q1_2 = q2_2)]),
    and([x_FunctionNDPartial_Flags[q3_1, q3_2] = false ->
         x_FunctionNDPartial_Values[q3_1, q3_2] = 1
             | q3_1 : int(1..2), q3_2 : int(1..2)])

