language ESSENCE' 1.0

letting n be 3
find s_ExplicitWithRepetition_Flag: int(0..12)
find s_ExplicitWithRepetition_Values: matrix indexed by [int(1..12)] of int(1..3)
such that
    and([[sum([toInt(q7 <= s_ExplicitWithRepetition_Flag) * toInt(s_ExplicitWithRepetition_Values[q7] = q3)
                   | q7 : int(1..12)])
              | q2 : int(1..3), q3 : int(1..3), q2 = q1 -> q3 = q1 + 1, q2 = q1 + 1 -> q3 = q1,
                q2 != q1 /\ q2 != q1 + 1 -> q3 = q2]
         <=lex
         [sum([toInt(q9 <= s_ExplicitWithRepetition_Flag) * toInt(s_ExplicitWithRepetition_Values[q9] = q2)
                   | q9 : int(1..12)])
              | q2 : int(1..3)]
             | q1 : int(1..2)]),
    and([q1 + 1 <= s_ExplicitWithRepetition_Flag ->
         s_ExplicitWithRepetition_Values[q1] <= s_ExplicitWithRepetition_Values[q1 + 1]
             | q1 : int(1..11)]),
    and([q2 > s_ExplicitWithRepetition_Flag -> s_ExplicitWithRepetition_Values[q2] = 1 | q2 : int(1..12)]),
    and([q4 <= s_ExplicitWithRepetition_Flag ->
         sum([toInt(q11 <= s_ExplicitWithRepetition_Flag) *
              toInt(s_ExplicitWithRepetition_Values[q11] = s_ExplicitWithRepetition_Values[q4])
                  | q11 : int(1..12)])
         <= 2
             | q4 : int(1..12)])

