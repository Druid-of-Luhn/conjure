language ESSENCE' 1.0

given n: int
find s_Function1DPartial_Flags: matrix indexed by [int(1..n)] of bool
find s_Function1DPartial_Values: matrix indexed by [int(1..n)] of int(1..3)
such that
    and([[or([s_Function1DPartial_Flags[q8] /\
              (q8 = [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)] /\
               s_Function1DPartial_Values[q8] = q3)
                  | q8 : int(1..n)])
              | q2 : int(1..n), q3 : int(1..3)]
         <=lex
         [or([s_Function1DPartial_Flags[q11] /\ (q11 = q2 /\ s_Function1DPartial_Values[q11] = q3) | q11 : int(1..n)])
              | q2 : int(1..n), q3 : int(1..3)]
             | q1 : int(1..n - 1)]),
    and([s_Function1DPartial_Flags[q1] /\ s_Function1DPartial_Flags[q2] ->
         s_Function1DPartial_Values[q1] != s_Function1DPartial_Values[q2]
             | q1 : int(1..n), q2 : int(1..n), q1 < q2]),
    and([s_Function1DPartial_Flags[q3] = false -> s_Function1DPartial_Values[q3] = 1 | q3 : int(1..n)])

