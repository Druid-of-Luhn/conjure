language ESSENCE' 1.0

letting n be 3
find s_Function1DPartial_Flags: matrix indexed by [int(1..3)] of bool
find s_Function1DPartial_Values: matrix indexed by [int(1..3)] of int(1..2)
such that
    and([[s_Function1DPartial_Values[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]] = q3 /\
          s_Function1DPartial_Flags[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]]
              | q2 : int(1..3), q3 : int(1..2)]
         <=lex [s_Function1DPartial_Values[q2] = q3 /\ s_Function1DPartial_Flags[q2] | q2 : int(1..3), q3 : int(1..2)]
             | q1 : int(1..2)]),
    and([s_Function1DPartial_Flags[q4] /\ s_Function1DPartial_Flags[q5] ->
         s_Function1DPartial_Values[q4] != s_Function1DPartial_Values[q5]
             | q4 : int(1..3), q5 : int(1..3), q4 < q5]),
    and([s_Function1DPartial_Flags[q6] = false -> s_Function1DPartial_Values[q6] = 1 | q6 : int(1..3)])

