language ESSENCE' 1.0

letting n be 3
find s_Occurrence: matrix indexed by [int(1..3)] of bool
find s_Explicit: matrix indexed by [int(1..2)] of int(1..3)
such that
    and([[s_Occurrence[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]] | q2 : int(1..3)] <=lex
         [s_Occurrence[q2] | q2 : int(1..3)]
             | q1 : int(1..2)]),
    2 = sum([toInt(s_Occurrence[q1]) | q1 : int(1..3)]),
    s_Explicit[1] < s_Explicit[2],
    and([s_Occurrence[s_Explicit[q8]] | q8 : int(1..2)]),
    and([s_Occurrence[q9] -> or([s_Explicit[q11] = q9 | q11 : int(1..2)]) | q9 : int(1..3)])

