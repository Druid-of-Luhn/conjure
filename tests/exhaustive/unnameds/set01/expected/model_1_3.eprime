language ESSENCE' 1.0

letting n be 3
find s_Occurrence: matrix indexed by [int(1..3)] of bool
find s_ExplicitVarSizeWithMarker_Marker: int(0..3)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..3)] of int(1..3)
such that
    and([[s_Occurrence[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]] | q2 : int(1..3)] <=lex
         [s_Occurrence[q2] | q2 : int(1..3)]
             | q1 : int(1..2)]),
    and([q7 + 1 <= s_ExplicitVarSizeWithMarker_Marker ->
         s_ExplicitVarSizeWithMarker_Values[q7] < s_ExplicitVarSizeWithMarker_Values[q7 + 1]
             | q7 : int(1..2)]),
    and([q8 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q8] = 1 | q8 : int(1..3)]),
    and([q11 <= s_ExplicitVarSizeWithMarker_Marker -> s_Occurrence[s_ExplicitVarSizeWithMarker_Values[q11]]
             | q11 : int(1..3)]),
    and([s_Occurrence[q12] ->
         or([q14 <= s_ExplicitVarSizeWithMarker_Marker /\ s_ExplicitVarSizeWithMarker_Values[q14] = q12
                 | q14 : int(1..3)])
             | q12 : int(1..3)])

