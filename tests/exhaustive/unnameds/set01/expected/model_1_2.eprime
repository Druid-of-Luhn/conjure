language ESSENCE' 1.0

letting n be 3
find s_Occurrence: matrix indexed by [int(1..3)] of bool
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..3)] of int(1..4)
such that
    and([[s_Occurrence[q3]
              | q2 : int(1..3), q3 : int(1..3), q2 = q1 -> q3 = q1 + 1, q2 = q1 + 1 -> q3 = q1,
                q2 != q1 /\ q2 != q1 + 1 -> q3 = q2]
         <=lex [s_Occurrence[q2] | q2 : int(1..3)]
             | q1 : int(1..2)]),
    and([s_ExplicitVarSizeWithDummy[q2] < s_ExplicitVarSizeWithDummy[q2 + 1] \/ s_ExplicitVarSizeWithDummy[q2] = 4
             | q2 : int(1..2)]),
    and([s_ExplicitVarSizeWithDummy[q3] = 4 -> s_ExplicitVarSizeWithDummy[q3 + 1] = 4 | q3 : int(1..2)]),
    and([s_ExplicitVarSizeWithDummy[q7] != 4 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q7]] | q7 : int(1..3)]),
    and([s_Occurrence[q8] ->
         or([s_ExplicitVarSizeWithDummy[q10] != 4 /\ s_ExplicitVarSizeWithDummy[q10] = q8 | q10 : int(1..3)])
             | q8 : int(1..3)])

