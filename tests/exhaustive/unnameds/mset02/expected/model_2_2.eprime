language ESSENCE' 1.0

given n: int
find s_ExplicitWithRepetition_Flag: int(0..2 * (1 + (n - 1)) * 2)
find s_ExplicitWithRepetition_Values:
        matrix indexed by [int(1..2 * (1 + (n - 1)) * 2)] of int(1..n)
such that
    and([[sum([toInt(q9 <= s_ExplicitWithRepetition_Flag) *
               toInt(s_ExplicitWithRepetition_Values[q9] = q3)
                   | q9 : int(1..2 * (1 + (n - 1)) * 2)])
              | q2 : int(1..n), q3 : int(1..n), q2 = q1 -> q3 = q1 + 1,
                q2 = q1 + 1 -> q3 = q1, q2 != q1 /\ q2 != q1 + 1 -> q3 = q2]
         <=lex
         [sum([toInt(q11 <= s_ExplicitWithRepetition_Flag) *
               toInt(s_ExplicitWithRepetition_Values[q11] = q2)
                   | q11 : int(1..2 * (1 + (n - 1)) * 2)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([q1 + 1 <= s_ExplicitWithRepetition_Flag ->
         s_ExplicitWithRepetition_Values[q1] <= s_ExplicitWithRepetition_Values[q1 + 1]
             | q1 : int(1..2 * (1 + (n - 1)) * 2 - 1)]),
    and([q2 > s_ExplicitWithRepetition_Flag ->
         s_ExplicitWithRepetition_Values[q2] = 1
             | q2 : int(1..2 * (1 + (n - 1)) * 2)]),
    and([q4 <= s_ExplicitWithRepetition_Flag ->
         sum([toInt(q7 <= s_ExplicitWithRepetition_Flag) *
              toInt(s_ExplicitWithRepetition_Values[q7] = s_ExplicitWithRepetition_Values[q4])
                  | q7 : int(1..2 * (1 + (n - 1)) * 2)])
         <= 2
             | q4 : int(1..2 * (1 + (n - 1)) * 2)])

