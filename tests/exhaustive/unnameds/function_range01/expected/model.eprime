language ESSENCE' 1.0

letting n be 3
find s_Function1DPartial_Flags: matrix indexed by [int(1..3)] of bool
find s_Function1DPartial_Values: matrix indexed by [int(1..3)] of int(1..3)
such that
    and([[s_Function1DPartial_Values[q3] = [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)] /\
          s_Function1DPartial_Flags[q3]
              | q3 : int(1..3), q2 : int(1..3)]
         <=lex [s_Function1DPartial_Values[q3] = q2 /\ s_Function1DPartial_Flags[q3] | q3 : int(1..3), q2 : int(1..3)]
             | q1 : int(1..2)]),
    and([s_Function1DPartial_Flags[q1] /\ s_Function1DPartial_Flags[q2] ->
         s_Function1DPartial_Values[q1] != s_Function1DPartial_Values[q2]
             | q1 : int(1..3), q2 : int(1..3), q1 < q2]),
    and([s_Function1DPartial_Flags[q3] = false -> s_Function1DPartial_Values[q3] = 1 | q3 : int(1..3)])

