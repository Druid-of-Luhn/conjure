language ESSENCE' 1.0

given n: int
find s_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..n)] of bool
find s_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..n)] of int(1..n)
find s_Occurrence: matrix indexed by [int(1..n)] of bool
such that
    and([[or([s_ExplicitVarSizeWithFlags_Flags[q16] /\
              s_ExplicitVarSizeWithFlags_Values[q16] =
              [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]
                  | q16 : int(1..n)])
              | q2 : int(1..n)]
         <=lex
         [or([s_ExplicitVarSizeWithFlags_Flags[q19] /\ s_ExplicitVarSizeWithFlags_Values[q19] = q2 | q19 : int(1..n)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q3 + 1] ->
         s_ExplicitVarSizeWithFlags_Values[q3] < s_ExplicitVarSizeWithFlags_Values[q3 + 1]
             | q3 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q4] = false -> s_ExplicitVarSizeWithFlags_Values[q4] = 1 | q4 : int(1..n)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q5 + 1] -> s_ExplicitVarSizeWithFlags_Flags[q5] | q5 : int(1..n - 1)]),
    and([s_Occurrence[q9] ->
         or([s_ExplicitVarSizeWithFlags_Flags[q11] /\ s_ExplicitVarSizeWithFlags_Values[q11] = q9 | q11 : int(1..n)])
             | q9 : int(1..n)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q13] -> s_Occurrence[s_ExplicitVarSizeWithFlags_Values[q13]]
             | q13 : int(1..n)])

