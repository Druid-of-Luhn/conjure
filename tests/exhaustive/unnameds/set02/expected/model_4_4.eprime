language ESSENCE' 1.0

given n: int
find s_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..n)] of bool
find s_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..n)] of int(1..n)
such that
    and([[or([s_ExplicitVarSizeWithFlags_Flags[q8] /\
              s_ExplicitVarSizeWithFlags_Values[q8] =
              [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]
                  | q8 : int(1..n)])
              | q2 : int(1..n)]
         <=lex
         [or([s_ExplicitVarSizeWithFlags_Flags[q11] /\ s_ExplicitVarSizeWithFlags_Values[q11] = q2 | q11 : int(1..n)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q1 + 1] ->
         s_ExplicitVarSizeWithFlags_Values[q1] < s_ExplicitVarSizeWithFlags_Values[q1 + 1]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q2] = false -> s_ExplicitVarSizeWithFlags_Values[q2] = 1 | q2 : int(1..n)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q3 + 1] -> s_ExplicitVarSizeWithFlags_Flags[q3] | q3 : int(1..n - 1)])

