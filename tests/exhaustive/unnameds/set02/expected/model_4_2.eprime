language ESSENCE' 1.0

given n: int
find s_ExplicitVarSizeWithFlags_Flags: matrix indexed by [int(1..n)] of bool
find s_ExplicitVarSizeWithFlags_Values: matrix indexed by [int(1..n)] of int(1..n)
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..n)] of int(1..n + 1)
such that
    and([[or([s_ExplicitVarSizeWithFlags_Flags[q22] /\
              s_ExplicitVarSizeWithFlags_Values[q22] =
              [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]
                  | q22 : int(1..n)])
              | q2 : int(1..n)]
         <=lex
         [or([s_ExplicitVarSizeWithFlags_Flags[q25] /\ s_ExplicitVarSizeWithFlags_Values[q25] = q2 | q25 : int(1..n)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q3 + 1] ->
         s_ExplicitVarSizeWithFlags_Values[q3] < s_ExplicitVarSizeWithFlags_Values[q3 + 1]
             | q3 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q4] = false -> s_ExplicitVarSizeWithFlags_Values[q4] = 1 | q4 : int(1..n)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q5 + 1] -> s_ExplicitVarSizeWithFlags_Flags[q5] | q5 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q8] < s_ExplicitVarSizeWithDummy[q8 + 1] \/ s_ExplicitVarSizeWithDummy[q8] = n + 1
             | q8 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q9] = n + 1 -> s_ExplicitVarSizeWithDummy[q9 + 1] = n + 1 | q9 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q13] != n + 1 ->
         or([s_ExplicitVarSizeWithFlags_Flags[q15] /\
             s_ExplicitVarSizeWithFlags_Values[q15] = s_ExplicitVarSizeWithDummy[q13]
                 | q15 : int(1..n)])
             | q13 : int(1..n)]),
    and([s_ExplicitVarSizeWithFlags_Flags[q17] ->
         or([s_ExplicitVarSizeWithDummy[q19] != n + 1 /\
             s_ExplicitVarSizeWithDummy[q19] = s_ExplicitVarSizeWithFlags_Values[q17]
                 | q19 : int(1..n)])
             | q17 : int(1..n)])

