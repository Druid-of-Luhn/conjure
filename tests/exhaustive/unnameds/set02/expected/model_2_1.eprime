language ESSENCE' 1.0

given n: int
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..n)] of int(1..n + 1)
find s_Occurrence: matrix indexed by [int(1..n)] of bool
such that
    and([[or([s_ExplicitVarSizeWithDummy[q13] != n + 1 /\
              s_ExplicitVarSizeWithDummy[q13] = [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]
                  | q13 : int(1..n)])
              | q2 : int(1..n)]
         <=lex
         [or([s_ExplicitVarSizeWithDummy[q16] != n + 1 /\ s_ExplicitVarSizeWithDummy[q16] = q2 | q16 : int(1..n)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q1] < s_ExplicitVarSizeWithDummy[q1 + 1] \/ s_ExplicitVarSizeWithDummy[q1] = n + 1
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q2] = n + 1 -> s_ExplicitVarSizeWithDummy[q2 + 1] = n + 1 | q2 : int(1..n - 1)]),
    and([s_Occurrence[q6] ->
         or([s_ExplicitVarSizeWithDummy[q8] != n + 1 /\ s_ExplicitVarSizeWithDummy[q8] = q6 | q8 : int(1..n)])
             | q6 : int(1..n)]),
    and([s_ExplicitVarSizeWithDummy[q10] != n + 1 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q10]] | q10 : int(1..n)])

