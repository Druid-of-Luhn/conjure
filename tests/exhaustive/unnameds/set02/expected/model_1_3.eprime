language ESSENCE' 1.0

given n: int
find s_Occurrence: matrix indexed by [int(1..n)] of bool
find s_ExplicitVarSizeWithMarker_Marker: int(0..n)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..n)] of int(1..n)
such that
    and([[s_Occurrence[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]] | q2 : int(1..n)] <=lex
         [s_Occurrence[q2] | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([q4 + 1 <= s_ExplicitVarSizeWithMarker_Marker ->
         s_ExplicitVarSizeWithMarker_Values[q4] < s_ExplicitVarSizeWithMarker_Values[q4 + 1]
             | q4 : int(1..n - 1)]),
    and([q5 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q5] = 1 | q5 : int(1..n)]),
    and([q8 <= s_ExplicitVarSizeWithMarker_Marker -> s_Occurrence[s_ExplicitVarSizeWithMarker_Values[q8]]
             | q8 : int(1..n)]),
    and([s_Occurrence[q9] ->
         or([q11 <= s_ExplicitVarSizeWithMarker_Marker /\ s_ExplicitVarSizeWithMarker_Values[q11] = q9
                 | q11 : int(1..n)])
             | q9 : int(1..n)])

