language ESSENCE' 1.0

given n: int
find s_ExplicitVarSizeWithMarker_Marker: int(0..n)
find s_ExplicitVarSizeWithMarker_Values: matrix indexed by [int(1..n)] of int(1..n)
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..n)] of int(1..n + 1)
such that
    and([[or([q20 <= s_ExplicitVarSizeWithMarker_Marker /\
              s_ExplicitVarSizeWithMarker_Values[q20] =
              [q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]
                  | q20 : int(1..n)])
              | q2 : int(1..n)]
         <=lex
         [or([q23 <= s_ExplicitVarSizeWithMarker_Marker /\ s_ExplicitVarSizeWithMarker_Values[q23] = q2
                  | q23 : int(1..n)])
              | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([q3 + 1 <= s_ExplicitVarSizeWithMarker_Marker ->
         s_ExplicitVarSizeWithMarker_Values[q3] < s_ExplicitVarSizeWithMarker_Values[q3 + 1]
             | q3 : int(1..n - 1)]),
    and([q4 > s_ExplicitVarSizeWithMarker_Marker -> s_ExplicitVarSizeWithMarker_Values[q4] = 1 | q4 : int(1..n)]),
    and([s_ExplicitVarSizeWithDummy[q6] < s_ExplicitVarSizeWithDummy[q6 + 1] \/ s_ExplicitVarSizeWithDummy[q6] = n + 1
             | q6 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q7] = n + 1 -> s_ExplicitVarSizeWithDummy[q7 + 1] = n + 1 | q7 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q11] != n + 1 ->
         or([q13 <= s_ExplicitVarSizeWithMarker_Marker /\
             s_ExplicitVarSizeWithMarker_Values[q13] = s_ExplicitVarSizeWithDummy[q11]
                 | q13 : int(1..n)])
             | q11 : int(1..n)]),
    and([q15 <= s_ExplicitVarSizeWithMarker_Marker ->
         or([s_ExplicitVarSizeWithDummy[q17] != n + 1 /\
             s_ExplicitVarSizeWithDummy[q17] = s_ExplicitVarSizeWithMarker_Values[q15]
                 | q17 : int(1..n)])
             | q15 : int(1..n)])

