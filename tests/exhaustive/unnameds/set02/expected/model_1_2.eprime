language ESSENCE' 1.0

given n: int
find s_Occurrence: matrix indexed by [int(1..n)] of bool
find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..n)] of int(1..n + 1)
such that
    and([[s_Occurrence[[q2, q1 + 1, q1; int(0..2)][toInt(q2 = q1) + 2 * toInt(q2 = q1 + 1)]] | q2 : int(1..n)] <=lex
         [s_Occurrence[q2] | q2 : int(1..n)]
             | q1 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q4] < s_ExplicitVarSizeWithDummy[q4 + 1] \/ s_ExplicitVarSizeWithDummy[q4] = n + 1
             | q4 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q5] = n + 1 -> s_ExplicitVarSizeWithDummy[q5 + 1] = n + 1 | q5 : int(1..n - 1)]),
    and([s_ExplicitVarSizeWithDummy[q9] != n + 1 -> s_Occurrence[s_ExplicitVarSizeWithDummy[q9]] | q9 : int(1..n)]),
    and([s_Occurrence[q10] ->
         or([s_ExplicitVarSizeWithDummy[q12] != n + 1 /\ s_ExplicitVarSizeWithDummy[q12] = q10 | q12 : int(1..n)])
             | q10 : int(1..n)])

