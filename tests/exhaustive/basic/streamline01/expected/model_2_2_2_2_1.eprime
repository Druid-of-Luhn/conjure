language ESSENCE' 1.0

letting A be domain int(1..2)
find f_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..2)] of int(1..2)
letting let1 be 1
find s_Explicit: matrix indexed by [int(1..let1)] of int(1..2)
find s_Occurrence: matrix indexed by [int(1..2)] of bool
such that
    and([f_Function1DPartial_Flags[s_Explicit[q20]] | q20 : int(1..let1)]),
    and([s_Explicit[q12] != min([s_Explicit[q18] | q18 : int(1..let1)]) ->
         and([f_Function1DPartial_Values[s_Explicit[q12]] >
              f_Function1DPartial_Values[min([s_Explicit[q14] | q14 : int(1..let1)])],
              f_Function1DPartial_Flags[s_Explicit[q12]],
              f_Function1DPartial_Flags[min([s_Explicit[q16]
                                                 | q16 : int(1..let1)])]; int(1..3)])
             | q12 : int(1..let1)]),
    and([s_Explicit[q1] < s_Explicit[q1 + 1] | q1 : int(1..let1 - 1)]),
    and([f_Function1DPartial_Flags[q3] = false -> f_Function1DPartial_Values[q3] = 1
             | q3 : int(1..2)]),
    let1 = sum([toInt(s_Occurrence[q6]) | q6 : int(1..2)]),
    and([s_Occurrence[q7] -> or([s_Explicit[q9] = q7 | q9 : int(1..let1)])
             | q7 : int(1..2)]),
    and([s_Occurrence[s_Explicit[q11]] | q11 : int(1..let1)])

