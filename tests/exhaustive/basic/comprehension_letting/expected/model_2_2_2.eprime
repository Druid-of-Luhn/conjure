language ESSENCE' 1.0

find s_ExplicitVarSizeWithDummy: matrix indexed by [int(1..4)] of int(1..4, 5)
letting let1 be -100
find x: int(-100..100)
find aux1: int(-25..4)
such that
    and([and([s_ExplicitVarSizeWithDummy[q5] != 5,
              s_ExplicitVarSizeWithDummy[q6] != 5,
              s_ExplicitVarSizeWithDummy[q5] != s_ExplicitVarSizeWithDummy[q6],
              allDiff([s_ExplicitVarSizeWithDummy[q5] + s_ExplicitVarSizeWithDummy[q6],
                       s_ExplicitVarSizeWithDummy[q5] * s_ExplicitVarSizeWithDummy[q6],
                       s_ExplicitVarSizeWithDummy[q5] / s_ExplicitVarSizeWithDummy[q6]; int(1..3)]),
              (s_ExplicitVarSizeWithDummy[q5] - s_ExplicitVarSizeWithDummy[q6]) % 2 =
              0; int(1..5)])
         ->
         min([s_ExplicitVarSizeWithDummy[q5] + s_ExplicitVarSizeWithDummy[q6],
              s_ExplicitVarSizeWithDummy[q5] - s_ExplicitVarSizeWithDummy[q6],
              s_ExplicitVarSizeWithDummy[q5] * s_ExplicitVarSizeWithDummy[q6],
              s_ExplicitVarSizeWithDummy[q5] / s_ExplicitVarSizeWithDummy[q6]; int(1..4)])
         <= aux1
             | q5 : int(1..4), q6 : int(1..4)]),
    or([and([s_ExplicitVarSizeWithDummy[q5] != 5,
             s_ExplicitVarSizeWithDummy[q6] != 5,
             s_ExplicitVarSizeWithDummy[q5] != s_ExplicitVarSizeWithDummy[q6],
             allDiff([s_ExplicitVarSizeWithDummy[q5] + s_ExplicitVarSizeWithDummy[q6],
                      s_ExplicitVarSizeWithDummy[q5] * s_ExplicitVarSizeWithDummy[q6],
                      s_ExplicitVarSizeWithDummy[q5] / s_ExplicitVarSizeWithDummy[q6]; int(1..3)]),
             (s_ExplicitVarSizeWithDummy[q5] - s_ExplicitVarSizeWithDummy[q6]) % 2 =
             0; int(1..5)])
        /\
        min([s_ExplicitVarSizeWithDummy[q5] + s_ExplicitVarSizeWithDummy[q6],
             s_ExplicitVarSizeWithDummy[q5] - s_ExplicitVarSizeWithDummy[q6],
             s_ExplicitVarSizeWithDummy[q5] * s_ExplicitVarSizeWithDummy[q6],
             s_ExplicitVarSizeWithDummy[q5] / s_ExplicitVarSizeWithDummy[q6]; int(1..4)])
        = aux1
            | q5 : int(1..4), q6 : int(1..4)]),
    x = aux1,
    and([s_ExplicitVarSizeWithDummy[q1] < s_ExplicitVarSizeWithDummy[q1 + 1] \/
         s_ExplicitVarSizeWithDummy[q1] = 5
             | q1 : int(1..3)]),
    and([s_ExplicitVarSizeWithDummy[q2] = 5 ->
         s_ExplicitVarSizeWithDummy[q2 + 1] = 5
             | q2 : int(1..3)])

