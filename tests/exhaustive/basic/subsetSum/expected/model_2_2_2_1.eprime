language ESSENCE' 1.0

given s: int
given fin1: int
given fin2: int
given fin3: int
given nums_Explicit: matrix indexed by [int(1..fin1)] of int(fin2..fin3)
letting let1 be fin1
letting let2 be fin2
letting let3 be fin3
find x_ExplicitVarSizeWithDummy:
        matrix indexed by [int(1..let1)] of int(let2..let3 + 1)
find x_Occurrence: matrix indexed by [int(let2..let3)] of bool
such that
    and([x_ExplicitVarSizeWithDummy[q13] != let3 + 1 ->
         or([nums_Explicit[q15] = x_ExplicitVarSizeWithDummy[q13] | q15 : int(1..fin1)])
             | q13 : int(1..let1)]),
    s =
    sum([toInt(x_ExplicitVarSizeWithDummy[q11] != let3 + 1) *
         x_ExplicitVarSizeWithDummy[q11]
             | q11 : int(1..let1)]),
    and([x_ExplicitVarSizeWithDummy[q1] < x_ExplicitVarSizeWithDummy[q1 + 1] \/
         x_ExplicitVarSizeWithDummy[q1] = let3 + 1
             | q1 : int(1..let1 - 1)]),
    and([x_ExplicitVarSizeWithDummy[q2] = let3 + 1 ->
         x_ExplicitVarSizeWithDummy[q2 + 1] = let3 + 1
             | q2 : int(1..let1 - 1)]),
    1 <=
    sum([toInt(x_ExplicitVarSizeWithDummy[q3] != let3 + 1) | q3 : int(1..let1)]),
    sum([toInt(x_ExplicitVarSizeWithDummy[q3] != let3 + 1) | q3 : int(1..let1)]) <=
    let1,
    1 <= sum([toInt(x_Occurrence[q5]) | q5 : int(let2..let3)]),
    sum([toInt(x_Occurrence[q5]) | q5 : int(let2..let3)]) <= let1,
    and([x_Occurrence[q6] ->
         or([x_ExplicitVarSizeWithDummy[q8] != let3 + 1 /\
             x_ExplicitVarSizeWithDummy[q8] = q6
                 | q8 : int(1..let1)])
             | q6 : int(let2..let3)]),
    and([x_ExplicitVarSizeWithDummy[q10] != let3 + 1 ->
         x_Occurrence[x_ExplicitVarSizeWithDummy[q10]]
             | q10 : int(1..let1)])

