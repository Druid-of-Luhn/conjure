language ESSENCE' 1.0

letting A be domain int(1..2)
find f_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..2)] of int(1..2)
letting let1 be 1
find s_Occurrence: matrix indexed by [int(1..2)] of bool
find s_Explicit: matrix indexed by [int(1..let1)] of int(1..2)
find aux1: matrix indexed by [int(1..2)] of int(1..2)
find aux2: matrix indexed by [int(1..2)] of int(1..2)
find aux3: matrix indexed by [int(1..2)] of int(1..2)
such that
    and([s_Occurrence[q7] -> f_Function1DPartial_Flags[q7] | q7 : int(1..2)]),
    and([and([s_Occurrence[q10] -> q10 >= aux1[i] | q10 : int(1..2)])
             | i : int(1..2)]),
    and([or([s_Occurrence[q10] /\ q10 = aux1[i] | q10 : int(1..2)])
             | i : int(1..2)]),
    and([and([s_Occurrence[q8] -> q8 >= aux2[i] | q8 : int(1..2)])
             | i : int(1..2)]),
    and([or([s_Occurrence[q8] /\ q8 = aux2[i] | q8 : int(1..2)]) | i : int(1..2)]),
    and([and([s_Occurrence[q9] -> q9 >= aux3[i] | q9 : int(1..2)])
             | i : int(1..2)]),
    and([or([s_Occurrence[q9] /\ q9 = aux3[i] | q9 : int(1..2)]) | i : int(1..2)]),
    and([s_Occurrence[i] /\ i != aux1[i] ->
         and([f_Function1DPartial_Values[i] > f_Function1DPartial_Values[aux2[i]],
              f_Function1DPartial_Flags[i], f_Function1DPartial_Flags[aux3[i]]; int(1..3)])
             | i : int(1..2)]),
    let1 = sum([toInt(s_Occurrence[q1]) | q1 : int(1..2)]),
    and([f_Function1DPartial_Flags[q2] = false -> f_Function1DPartial_Values[q2] = 1
             | q2 : int(1..2)]),
    and([s_Explicit[q5] < s_Explicit[q5 + 1] | q5 : int(1..let1 - 1)]),
    and([s_Occurrence[s_Explicit[q12]] | q12 : int(1..let1)]),
    and([s_Occurrence[q13] -> or([s_Explicit[q15] = q13 | q15 : int(1..let1)])
             | q13 : int(1..2)])

