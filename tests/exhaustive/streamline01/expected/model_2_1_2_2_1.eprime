language ESSENCE' 1.0

letting A be domain int(1..2)
find f_Function1DPartial_Flags: matrix indexed by [int(1..2)] of bool
find f_Function1DPartial_Values: matrix indexed by [int(1..2)] of int(1..2)
letting let1 be 1
find s_Explicit: matrix indexed by [int(1..let1)] of int(1..2)
find s_Occurrence: matrix indexed by [int(1..2)] of bool
find aux1: matrix indexed by [int(1..let1)] of int(1..2)
find aux2: matrix indexed by [int(1..let1)] of int(1..2)
such that
    and([f_Function1DPartial_Flags[s_Explicit[q9]] | q9 : int(1..let1)]),
    and([and([s_Occurrence[q10] -> q10 >= aux1[q7] | q10 : int(1..2)])
             | q7 : int(1..let1)]),
    and([or([s_Occurrence[q10] /\ q10 = aux1[q7] | q10 : int(1..2)])
             | q7 : int(1..let1)]),
    and([and([s_Occurrence[q11] -> q11 >= aux2[q7] | q11 : int(1..2)])
             | q7 : int(1..let1)]),
    and([or([s_Occurrence[q11] /\ q11 = aux2[q7] | q11 : int(1..2)])
             | q7 : int(1..let1)]),
    and([s_Explicit[q7] != min([s_Explicit[q13] | q13 : int(1..let1)]) ->
         and([f_Function1DPartial_Values[s_Explicit[q7]] >
              f_Function1DPartial_Values[aux1[q7]],
              f_Function1DPartial_Flags[s_Explicit[q7]],
              f_Function1DPartial_Flags[aux2[q7]]; int(1..3)])
             | q7 : int(1..let1)]),
    and([s_Explicit[q1] < s_Explicit[q1 + 1] | q1 : int(1..let1 - 1)]),
    and([f_Function1DPartial_Flags[q3] = false -> f_Function1DPartial_Values[q3] = 1
             | q3 : int(1..2)]),
    let1 = sum([toInt(s_Occurrence[q6]) | q6 : int(1..2)]),
    and([s_Occurrence[q14] -> or([s_Explicit[q16] = q14 | q16 : int(1..let1)])
             | q14 : int(1..2)]),
    and([s_Occurrence[s_Explicit[q18]] | q18 : int(1..let1)])

