language ESSENCE' 1.0

find x_Function1DPartial_Flags: matrix indexed by [int(1..4)] of bool
find x_Function1DPartial_Values: matrix indexed by [int(1..4)] of int(1..4)
find aux1_Occurrence: matrix indexed by [int(1..2)] of bool
find aux2_ExplicitVarSizeWithMarker_Marker: int(0..2)
find aux2_ExplicitVarSizeWithMarker_Values:
        matrix indexed by [int(1..2)] of int(3..4)
such that
    and([x_Function1DPartial_Flags[q11] -> aux1_Occurrence[q11]
             | q11 : int(1..4), or([q10 = q11 | q10 : int(1..2)])]),
    and([aux1_Occurrence[q7] ->
         or([x_Function1DPartial_Flags[q13] /\ q13 = q7
                 | q13 : int(1..4), or([q12 = q13 | q12 : int(1..2)])])
             | q7 : int(1..2)]),
    and([aux1_Occurrence[q6] ->
         x_Function1DPartial_Values[q6] % 2 = 0 /\ x_Function1DPartial_Flags[q6]
             | q6 : int(1..2)]),
    2 <= aux2_ExplicitVarSizeWithMarker_Marker ->
    aux2_ExplicitVarSizeWithMarker_Values[1] <
    aux2_ExplicitVarSizeWithMarker_Values[2],
    and([q18 > aux2_ExplicitVarSizeWithMarker_Marker ->
         aux2_ExplicitVarSizeWithMarker_Values[q18] = 3
             | q18 : int(1..2)]),
    and([x_Function1DPartial_Flags[q25] ->
         or([q27 <= aux2_ExplicitVarSizeWithMarker_Marker /\
             aux2_ExplicitVarSizeWithMarker_Values[q27] = q25
                 | q27 : int(1..2)])
             | q25 : int(1..4), or([q24 = q25 | q24 : int(3..4)])]),
    and([q20 <= aux2_ExplicitVarSizeWithMarker_Marker ->
         or([x_Function1DPartial_Flags[q22] /\
             q22 = aux2_ExplicitVarSizeWithMarker_Values[q20]
                 | q22 : int(1..4), or([q21 = q22 | q21 : int(3..4)])])
             | q20 : int(1..2)]),
    and([q23 <= aux2_ExplicitVarSizeWithMarker_Marker ->
         x_Function1DPartial_Values[aux2_ExplicitVarSizeWithMarker_Values[q23]] % 2 = 1
         /\ x_Function1DPartial_Flags[aux2_ExplicitVarSizeWithMarker_Values[q23]]
             | q23 : int(1..2)]),
    and([x_Function1DPartial_Flags[q1] /\ x_Function1DPartial_Flags[q2] ->
         x_Function1DPartial_Values[q1] != x_Function1DPartial_Values[q2]
             | q1 : int(1..4), q2 : int(1..4), q1 < q2]),
    and([x_Function1DPartial_Flags[q3] = false -> x_Function1DPartial_Values[q3] = 1
             | q3 : int(1..4)])

