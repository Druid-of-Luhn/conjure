language Essence 1.4

given s: int
given nums: set of int
find x: set (minSize 1, maxSize |nums|) of int([i | i <- nums])
such that
    x subsetEq nums,
    s = sum([i | i <- x])
find nSize: int(1)
find act1: bool
neighbourhood removeElem : (act1, nSize, [x])
such that act1 -> or([incumbent(x) = x - {i} | i <- x])
find act2: bool
neighbourhood addElem : (act2, nSize, [x])
such that act2 -> or([incumbent(x) = x union {i} | i <- x])
