*** NoParse
    [1,,]

*** ParsePrint
    1
    ~~ ValueInteger 1

*** ParsePrint
    2
    ~~ ValueInteger 2

*** ParsePrint
    false
    ~~ ValueBoolean False

*** ParsePrint
    true
    ~~ ValueBoolean True

*** ShouldParse
    1

*** ShouldParseTo
    1
    ~~ ValueInteger 1

*** ParsePrint
    [1, 2, 3]
    ~~ ValueMatrix [ ValueInteger 1 , ValueInteger 2 , ValueInteger 3 ]

*** ParsePrint
    [1, 2, 3, false, 4]
    ~~ ValueMatrix [ ValueInteger 1
                   , ValueInteger 2
                   , ValueInteger 3
                   , ValueBoolean False
                   , ValueInteger 4
                   ]

*** ParsePrint
    []
    ~~ ValueMatrix []

*** ParsePrint
    [[]]
    ~~ ValueMatrix [ValueMatrix []]

*** ParsePrint
    [[1, 2, 3], [4, 5, 6]]
    ~~ ValueMatrix [ ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                   , ValueMatrix [ValueInteger 4, ValueInteger 5, ValueInteger 6]
                   ]

*** ParsePrint
    [[1, 2, 3], [true, false]]
    ~~ ValueMatrix [ ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                   , ValueMatrix [ValueBoolean True, ValueBoolean False]
                   ]

*** ParsePrint
    (1, 2)
    ~~ ValueTuple [ValueInteger 1, ValueInteger 2]

*** ParsePrint
    (1, 2, 3, [1, 2, 3])
    ~~ ValueTuple [ ValueInteger 1
                  , ValueInteger 2
                  , ValueInteger 3
                  , ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                  ]

*** ParsePrint
    (true, 1, (false, 2))
    ~~ ValueTuple [ ValueBoolean True
                  , ValueInteger 1
                  , ValueTuple [ValueBoolean False, ValueInteger 2]
                  ]

*** ParsePrint
    set {}
    ~~ ValueSet []

*** ParsePrint
    set {1}
    ~~ ValueSet [ValueInteger 1]

*** ParsePrint
    set {a}
    ~~ ValueSet [Identifier "a"]

*** ParsePrint
    set {1, 2, true, false, (1, 2, 3)}
    ~~ ValueSet [ ValueInteger 1
                , ValueInteger 2
                , ValueBoolean True
                , ValueBoolean False
                , ValueTuple [ ValueInteger 1
                             , ValueInteger 2
                             , ValueInteger 3
                             ]
                ]

*** ParsePrint
    set {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}}
    ~~ ValueSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                ]

*** ParsePrint
    set {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}, set {true, false}}
    ~~ ValueSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                , ValueSet [ValueBoolean True, ValueBoolean False]
                ]

*** ParsePrint
    mset {}
    ~~ ValueMSet []

*** ParsePrint
    mset {1}
    ~~ ValueMSet [ValueInteger 1]

*** ParsePrint
    mset {a}
    ~~ ValueMSet [Identifier "a"]

*** ParsePrint
    mset {mset {}}
    ~~ ValueMSet [ValueMSet []]

*** ParsePrint
    mset {1, 2, true, false, (1, 2, 3)}
    ~~ ValueMSet [ ValueInteger 1
                 , ValueInteger 2
                 , ValueBoolean True
                 , ValueBoolean False
                 , ValueTuple [ ValueInteger 1
                              , ValueInteger 2
                              , ValueInteger 3
                              ]
                 ]

*** ParsePrint
    mset {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}}
    ~~ ValueMSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                 , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                 , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                 ]

*** ParsePrint
    function {}
    ~~ ValueFunction []

*** ParsePrint
    function {1 -> 2}
    ~~ ValueFunction [(ValueInteger 1, ValueInteger 2)]

*** ParsePrint
    function {1 -> 2, 3 -> 4, 5 -> 6, 7 -> 8}
    ~~ ValueFunction [ (ValueInteger 1, ValueInteger 2)
                     , (ValueInteger 3, ValueInteger 4)
                     , (ValueInteger 5, ValueInteger 6)
                     , (ValueInteger 7, ValueInteger 8)
                     ]

*** ParsePrint
function {1 -> set {2},
          3 -> mset {4},
          5 -> function {6 -> 6},
          7 -> (false, true, 4)}
    ~~ ValueFunction [ (ValueInteger 1, ValueSet [ValueInteger 2])
                     , (ValueInteger 3, ValueMSet [ValueInteger 4])
                     , (ValueInteger 5, ValueFunction [(ValueInteger 6, ValueInteger 6)])
                     , (ValueInteger 7, ValueTuple [ValueBoolean False, ValueBoolean True, ValueInteger 4])
                     ]

*** ParsePrint
    relation {}
    ~~ ValueRelation []

*** ParsePrint
    relation {(1, a)}
    ~~ ValueRelation [ValueTuple [ValueInteger 1, Identifier "a"]]

*** ParsePrint
    relation {(1, a), (2, b)}
    ~~ ValueRelation [ ValueTuple [ValueInteger 1, Identifier "a"]
                     , ValueTuple [ValueInteger 2, Identifier "b"]
                     ]

*** ParsePrint
    relation {(1, set {a}), (mset {2, 3, 4}, b)}
    ~~ ValueRelation [ ValueTuple [ValueInteger 1, ValueSet [Identifier "a"]]
                     , ValueTuple [ValueMSet [ValueInteger 2, ValueInteger 3, ValueInteger 4], Identifier "b"]
                     ]

*** ParsePrint
    partition {}
    ~~ ValuePartition []

*** ParsePrint
    partition {{}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}
    ~~ ValuePartition [ [ ]
                      , [ ValueInteger 1 ]
                      , [ ValueInteger 2 ]
                      , [ ValueInteger 3 ]
                      , [ ValueInteger 1, ValueInteger 2 ]
                      , [ ValueInteger 1, ValueInteger 3 ]
                      , [ ValueInteger 2, ValueInteger 3 ]
                      , [ ValueInteger 1, ValueInteger 2, ValueInteger 3 ]
                      ]

*** ParsePrint
    partition {{1, 2, 3}, {4, 5, 6}}
    ~~ ValuePartition [ [ ValueInteger 1, ValueInteger 2, ValueInteger 3 ]
                      , [ ValueInteger 4, ValueInteger 5, ValueInteger 6 ]
                      ]

################################################################################
## Tests for parsing domains ###################################################
################################################################################

*** ParsePrint
    bool
    ~~ DomainBoolean

*** ParsePrint
    int
    ~~ DomainIntegerList []

*** ParsePrint
    int(1)
    ~~ DomainIntegerList [ValueInteger 1]

*** ParsePrint
    int(1, 2)
    ~~ DomainIntegerList [ValueInteger 1, ValueInteger 2]

*** ParsePrint
    int(1, 2, a)
    ~~ DomainIntegerList [ValueInteger 1, ValueInteger 2, Identifier "a"]

*** ParsePrint
    int(1..)
    ~~ DomainIntegerFromTo (Just (ValueInteger 1)) Nothing

*** ParsePrint
    int(1..20)
    ~~ DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 20))

*** ParsePrint
    int(..20)
    ~~ DomainIntegerFromTo Nothing (Just (ValueInteger 20))

*** NoParse int(1...3)

*** NoParse int(1,,2,3)

*** ParsePrint
    new type of size 4
    ~~ DomainUnnamed {theSize = ValueInteger 4, representation = Nothing}

*** ParsePrint
    new type of size a
    ~~ DomainUnnamed {theSize = Identifier "a", representation = Nothing}

*** ParsePrint
    new type (representation foo) of size a
    ~~ DomainUnnamed {theSize = Identifier "a", representation = Just "foo"}

# *** ParsePrint
#     new type of size a + b
#     ~~ DomainUnnamed (GenericNode Plus [Identifier a, Identifier b]) Nothing

*** ParsePrint
    enum {foo, bar}
    ~~ DomainEnum {enums = ["foo","bar"], representation = Nothing}

*** ParsePrint
    enum {foo, bar, baz}
    ~~ DomainEnum {enums = ["foo","bar","baz"], representation = Nothing}

*** NoParse
    enum {foo, int}

*** ParsePrint
    matrix indexed by [int(1..9)] of bool
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainBoolean
                    }

*** ParsePrint
    matrix indexed by [int(1..9), int(a..b)] of enum {foo, bar}
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainMatrix { index = DomainIntegerFromTo (Just (Identifier "a")) (Just (Identifier "b"))
                                             , element = DomainEnum {enums = ["foo","bar"], representation = Nothing}
                                             }
                    }

*** ParsePrint
    matrix indexed by [int(1..9), int(a..), int(..b)] of bool
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainMatrix { index = DomainIntegerFromTo (Just (Identifier "a")) Nothing
                                             , element = DomainMatrix { index = DomainIntegerFromTo Nothing (Just (Identifier "b"))
                                                                      , element = DomainBoolean
                                                                      }
                                             }
                    }

*** ParsePrint
    tuple of (int, bool)
    ~~ DomainTuple { components = [DomainIntegerList [],DomainBoolean]
                   , representation = Nothing
                   }

*** ParsePrint
    tuple (representation foo) of (int, bool)
    ~~ DomainTuple { components = [DomainIntegerList [],DomainBoolean]
                   , representation = Just "foo"
                   }

*** ParsePrint
    tuple of (int, fool, tuple of (enum {foo, bar}, int(1..9)))
    ~~ DomainTuple { components = [ DomainIntegerList []
                                  , Identifier "fool"
                                  , DomainTuple { components = [ DomainEnum {enums = ["foo","bar"], representation = Nothing}
                                                               , DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                                                               ]
                                                , representation = Nothing
                                                }
                                  ]
                   , representation = Nothing
                   }

*** ParsePrint
    set of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ParsePrint
    set of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (size n) of a
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (size n) of tuple of (a,b)
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainTuple {components = [Identifier "a",Identifier "b"], representation = Nothing}
                 , representation = Nothing
                 }

*** ParsePrint
    set (size n) of tuple of (a, b)
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainTuple {components = [Identifier "a",Identifier "b"], representation = Nothing}
                 , representation = Nothing
                 }

*** ParsePrint
    set (minSize n) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Just (Identifier "n")
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (maxSize n) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (representation foo) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (size n, minSize m, representation foo) of a
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Just (Identifier "m")
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (representation foo) of set of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainSet { size = Nothing
                                       , minSize = Nothing
                                       , maxSize = Nothing
                                       , attrDontCare = False
                                       , element = Identifier "a"
                                       , representation = Nothing
                                       }
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (size n, _) of int
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n, _) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n, _, _) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ParsePrint
    mset of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    mset of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (size n) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (size n) of tuple of (a, b)
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainTuple { components = [Identifier "a",Identifier "b"]
                                          , representation = Nothing
                                          } 
                  , representation = Nothing
                  }

*** ParsePrint
    mset (minSize n) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Just (Identifier "n")
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (maxSize n) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (representation foo) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (size n, minSize m, representation foo) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Just (Identifier "m")
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (representation foo) of mset of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainMSet { size = Nothing
                                         , minSize = Nothing
                                         , maxSize = Nothing
                                         , occr = Nothing
                                         , minOccr = Nothing
                                         , maxOccr = Nothing
                                         , attrDontCare = False
                                         , element = Identifier "a"
                                         , representation = Nothing
                                         }
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (size n, _) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = Identifier "a"
                  , representation = Nothing
                  }


# -- ,  "mset (_, maxSize n) of int"
# -- ~~ DomainMSet Nothing Nothing (Just (Identifier "n")) Nothing Nothing Nothing True (DomainIntegerList []) Nothing
# -- 
# -- ,  "mset (_, maxSize n, _) of int"
# -- ~~ DomainMSet Nothing Nothing (Just (Identifier "n")) Nothing Nothing Nothing True (DomainIntegerList []) Nothing
# -- 
# -- ,  "mset (_, maxSize n, _, _) of int"
# -- ~~ DomainMSet Nothing Nothing (Just (Identifier "n")) Nothing Nothing Nothing True (DomainIntegerList []) Nothing
# -- 
# -- ,  "mset (maxSize n, occr o, _) of int"
# -- ~~ DomainMSet Nothing Nothing (Just (Identifier "n")) (Just (Identifier "o")) Nothing Nothing True (DomainIntegerList []) Nothing
# -- 
# -- ,  "mset (occr o, minOccr m) of int"
# -- ~~ DomainMSet Nothing Nothing Nothing (Just (Identifier "o")) (Just (Identifier "m")) Nothing False (DomainIntegerList []) Nothing
# -- 
# -- ,  "mset (maxOccr m) of int"
# -- ~~ DomainMSet Nothing Nothing Nothing Nothing Nothing (Just (Identifier "m")) False (DomainIntegerList []) Nothing
