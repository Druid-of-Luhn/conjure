language Essence 2.0

given n_designs, n_slots : int(1..)
given n_placeholder : int(1..)

letting Design be domain int(1..n_designs)

given quantity : function (total) Design --> int(1..n_placeholder)

letting Design_Quant be domain int(1..n_placeholder)

find layout : function mset (size n_slots) of Design --> Design_Quant

minimising
    sum d : Design . (
        sum t in defined(layout) . (freq(t,d) * layout(t)) - quantity(d)
    )

such that
    forAll d : Design . (
        sum t : defined(layout) . (freq(t,d) * layout(t)) >= quantity(d)
    )
