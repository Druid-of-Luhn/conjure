[handleInfDom] given n: int(1..)
               ~~>
               given n: int(1..MAXINT)
[representation] find s: function (total) int(1..n) --> int(-1, 1)
                 (#2)
                 AsReln, Matrix1D
[configuration] s§region2#Matrix1D s§region1#AsReln
[addedDecl] find s_Matrix1D: matrix indexed by [int(1..n)] of int(-1, 1)
[addedDecl] find s_AsReln: relation of (int(1..n) * int(-1, 1))
[applied] s§region1#AsReln(i)
          {rules/refns/function-asreln/function-asreln-image.rule}
              (sum v__3 in toSet(s_AsReln§region1) , v__3[1] = i . v__3[2])
[applied] s§region2#Matrix1D(i + k)
          {rules/refns/function-matrix1d/function-matrix1d-image.rule}
              s_Matrix1D§region2[i + k]
[from-cached] such that s#AsReln = s#Matrix1D
              ~~>
              such that
                  forAll v__6 in toSet(s_AsReln)
                      . (sum v__5 in toSet(s_AsReln) , v__5[1] = v__6[1] . v__5[2])
                        =
                        s_Matrix1D[v__6[1]]
[removedDecl] find s: function (total) int(1..n) --> int(-1, 1)
[representation] find s_AsReln: relation of (int(1..n) * int(-1, 1))
                 (#1)
                 RelationAsSet
[configuration] s_AsReln§region1#RelationAsSet s_AsReln§region2#RelationAsSet
[addedDecl] find s_AsReln_RelationAsSet: set of (int(1..n), int(-1, 1))
[applied] (sum v__3 in toSet(s_AsReln§region1#RelationAsSet) , v__3[1] = i
               . v__3[2])
          {rules/refns/relation-asset/relation-asset-toSet.rule}
              (sum v__3 in s_AsReln_RelationAsSet§region1 , v__3[1] = i . v__3[2])
[applied] (sum v__2 in toSet(s_AsReln§region1#RelationAsSet) . v__1 = v__2[1])
          {rules/refns/relation-asset/relation-asset-toSet.rule}
              (sum v__2 in s_AsReln_RelationAsSet§region1 . v__1 = v__2[1])
[applied] (sum v__5 in toSet(s_AsReln§region2#RelationAsSet) , v__5[1] = v__6[1]
               . v__5[2])
          {rules/refns/relation-asset/relation-asset-toSet.rule}
              (sum v__5 in s_AsReln_RelationAsSet§region2 , v__5[1] = v__6[1] . v__5[2])
[applied] (forAll v__6 in toSet(s_AsReln§region1#RelationAsSet)
               . (sum v__5 in s_AsReln_RelationAsSet§region2 , v__5[1] = v__6[1] . v__5[2])
                 =
                 s_Matrix1D[v__6[1]])
          {rules/refns/relation-asset/relation-asset-toSet.rule}
              (forAll v__6 in s_AsReln_RelationAsSet§region1
                   . (sum v__5 in s_AsReln_RelationAsSet§region2 , v__5[1] = v__6[1] . v__5[2])
                     =
                     s_Matrix1D[v__6[1]])
[removedDecl] find s_AsReln: relation of (int(1..n) * int(-1, 1))
[representation] find s_AsReln_RelationAsSet: set of (int(1..n), int(-1, 1))
                 (#1)
                 ExplicitVarSize
[configuration] s_AsReln_RelationAsSet§region2#ExplicitVarSize s_AsReln_RelationAsSet§region1#ExplicitVarSize
[addedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize:
                    matrix indexed by [int(1..n * 2)] of (bool, (int(1..n), int(-1, 1)))
[applied] (sum v__3 in s_AsReln_RelationAsSet§region1#ExplicitVarSize
               , v__3[1] = i
               . v__3[2])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (sum v__8 : int(1..n * 2)
                   , s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__8, 2, 1] = i
                     /\
                     s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__8, 1]
                   . s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__8, 2, 2])
[applied] (sum v__2 in s_AsReln_RelationAsSet§region1#ExplicitVarSize
               . v__1 = v__2[1])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (sum v__9 : int(1..n * 2)
                   , s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__9, 1]
                   . v__1 = s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__9, 2, 1])
[applied] (sum v__5 in s_AsReln_RelationAsSet§region2#ExplicitVarSize
               , v__5[1] = v__6[1]
               . v__5[2])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (sum v__10 : int(1..n * 2)
                   , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 1] = v__6[1]
                     /\
                     s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 1]
                   . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 2])
[applied] (forAll v__6 in s_AsReln_RelationAsSet§region1#ExplicitVarSize
               . (sum v__10 : int(1..n * 2)
                      , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 1] = v__6[1]
                        /\
                        s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 1]
                      . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 2])
                 =
                 s_Matrix1D[v__6[1]])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (forAll v__11 : int(1..n * 2)
                   , s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__11, 1]
                   . (sum v__10 : int(1..n * 2)
                          , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 1]
                            =
                            s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__11, 2, 1]
                            /\
                            s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 1]
                          . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__10, 2, 2])
                     =
                     s_Matrix1D[s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__11, 2, 1]])
[removedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize:
                      matrix indexed by [int(1..n * 2)] of (bool, (int(1..n), int(-1, 1)))
[removedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize_tuple2:
                      matrix indexed by [int(1..n * 2)] of (int(1..n), int(-1, 1))
[removedDecl] find s_AsReln_RelationAsSet: set of (int(1..n), int(-1, 1))