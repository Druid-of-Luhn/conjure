language ESSENCE' 1.0

given MAXINT: int
given n_roads: int(1..MAXINT)
find valid_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..n_roads * 8)] of bool
find valid_ExplicitVarSize_tuple2_Matrix1D_tuple1:
        matrix indexed by [int(1..n_roads * 8), int(1..n_roads)] of int(1..4)
find valid_ExplicitVarSize_tuple2_Matrix1D_tuple2:
        matrix indexed by [int(1..n_roads * 8), int(1..n_roads)] of int(1..2)
such that
    forAll v__0 : int(1..n_roads * 8)
        . valid_ExplicitVarSize_tuple1[v__0]
          ->
          (forAll rd : int(1..n_roads)
               . (valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd] = 1
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd] = 1
                  \/
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1] = 1
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1] = 1)
                 /\
                 (valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd] = 3
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd] = 2
                  \/
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1] = 3
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1] = 2)
                 /\
                 ((1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd]
                   \/
                   3 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd]
                   /\
                   2 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd])
                  /\
                  (1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1]
                   \/
                   3 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1]
                   /\
                   2 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1]))
                 \/
                 (valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd] = 2
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd] = 1
                  \/
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1] = 2
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1] = 1)
                 /\
                 (valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd] = 4
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd] = 1
                  \/
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1] = 4
                  /\
                  valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1] = 1)
                 /\
                 ((2 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd]
                   \/
                   4 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd])
                  /\
                  (2 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1]
                   \/
                   4 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, rd % n_roads + 1]
                   /\
                   1 = valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, rd % n_roads + 1]))),
    forAll v__0 : int(1..n_roads * 8)
        . (forAll v__1 : int(1..n_roads * 8)
               . v__0 < v__1 /\ valid_ExplicitVarSize_tuple1[v__0]
                 /\
                 valid_ExplicitVarSize_tuple1[v__1]
                 ->
                 !(forAll v__2 : int(1..n_roads)
                       . valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__0, v__2]
                         =
                         valid_ExplicitVarSize_tuple2_Matrix1D_tuple1[v__1, v__2]
                         /\
                         valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__0, v__2]
                         =
                         valid_ExplicitVarSize_tuple2_Matrix1D_tuple2[v__1, v__2])),
    forAll v__0 : int(1..n_roads * 8 - 1)
        . valid_ExplicitVarSize_tuple1[v__0] <= valid_ExplicitVarSize_tuple1[v__0 + 1]
