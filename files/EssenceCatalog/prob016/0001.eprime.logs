[handleInfDom] given n_roads: int(1..)
~~>
given n_roads: int(1..MAXINT)
[handleEnums] letting VCol be new type enum {r, ry, g, y}
~~>
letting VCol_fromEnum be domain int(1..4)
[handleEnums] letting PCol be new type enum {pr, pg}
~~>
letting PCol_fromEnum be domain int(1..2)
[representation] find valid: set of function (total) int(1..n_roads) --> (int(1..4), int(1..2))
(#1)
ExplicitVarSize
[configuration] valid§region1#ExplicitVarSize
[addedDecl] find valid_ExplicitVarSize:
        matrix indexed by [int(1..n_roads * 8)] of (bool,
                                                    function (total) int(1..n_roads) --> (int(1..4), int(1..2)))
[applied] {c(rd), c(rd % n_roads + 1)} in {{(1, 1), (3, 2)}, {(2, 1), (4, 1)}}
{rules/refns/set-in-to-quantified.rule}
    {(1, 1), (3, 2)} = {c(rd), c(rd % n_roads + 1)}
    \/
    {(2, 1), (4, 1)} = {c(rd), c(rd % n_roads + 1)}
[applied] {(1, 1), (3, 2)} = {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-eq-to-subsets.rule}
    {(1, 1), (3, 2)} subsetEq {c(rd), c(rd % n_roads + 1)}
    /\
    {(1, 1), (3, 2)} supsetEq {c(rd), c(rd % n_roads + 1)}
[applied] {(1, 1), (3, 2)} subsetEq {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-subseteq-to-quantified.rule}
    (1, 1) in {c(rd), c(rd % n_roads + 1)} /\ (3, 2) in {c(rd), c(rd % n_roads + 1)}
[applied] (1, 1) in {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-in-to-quantified.rule}
    c(rd)[1] = 1 /\ c(rd)[2] = 1
    \/
    c(rd % n_roads + 1)[1] = 1 /\ c(rd % n_roads + 1)[2] = 1
[applied] (3, 2) in {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-in-to-quantified.rule}
    c(rd)[1] = 3 /\ c(rd)[2] = 2
    \/
    c(rd % n_roads + 1)[1] = 3 /\ c(rd % n_roads + 1)[2] = 2
[applied] {(1, 1), (3, 2)} supsetEq {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-supseteq-to-subseteq.rule}
    {c(rd), c(rd % n_roads + 1)} subsetEq {(1, 1), (3, 2)}
[applied] {c(rd), c(rd % n_roads + 1)} subsetEq {(1, 1), (3, 2)}
{rules/refns/set-subseteq-to-quantified.rule}
    c(rd) in {(1, 1), (3, 2)} /\ c(rd % n_roads + 1) in {(1, 1), (3, 2)}
[applied] c(rd) in {(1, 1), (3, 2)}
{rules/refns/set-in-to-quantified.rule}
    1 = c(rd)[1] /\ 1 = c(rd)[2] \/ 3 = c(rd)[1] /\ 2 = c(rd)[2]
[applied] c(rd % n_roads + 1) in {(1, 1), (3, 2)}
{rules/refns/set-in-to-quantified.rule}
    1 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]
    \/
    3 = c(rd % n_roads + 1)[1] /\ 2 = c(rd % n_roads + 1)[2]
[applied] {(2, 1), (4, 1)} = {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-eq-to-subsets.rule}
    {(2, 1), (4, 1)} subsetEq {c(rd), c(rd % n_roads + 1)}
    /\
    {(2, 1), (4, 1)} supsetEq {c(rd), c(rd % n_roads + 1)}
[applied] {(2, 1), (4, 1)} subsetEq {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-subseteq-to-quantified.rule}
    (2, 1) in {c(rd), c(rd % n_roads + 1)} /\ (4, 1) in {c(rd), c(rd % n_roads + 1)}
[applied] (2, 1) in {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-in-to-quantified.rule}
    c(rd)[1] = 2 /\ c(rd)[2] = 1
    \/
    c(rd % n_roads + 1)[1] = 2 /\ c(rd % n_roads + 1)[2] = 1
[applied] (4, 1) in {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-in-to-quantified.rule}
    c(rd)[1] = 4 /\ c(rd)[2] = 1
    \/
    c(rd % n_roads + 1)[1] = 4 /\ c(rd % n_roads + 1)[2] = 1
[applied] {(2, 1), (4, 1)} supsetEq {c(rd), c(rd % n_roads + 1)}
{rules/refns/set-supseteq-to-subseteq.rule}
    {c(rd), c(rd % n_roads + 1)} subsetEq {(2, 1), (4, 1)}
[applied] {c(rd), c(rd % n_roads + 1)} subsetEq {(2, 1), (4, 1)}
{rules/refns/set-subseteq-to-quantified.rule}
    c(rd) in {(2, 1), (4, 1)} /\ c(rd % n_roads + 1) in {(2, 1), (4, 1)}
[applied] c(rd) in {(2, 1), (4, 1)}
{rules/refns/set-in-to-quantified.rule}
    2 = c(rd)[1] /\ 1 = c(rd)[2] \/ 4 = c(rd)[1] /\ 1 = c(rd)[2]
[applied] c(rd % n_roads + 1) in {(2, 1), (4, 1)}
{rules/refns/set-in-to-quantified.rule}
    2 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]
    \/
    4 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]
[applied] (forAll c in valid§region1#ExplicitVarSize
     . (forAll rd : int(1..n_roads)
            . (c(rd)[1] = 1 /\ c(rd)[2] = 1
               \/
               c(rd % n_roads + 1)[1] = 1 /\ c(rd % n_roads + 1)[2] = 1)
              /\
              (c(rd)[1] = 3 /\ c(rd)[2] = 2
               \/
               c(rd % n_roads + 1)[1] = 3 /\ c(rd % n_roads + 1)[2] = 2)
              /\
              ((1 = c(rd)[1] /\ 1 = c(rd)[2] \/ 3 = c(rd)[1] /\ 2 = c(rd)[2])
               /\
               (1 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]
                \/
                3 = c(rd % n_roads + 1)[1] /\ 2 = c(rd % n_roads + 1)[2]))
              \/
              (c(rd)[1] = 2 /\ c(rd)[2] = 1
               \/
               c(rd % n_roads + 1)[1] = 2 /\ c(rd % n_roads + 1)[2] = 1)
              /\
              (c(rd)[1] = 4 /\ c(rd)[2] = 1
               \/
               c(rd % n_roads + 1)[1] = 4 /\ c(rd % n_roads + 1)[2] = 1)
              /\
              ((2 = c(rd)[1] /\ 1 = c(rd)[2] \/ 4 = c(rd)[1] /\ 1 = c(rd)[2])
               /\
               (2 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]
                \/
                4 = c(rd % n_roads + 1)[1] /\ 1 = c(rd % n_roads + 1)[2]))))
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__16 : int(1..n_roads * 8) , valid_ExplicitVarSize§region1[v__16, 1]
         . (forAll rd : int(1..n_roads)
                . (valid_ExplicitVarSize§region1[v__16, 2](rd)[1] = 1
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                   \/
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1] = 1
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2] = 1)
                  /\
                  (valid_ExplicitVarSize§region1[v__16, 2](rd)[1] = 3
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd)[2] = 2
                   \/
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1] = 3
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2] = 2)
                  /\
                  ((1 = valid_ExplicitVarSize§region1[v__16, 2](rd)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd)[2]
                    \/
                    3 = valid_ExplicitVarSize§region1[v__16, 2](rd)[1]
                    /\
                    2 = valid_ExplicitVarSize§region1[v__16, 2](rd)[2])
                   /\
                   (1 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2]
                    \/
                    3 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1]
                    /\
                    2 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2]))
                  \/
                  (valid_ExplicitVarSize§region1[v__16, 2](rd)[1] = 2
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                   \/
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1] = 2
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2] = 1)
                  /\
                  (valid_ExplicitVarSize§region1[v__16, 2](rd)[1] = 4
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd)[2] = 1
                   \/
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1] = 4
                   /\
                   valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2] = 1)
                  /\
                  ((2 = valid_ExplicitVarSize§region1[v__16, 2](rd)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd)[2]
                    \/
                    4 = valid_ExplicitVarSize§region1[v__16, 2](rd)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd)[2])
                   /\
                   (2 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2]
                    \/
                    4 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[1]
                    /\
                    1 = valid_ExplicitVarSize§region1[v__16, 2](rd % n_roads + 1)[2]))))
[applied] valid_ExplicitVarSize§region1[v__1, 2] != valid_ExplicitVarSize§region1[v__2, 2]
{rules/refns/neq-to-eq.rule}
    !(valid_ExplicitVarSize§region1[v__1, 2]
      =
      valid_ExplicitVarSize§region1[v__2, 2])
[applied] valid_ExplicitVarSize§region1[v__1, 2] = valid_ExplicitVarSize§region1[v__2, 2]
{rules/refns/function-eq.rule}
    (forAll v__17 in defined(valid_ExplicitVarSize§region1[v__1, 2])
         . valid_ExplicitVarSize§region1[v__1, 2](v__17)[1]
           =
           valid_ExplicitVarSize§region1[v__2, 2](v__17)[1]
           /\
           valid_ExplicitVarSize§region1[v__1, 2](v__17)[2]
           =
           valid_ExplicitVarSize§region1[v__2, 2](v__17)[2])
[applied] (forAll v__17 in defined(valid_ExplicitVarSize§region1[v__1, 2])
     . valid_ExplicitVarSize§region1[v__1, 2](v__17)[1]
       =
       valid_ExplicitVarSize§region1[v__2, 2](v__17)[1]
       /\
       valid_ExplicitVarSize§region1[v__1, 2](v__17)[2]
       =
       valid_ExplicitVarSize§region1[v__2, 2](v__17)[2])
{rules/refns/function-defined-quantified.rule}
    (forAll v__18 in toSet(valid_ExplicitVarSize§region1[v__1, 2])
         . valid_ExplicitVarSize§region1[v__1, 2](v__18[1])[1]
           =
           valid_ExplicitVarSize§region1[v__2, 2](v__18[1])[1]
           /\
           valid_ExplicitVarSize§region1[v__1, 2](v__18[1])[2]
           =
           valid_ExplicitVarSize§region1[v__2, 2](v__18[1])[2])
[removedDecl] find valid_ExplicitVarSize:
        matrix indexed by [int(1..n_roads * 8)] of (bool,
                                                    function (total) int(1..n_roads) --> (int(1..4), int(1..2)))
[removedDecl] find valid: set of function (total) int(1..n_roads) --> (int(1..4), int(1..2))
[representation] find valid_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..n_roads * 8)] of function (total)
                                                       int(1..n_roads) --> (int(1..4), int(1..2))
(#2)
AsReln, Matrix1D
[configuration] valid_ExplicitVarSize_tuple2§region1#Matrix1D
[addedDecl] find valid_ExplicitVarSize_tuple2_Matrix1D:
        matrix indexed by [int(1..n_roads * 8), int(1..n_roads)] of (int(1..4),
                                                                     int(1..2))
[applied] valid_ExplicitVarSize_tuple2§region1#Matrix1D[v__1](v__18[1])
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__1, v__18[1]]
[applied] valid_ExplicitVarSize_tuple2§region1#Matrix1D[v__2](v__18[1])
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__2, v__18[1]]
[applied] (forAll v__18 in toSet(valid_ExplicitVarSize_tuple2§region1#Matrix1D[v__1])
     . valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__1, v__18[1], 1]
       =
       valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__2, v__18[1], 1]
       /\
       valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__1, v__18[1], 2]
       =
       valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__2, v__18[1], 2])
{rules/refns/function-matrix1d/function-toSet-quantified.rule}
    (forAll v__3 : int(1..n_roads)
         . valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__1, v__3, 1]
           =
           valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__2, v__3, 1]
           /\
           valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__1, v__3, 2]
           =
           valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__2, v__3, 2])
[applied] valid_ExplicitVarSize_tuple2§region1#Matrix1D[v__16](rd)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__16, rd]
[applied] valid_ExplicitVarSize_tuple2§region1#Matrix1D[v__16](rd % n_roads + 1)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    valid_ExplicitVarSize_tuple2_Matrix1D§region1[v__16, rd % n_roads + 1]
[removedDecl] find valid_ExplicitVarSize_tuple2_Matrix1D:
        matrix indexed by [int(1..n_roads * 8), int(1..n_roads)] of (int(1..4),
                                                                     int(1..2))
[removedDecl] find valid_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..n_roads * 8)] of function (total)
                                                       int(1..n_roads) --> (int(1..4), int(1..2))