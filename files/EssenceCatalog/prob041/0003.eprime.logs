[handleInfDom] given n: int(1..)
~~>
given n: int(1..MAXINT)
[representation] find assign: function (total, surjective) int(1..3 * n) --> int(1..9)
(#2)
AsReln, Matrix1D
[configuration] assign§region1#Matrix1D assign§region3#AsReln assign§region4#Matrix1D assign§region2#Matrix1D
[addedDecl] find assign_Matrix1D: matrix indexed by [int(1..3 * n)] of int(1..9)
[addedDecl] find assign_AsReln: relation of (int(1..3 * n) * int(1..9))
[applied] assign§region1#Matrix1D(3 * i + 1)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    assign_Matrix1D§region1[3 * i + 1]
[applied] assign§region2#Matrix1D(3 * i + 2)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    assign_Matrix1D§region2[3 * i + 2]
[applied] assign§region3#AsReln(3 * i + 3)
{rules/refns/function-asreln/function-asreln-image-int.rule}
    (sum v__5 in toSet(assign_AsReln§region3) , v__5[1] = 3 * i + 3 . v__5[2])
[applied] assign§region4#Matrix1D(i)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    assign_Matrix1D§region4[i]
[applied] assign#AsReln = assign#Matrix1D
{rules/refns/function-eq.rule}
    (forAll v__6 in defined(assign#AsReln)
         . assign#AsReln(v__6) = assign#Matrix1D(v__6))
[applied] assign#AsReln(v__6)
{rules/refns/function-asreln/function-asreln-image-int.rule}
    (sum v__7 in toSet(assign_AsReln) , v__7[1] = v__6 . v__7[2])
[applied] assign#Matrix1D(v__6)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    assign_Matrix1D[v__6]
[applied] (forAll v__6 in defined(assign#AsReln)
     . (sum v__7 in toSet(assign_AsReln) , v__7[1] = v__6 . v__7[2])
       =
       assign_Matrix1D[v__6])
{rules/refns/function-defined-quantified.rule}
    (forAll v__8 in toSet(assign#AsReln)
         . (sum v__7 in toSet(assign_AsReln) , v__7[1] = v__8[1] . v__7[2])
           =
           assign_Matrix1D[v__8[1]])
[applied] (forAll v__8 in toSet(assign#AsReln)
     . (sum v__7 in toSet(assign_AsReln) , v__7[1] = v__8[1] . v__7[2])
       =
       assign_Matrix1D[v__8[1]])
{rules/refns/function-asreln/function-toSet-quantified.rule}
    (forAll v__8 in toSet(assign_AsReln)
         . (sum v__7 in toSet(assign_AsReln) , v__7[1] = v__8[1] . v__7[2])
           =
           assign_Matrix1D[v__8[1]])
[removedDecl] find assign: function (total, surjective) int(1..3 * n) --> int(1..9)
[representation] find assign_AsReln: relation of (int(1..3 * n) * int(1..9)) (#1) RelationAsSet
[configuration] assign_AsReln§region2#RelationAsSet assign_AsReln§region3#RelationAsSet assign_AsReln§region1#RelationAsSet
[addedDecl] find assign_AsReln_RelationAsSet: set of (int(1..3 * n), int(1..9))
[applied] (sum v__5 in toSet(assign_AsReln§region3#RelationAsSet) , v__5[1] = 3 * i + 3
     . v__5[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__5 in assign_AsReln_RelationAsSet§region3 , v__5[1] = 3 * i + 3
         . v__5[2])
[applied] (sum v__2 in toSet(assign_AsReln§region3#RelationAsSet) . v__1 = v__2[1])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__2 in assign_AsReln_RelationAsSet§region3 . v__1 = v__2[1])
[applied] (exists v__2 in toSet(assign_AsReln§region3#RelationAsSet) . v__1 = v__2[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (exists v__2 in assign_AsReln_RelationAsSet§region3 . v__1 = v__2[2])
[applied] (sum v__7 in toSet(assign_AsReln§region2#RelationAsSet) , v__7[1] = v__8[1]
     . v__7[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__7 in assign_AsReln_RelationAsSet§region2 , v__7[1] = v__8[1] . v__7[2])
[applied] (forAll v__8 in toSet(assign_AsReln§region1#RelationAsSet)
     . (sum v__7 in assign_AsReln_RelationAsSet§region2 , v__7[1] = v__8[1]
            . v__7[2])
       =
       assign_Matrix1D[v__8[1]])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (forAll v__8 in assign_AsReln_RelationAsSet§region1
         . (sum v__7 in assign_AsReln_RelationAsSet§region2 , v__7[1] = v__8[1]
                . v__7[2])
           =
           assign_Matrix1D[v__8[1]])
[removedDecl] find assign_AsReln: relation of (int(1..3 * n) * int(1..9))
[representation] find assign_AsReln_RelationAsSet: set of (int(1..3 * n), int(1..9))
(#1)
ExplicitVarSize
[configuration] assign_AsReln_RelationAsSet§region1#ExplicitVarSize assign_AsReln_RelationAsSet§region2#ExplicitVarSize assign_AsReln_RelationAsSet§region3#ExplicitVarSize
[addedDecl] find assign_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..3 * n * 9)] of (bool, (int(1..3 * n), int(1..9)))
[applied] (sum v__5 in assign_AsReln_RelationAsSet§region3#ExplicitVarSize
     , v__5[1] = 3 * i + 3
     . v__5[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__10 : int(1..3 * n * 9)
         , assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__10, 2, 1] = 3 * i + 3
           /\
           assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__10, 1]
         . assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__10, 2, 2])
[applied] (sum v__2 in assign_AsReln_RelationAsSet§region3#ExplicitVarSize
     . v__1 = v__2[1])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__11 : int(1..3 * n * 9)
         , assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__11, 1]
         . v__1 = assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__11, 2, 1])
[applied] (exists v__2 in assign_AsReln_RelationAsSet§region3#ExplicitVarSize
     . v__1 = v__2[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (exists v__12 : int(1..3 * n * 9)
         , assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__12, 1]
         . v__1 = assign_AsReln_RelationAsSet_ExplicitVarSize§region3[v__12, 2, 2])
[applied] (sum v__7 in assign_AsReln_RelationAsSet§region2#ExplicitVarSize
     , v__7[1] = v__8[1]
     . v__7[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__13 : int(1..3 * n * 9)
         , assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 1] = v__8[1]
           /\
           assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 1]
         . assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 2])
[applied] (forAll v__8 in assign_AsReln_RelationAsSet§region1#ExplicitVarSize
     . (sum v__13 : int(1..3 * n * 9)
            , assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 1] = v__8[1]
              /\
              assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 1]
            . assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 2])
       =
       assign_Matrix1D[v__8[1]])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__14 : int(1..3 * n * 9)
         , assign_AsReln_RelationAsSet_ExplicitVarSize§region1[v__14, 1]
         . (sum v__13 : int(1..3 * n * 9)
                , assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 1]
                  =
                  assign_AsReln_RelationAsSet_ExplicitVarSize§region1[v__14, 2, 1]
                  /\
                  assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 1]
                . assign_AsReln_RelationAsSet_ExplicitVarSize§region2[v__13, 2, 2])
           =
           assign_Matrix1D[assign_AsReln_RelationAsSet_ExplicitVarSize§region1[v__14,
                                                                               2,
                                                                               1]])
[removedDecl] find assign_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..3 * n * 9)] of (bool, (int(1..3 * n), int(1..9)))
[removedDecl] find assign_AsReln_RelationAsSet_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..3 * n * 9)] of (int(1..3 * n), int(1..9))
[removedDecl] find assign_AsReln_RelationAsSet: set of (int(1..3 * n), int(1..9))