language ESSENCE' 1.0

given n_colours: int(1..)
given n_orders: int(1..)
given col_per_slab: int(1..)
given sizes_size: int(1..)
given sizes new domain int
given ordsize_Matrix1D: matrix indexed by [int(1..n_orders)] of int(1..)
given ordcol_Matrix1D: matrix indexed by [int(1..n_orders)] of int(1..n_colours)
find cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2 ** n_orders * sizes_size)] of bool
find cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence:
        matrix indexed by [int(1..2 ** n_orders * sizes_size), int(1..n_orders)] of bool
find cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..2 ** n_orders * sizes_size)] of sizes
minimising sum v__0 : int(1..2 ** n_orders * sizes_size)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
                 *
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__0]
such that
    forAll o : int(1..n_orders)
        . (exists v__0 : int(1..2 ** n_orders * sizes_size)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
                 /\
                 (exists v__1 : int(1..n_orders)
                      . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__1]
                        /\
                        v__1 = o)),
    forAll v__0 : int(1..2 ** n_orders * sizes_size)
        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..n_orders)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__1]
                 *
                 ordcol_Matrix1D[v__1])
          <=
          col_per_slab,
    forAll v__0 : int(1..2 ** n_orders * sizes_size)
        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..n_orders)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__1]
                 *
                 ordsize_Matrix1D[v__1])
          <=
          cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__0],
    forAll v__0 : int(1..2 ** n_orders * sizes_size)
        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..n_orders)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__1]
                 *
                 ordsize_Matrix1D[v__1])
          <=
          (sum v__1 : int(1..2 ** n_orders * sizes_size)
               . ((forAll v__2 : int(1..n_orders)
                       . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__2]
                         ->
                         (exists v__3 : int(1..n_orders)
                              . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__3]
                                /\
                                v__3 = v__2))
                  /\
                  (forAll v__2 : int(1..n_orders)
                       . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__2]
                         ->
                         (exists v__3 : int(1..n_orders)
                              . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__3]
                                /\
                                v__3 = v__2))
                  /\
                  cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__1])
                 *
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__1]),
    forAll v__0 : int(1..2 ** n_orders * sizes_size)
        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
          ->
          (forAll v__1 : int(1..2 ** n_orders * sizes_size)
               . !((forAll v__2 : int(1..n_orders)
                        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__2]
                          ->
                          (exists v__3 : int(1..n_orders)
                               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__3]
                                 /\
                                 v__3 = v__2))
                   /\
                   (forAll v__2 : int(1..n_orders)
                        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__2]
                          ->
                          (exists v__3 : int(1..n_orders)
                               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__3]
                                 /\
                                 v__3 = v__2)))
                 /\
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__1]
                 ->
                 (sum v__2 : int(1..n_orders)
                      . ((exists v__3 : int(1..n_orders)
                              . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__3]
                                /\
                                v__3 = v__2)
                         /\
                         cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__2])
                        *
                        1)
                 =
                 0),
    forAll v__0 : int(1..2 ** n_orders * sizes_size)
        . (forAll v__1 : int(1..2 ** n_orders * sizes_size)
               . v__0 < v__1 /\ cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
                 /\
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__1]
                 ->
                 !((forAll v__2 : int(1..n_orders)
                        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__2]
                          ->
                          (exists v__3 : int(1..n_orders)
                               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__3]
                                 /\
                                 v__3 = v__2))
                   /\
                   (forAll v__2 : int(1..n_orders)
                        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__2]
                          ->
                          (exists v__3 : int(1..n_orders)
                               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0, v__3]
                                 /\
                                 v__3 = v__2)))
                 \/
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__0]
                 !=
                 cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__1]),
    forAll v__0 : int(1..2 ** n_orders * sizes_size - 1)
        . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0]
          <=
          cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : matrix indexed by [int(1..n_orders)] of bool
        . (sum v__1 : int(1..2 ** n_orders * sizes_size)
               . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__1]
                 *
                 ((forAll v__2 : int(1..n_orders)
                       . v__0[v__2]
                         ->
                         (exists v__3 : int(1..n_orders)
                              . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__3]
                                /\
                                v__3 = v__2))
                  /\
                  (forAll v__2 : int(1..n_orders)
                       . cut_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__1, v__2]
                         ->
                         (exists v__3 : int(1..n_orders) . v__0[v__3] /\ v__3 = v__2))))
          <=
          1
