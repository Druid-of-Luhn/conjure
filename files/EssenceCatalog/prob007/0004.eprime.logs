[handleInfDom] given n: int(1..)
~~>
given n: int(1..MAXINT)
[representation] find s: function (total, bijective) int(1..n) --> int(0..n - 1)
(#2)
AsReln, Matrix1D
[representation] find v: function (total, bijective) int(1..n - 1) --> int(1..n - 1)
(#2)
AsReln, Matrix1D
[configuration] s§region3#AsReln v§region1#Matrix1D s§region2#Matrix1D
[addedDecl] find s_AsReln: relation of (int(1..n) * int(0..n - 1))
[addedDecl] find s_Matrix1D: matrix indexed by [int(1..n)] of int(0..n - 1)
[addedDecl] find v_Matrix1D: matrix indexed by [int(1..n - 1)] of int(1..n - 1)
[applied] v§region1#Matrix1D(i)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    v_Matrix1D§region1[i]
[applied] s§region2#Matrix1D(i + 1)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    s_Matrix1D§region2[i + 1]
[applied] s§region3#AsReln(i)
{rules/refns/function-asreln/function-asreln-image.rule}
    (sum v__5 in toSet(s_AsReln§region3) , v__5[1] = i . v__5[2])
[applied] s#AsReln = s#Matrix1D
{rules/refns/function-eq.rule}
    (forAll v__6 in defined(s#AsReln) . s#AsReln(v__6) = s#Matrix1D(v__6))
[applied] s#AsReln(v__6)
{rules/refns/function-asreln/function-asreln-image.rule}
    (sum v__9 in toSet(s_AsReln) , v__9[1] = v__6 . v__9[2])
[applied] s#Matrix1D(v__6)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    s_Matrix1D[v__6]
[applied] (forAll v__6 in defined(s#AsReln)
     . (sum v__9 in toSet(s_AsReln) , v__9[1] = v__6 . v__9[2]) = s_Matrix1D[v__6])
{rules/refns/function-defined-quantified.rule}
    (forAll v__10 in toSet(s#AsReln)
         . (sum v__9 in toSet(s_AsReln) , v__9[1] = v__10[1] . v__9[2])
           =
           s_Matrix1D[v__10[1]])
[applied] (forAll v__10 in toSet(s#AsReln)
     . (sum v__9 in toSet(s_AsReln) , v__9[1] = v__10[1] . v__9[2])
       =
       s_Matrix1D[v__10[1]])
{rules/refns/function-asreln/function-toSet-quantified.rule}
    (forAll v__10 in toSet(s_AsReln)
         . (sum v__9 in toSet(s_AsReln) , v__9[1] = v__10[1] . v__9[2])
           =
           s_Matrix1D[v__10[1]])
[removedDecl] find v: function (total, bijective) int(1..n - 1) --> int(1..n - 1)
[removedDecl] find s: function (total, bijective) int(1..n) --> int(0..n - 1)
[representation] find s_AsReln: relation of (int(1..n) * int(0..n - 1)) (#1) RelationAsSet
[configuration] s_AsReln§region1#RelationAsSet s_AsReln§region2#RelationAsSet s_AsReln§region3#RelationAsSet
[addedDecl] find s_AsReln_RelationAsSet: set of (int(1..n), int(0..n - 1))
[applied] (sum v__5 in toSet(s_AsReln§region3#RelationAsSet) , v__5[1] = i . v__5[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__5 in s_AsReln_RelationAsSet§region3 , v__5[1] = i . v__5[2])
[applied] (forAll v__2 in toSet(s_AsReln§region3#RelationAsSet) , v__1[1] != v__2[1]
     . v__1[2] != v__2[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (forAll v__2 in s_AsReln_RelationAsSet§region3 , v__1[1] != v__2[1]
         . v__1[2] != v__2[2])
[applied] (forAll v__1 in toSet(s_AsReln§region3#RelationAsSet)
     . (forAll v__2 in s_AsReln_RelationAsSet§region3 , v__1[1] != v__2[1]
            . v__1[2] != v__2[2]))
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (forAll v__1 in s_AsReln_RelationAsSet§region3
         . (forAll v__2 in s_AsReln_RelationAsSet§region3 , v__1[1] != v__2[1]
                . v__1[2] != v__2[2]))
[applied] (exists v__2 in toSet(s_AsReln§region3#RelationAsSet) . v__1 = v__2[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (exists v__2 in s_AsReln_RelationAsSet§region3 . v__1 = v__2[2])
[applied] (sum v__2 in toSet(s_AsReln§region3#RelationAsSet) . v__1 = v__2[1])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__2 in s_AsReln_RelationAsSet§region3 . v__1 = v__2[1])
[applied] (sum v__9 in toSet(s_AsReln§region2#RelationAsSet) , v__9[1] = v__10[1]
     . v__9[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__9 in s_AsReln_RelationAsSet§region2 , v__9[1] = v__10[1] . v__9[2])
[applied] (forAll v__10 in toSet(s_AsReln§region1#RelationAsSet)
     . (sum v__9 in s_AsReln_RelationAsSet§region2 , v__9[1] = v__10[1] . v__9[2])
       =
       s_Matrix1D[v__10[1]])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (forAll v__10 in s_AsReln_RelationAsSet§region1
         . (sum v__9 in s_AsReln_RelationAsSet§region2 , v__9[1] = v__10[1] . v__9[2])
           =
           s_Matrix1D[v__10[1]])
[removedDecl] find s_AsReln: relation of (int(1..n) * int(0..n - 1))
[representation] find s_AsReln_RelationAsSet: set of (int(1..n), int(0..n - 1))
(#1)
ExplicitVarSize
[configuration] s_AsReln_RelationAsSet§region2#ExplicitVarSize s_AsReln_RelationAsSet§region3#ExplicitVarSize s_AsReln_RelationAsSet§region1#ExplicitVarSize
[addedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n * n)] of (bool, (int(1..n), int(0..n - 1)))
[applied] (sum v__5 in s_AsReln_RelationAsSet§region3#ExplicitVarSize , v__5[1] = i
     . v__5[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__12 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__12, 2, 1] = i
           /\
           s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__12, 1]
         . s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__12, 2, 2])
[applied] (forAll v__2 in s_AsReln_RelationAsSet§region3#ExplicitVarSize
     , v__1[1] != v__2[1]
     . v__1[2] != v__2[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__13 : int(1..n * n)
         , v__1[1] != s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 1]
           /\
           s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 1]
         . v__1[2] != s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 2])
[applied] (forAll v__1 in s_AsReln_RelationAsSet§region3#ExplicitVarSize
     . (forAll v__13 : int(1..n * n)
            , v__1[1] != s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 1]
              /\
              s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 1]
            . v__1[2] != s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 2]))
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__14 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__14, 1]
         . (forAll v__13 : int(1..n * n)
                , s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__14, 2, 1]
                  !=
                  s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 1]
                  /\
                  s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 1]
                . s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__14, 2, 2]
                  !=
                  s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__13, 2, 2]))
[applied] (exists v__2 in s_AsReln_RelationAsSet§region3#ExplicitVarSize . v__1 = v__2[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (exists v__15 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__15, 1]
         . v__1 = s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__15, 2, 2])
[applied] (sum v__2 in s_AsReln_RelationAsSet§region3#ExplicitVarSize . v__1 = v__2[1])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__16 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__16, 1]
         . v__1 = s_AsReln_RelationAsSet_ExplicitVarSize§region3[v__16, 2, 1])
[applied] (sum v__9 in s_AsReln_RelationAsSet§region2#ExplicitVarSize , v__9[1] = v__10[1]
     . v__9[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__17 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1] = v__10[1]
           /\
           s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
         . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
[applied] (forAll v__10 in s_AsReln_RelationAsSet§region1#ExplicitVarSize
     . (sum v__17 : int(1..n * n)
            , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1] = v__10[1]
              /\
              s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
            . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
       =
       s_Matrix1D[v__10[1]])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__18 : int(1..n * n)
         , s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 1]
         . (sum v__17 : int(1..n * n)
                , s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1]
                  =
                  s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 2, 1]
                  /\
                  s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
                . s_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
           =
           s_Matrix1D[s_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 2, 1]])
[removedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n * n)] of (bool, (int(1..n), int(0..n - 1)))
[removedDecl] find s_AsReln_RelationAsSet_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..n * n)] of (int(1..n), int(0..n - 1))
[removedDecl] find s_AsReln_RelationAsSet: set of (int(1..n), int(0..n - 1))