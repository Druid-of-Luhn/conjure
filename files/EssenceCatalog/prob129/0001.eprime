language ESSENCE' 1.0

given MAXINT: int
given nrings: int(1..MAXINT)
given nnodes: int(1..MAXINT)
given capacity: int(1..MAXINT)
given demand_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2 ** nnodes)] of bool
given demand_ExplicitVarSize_tuple2_Occurrence:
        matrix indexed by [int(1..2 ** nnodes), int(1..nnodes)] of bool
find network_Explicit_Occurrence:
        matrix indexed by [int(1..nrings), int(1..nnodes)] of bool
minimising sum v__0 : int(1..nrings)
               . (sum v__1 : int(1..nnodes) . network_Explicit_Occurrence[v__0, v__1] * 1)
such that
    forAll v__0 : int(1..2 ** nnodes)
        . demand_ExplicitVarSize_tuple1[v__0]
          ->
          (exists v__1 : int(1..nrings)
               . (forAll v__2 : int(1..nnodes)
                      . demand_ExplicitVarSize_tuple2_Occurrence[v__0, v__2]
                        ->
                        (exists v__3 : int(1..nnodes)
                             . network_Explicit_Occurrence[v__1, v__3] /\ v__3 = v__2))),
    forAll v__0 : int(1..2 ** nnodes)
        . (sum v__1 : int(1..nnodes)
               . demand_ExplicitVarSize_tuple2_Occurrence[v__0, v__1])
          =
          2,
    forAll v__0 : int(1..2 ** nnodes)
        . (forAll v__1 : int(1..2 ** nnodes)
               . v__0 < v__1 /\ demand_ExplicitVarSize_tuple1[v__0]
                 /\
                 demand_ExplicitVarSize_tuple1[v__1]
                 ->
                 !((forAll v__2 : int(1..nnodes)
                        . demand_ExplicitVarSize_tuple2_Occurrence[v__0, v__2]
                          ->
                          (exists v__3 : int(1..nnodes)
                               . demand_ExplicitVarSize_tuple2_Occurrence[v__1, v__3] /\ v__3 = v__2))
                   /\
                   (forAll v__2 : int(1..nnodes)
                        . demand_ExplicitVarSize_tuple2_Occurrence[v__1, v__2]
                          ->
                          (exists v__3 : int(1..nnodes)
                               . demand_ExplicitVarSize_tuple2_Occurrence[v__0, v__3] /\ v__3 = v__2)))),
    forAll v__0 : int(1..2 ** nnodes - 1)
        . demand_ExplicitVarSize_tuple1[v__0]
          <=
          demand_ExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..nrings)
        . (sum v__1 : int(1..nnodes) . network_Explicit_Occurrence[v__0, v__1])
          <=
          capacity
