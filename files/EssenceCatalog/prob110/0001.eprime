language ESSENCE' 1.0

given MAXINT: int
given n: int(1..MAXINT)
find black_ExplicitVarSize_tuple1: matrix indexed by [int(1..n * n)] of bool
find black_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..n * n)] of int(1..n)
find black_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..n * n)] of int(1..n)
find white_ExplicitVarSize_tuple1: matrix indexed by [int(1..n * n)] of bool
find white_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..n * n)] of int(1..n)
find white_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..n * n)] of int(1..n)
maximising (sum v__0 : int(1..n * n) . black_ExplicitVarSize_tuple1[v__0] * 1)
           +
           (sum v__0 : int(1..n * n) . white_ExplicitVarSize_tuple1[v__0] * 1)
such that
    (sum v__0 : int(1..n * n) . black_ExplicitVarSize_tuple1[v__0] * 1)
    =
    (sum v__0 : int(1..n * n) . white_ExplicitVarSize_tuple1[v__0] * 1),
    forAll v__0 : int(1..n * n)
        . black_ExplicitVarSize_tuple1[v__0]
          ->
          (forAll v__1 : int(1..n * n)
               . white_ExplicitVarSize_tuple1[v__1]
                 ->
                 black_ExplicitVarSize_tuple2_tuple1[v__0]
                 !=
                 white_ExplicitVarSize_tuple2_tuple1[v__1]
                 /\
                 black_ExplicitVarSize_tuple2_tuple2[v__0]
                 !=
                 white_ExplicitVarSize_tuple2_tuple2[v__1]
                 /\
                 |white_ExplicitVarSize_tuple2_tuple1[v__1]
                  -
                  black_ExplicitVarSize_tuple2_tuple1[v__0]|
                 !=
                 |white_ExplicitVarSize_tuple2_tuple2[v__1]
                  -
                  black_ExplicitVarSize_tuple2_tuple2[v__0]|),
    forAll v__0 : int(1..n * n)
        . (forAll v__1 : int(1..n * n)
               . v__0 < v__1 /\ black_ExplicitVarSize_tuple1[v__0]
                 /\
                 black_ExplicitVarSize_tuple1[v__1]
                 ->
                 black_ExplicitVarSize_tuple2_tuple1[v__0]
                 !=
                 black_ExplicitVarSize_tuple2_tuple1[v__1]
                 \/
                 black_ExplicitVarSize_tuple2_tuple2[v__0]
                 !=
                 black_ExplicitVarSize_tuple2_tuple2[v__1]),
    forAll v__0 : int(1..n * n)
        . (forAll v__1 : int(1..n * n)
               . v__0 < v__1 /\ white_ExplicitVarSize_tuple1[v__0]
                 /\
                 white_ExplicitVarSize_tuple1[v__1]
                 ->
                 white_ExplicitVarSize_tuple2_tuple1[v__0]
                 !=
                 white_ExplicitVarSize_tuple2_tuple1[v__1]
                 \/
                 white_ExplicitVarSize_tuple2_tuple2[v__0]
                 !=
                 white_ExplicitVarSize_tuple2_tuple2[v__1]),
    forAll v__0 : int(1..n * n - 1)
        . black_ExplicitVarSize_tuple1[v__0] <= black_ExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..n * n - 1)
        . white_ExplicitVarSize_tuple1[v__0] <= white_ExplicitVarSize_tuple1[v__0 + 1]
