[handleInfDom] given n_stores: int(1..)
~~>
given n_stores: int(1..MAXINT)
[handleInfDom] given n_warehouses: int(1..)
~~>
given n_warehouses: int(1..MAXINT)
[handleInfDom] given fixed_cost: int(1..)
~~>
given fixed_cost: int(1..MAXINT)
[handleInfDom] given capacity: function (total) WHouse --> int(1..)
~~>
given capacity: function (total) WHouse --> int(1..MAXINT)
[handleInfDom] given cost: function (total) (Store, WHouse) --> int(1..)
~~>
given cost: function (total) (Store, WHouse) --> int(1..MAXINT)
[representation] find open: function (total) int(1..n_stores) --> int(1..n_warehouses)
(#2)
AsReln, Matrix1D
[representation] given capacity: function (total) int(1..n_warehouses) --> int(1..MAXINT)
(#2)
AsReln, Matrix1D
[representation] given cost:
        function (total) (int(1..n_stores), int(1..n_warehouses)) --> int(1..MAXINT)
(#1)
AsReln
[configuration] open§region3#Matrix1D open§region4#Matrix1D capacity§region5#Matrix1D cost§region2#AsReln open§region1#AsReln
[addedDecl] given capacity_Matrix1D:
        matrix indexed by [int(1..n_warehouses)] of int(1..MAXINT)
[addedDecl] find open_Matrix1D: matrix indexed by [int(1..n_stores)] of int(1..n_warehouses)
[addedDecl] given cost_AsReln:
        relation of ((int(1..n_stores), int(1..n_warehouses)) * int(1..MAXINT))
[addedDecl] find open_AsReln: relation of (int(1..n_stores) * int(1..n_warehouses))
[applied] |range(open§region1#AsReln)|
{rules/refns/set-card.rule}
    (sum v__3 in range(open§region1#AsReln) . 1)
[applied] (sum v__3 in range(open§region1#AsReln) . 1)
{rules/refns/function-range-quantified.rule}
    (sum v__4 in toSet(open§region1#AsReln) . 1)
[applied] (sum v__4 in toSet(open§region1#AsReln) . 1)
{rules/refns/function-asreln/function-toSet-quantified.rule}
    (sum v__4 in toSet(open_AsReln§region1) . 1)
[applied] open§region3#Matrix1D(s)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    open_Matrix1D§region3[s]
[applied] cost§region2#AsReln((s, open_Matrix1D§region3[s]))
{rules/refns/function-asreln/function-asreln-image-int.rule}
    (sum v__7 in toSet(cost_AsReln§region2)
         , v__7[1, 1] = s /\ v__7[1, 2] = open_Matrix1D§region3[s]
         . v__7[2])
[applied] |preImage(open§region4#Matrix1D, w)|
{rules/refns/set-card.rule}
    (sum v__8 in preImage(open§region4#Matrix1D, w) . 1)
[applied] (sum v__8 in preImage(open§region4#Matrix1D, w) . 1)
{rules/refns/function-preImage-quantified.rule}
    (sum v__9 : int(1..n_stores) , open§region4#Matrix1D(v__9) = w . 1)
[applied] open§region4#Matrix1D(v__9)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    open_Matrix1D§region4[v__9]
[applied] capacity§region5#Matrix1D(w)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    capacity_Matrix1D§region5[w]
[applied] open#AsReln = open#Matrix1D
{rules/refns/function-eq.rule}
    (forAll v__10 in defined(open#AsReln)
         . open#AsReln(v__10) = open#Matrix1D(v__10))
[applied] open#AsReln(v__10)
{rules/refns/function-asreln/function-asreln-image-int.rule}
    (sum v__11 in toSet(open_AsReln) , v__11[1] = v__10 . v__11[2])
[applied] open#Matrix1D(v__10)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    open_Matrix1D[v__10]
[applied] (forAll v__10 in defined(open#AsReln)
     . (sum v__11 in toSet(open_AsReln) , v__11[1] = v__10 . v__11[2])
       =
       open_Matrix1D[v__10])
{rules/refns/function-defined-quantified.rule}
    (forAll v__12 in toSet(open#AsReln)
         . (sum v__11 in toSet(open_AsReln) , v__11[1] = v__12[1] . v__11[2])
           =
           open_Matrix1D[v__12[1]])
[applied] (forAll v__12 in toSet(open#AsReln)
     . (sum v__11 in toSet(open_AsReln) , v__11[1] = v__12[1] . v__11[2])
       =
       open_Matrix1D[v__12[1]])
{rules/refns/function-asreln/function-toSet-quantified.rule}
    (forAll v__12 in toSet(open_AsReln)
         . (sum v__11 in toSet(open_AsReln) , v__11[1] = v__12[1] . v__11[2])
           =
           open_Matrix1D[v__12[1]])
[builtIn.tupleDomInQuantification] (forAll v__6 : (int(1..n_stores), int(1..n_warehouses))
     . (sum v__5 in toSet(cost_AsReln§region2)
            . v__6[1] = v__5[1, 1] /\ v__6[2] = v__5[1, 2])
       =
       1)
~~>
(forAll v__13 : int(1..n_stores)
     . (forAll v__14 : int(1..n_warehouses)
            . (sum v__5 in toSet(cost_AsReln§region2)
                   . (v__13, v__14)[1] = v__5[1, 1] /\ (v__13, v__14)[2] = v__5[1, 2])
              =
              1))
[applied] (forAll v__6 : (int(1..n_stores), int(1..n_warehouses))
     . (sum v__5 in toSet(cost_AsReln§region2)
            . v__6[1] = v__5[1, 1] /\ v__6[2] = v__5[1, 2])
       =
       1)
{builtIn.tupleDomInQuantification}
    (forAll v__13 : int(1..n_stores)
         . (forAll v__14 : int(1..n_warehouses)
                . (sum v__5 in toSet(cost_AsReln§region2)
                       . v__13 = v__5[1, 1] /\ v__14 = v__5[1, 2])
                  =
                  1))
[removedDecl] find open: function (total) int(1..n_stores) --> int(1..n_warehouses)
[removedDecl] given cost:
        function (total) (int(1..n_stores), int(1..n_warehouses)) --> int(1..MAXINT)
[removedDecl] given capacity: function (total) int(1..n_warehouses) --> int(1..MAXINT)
[representation] find open_AsReln: relation of (int(1..n_stores) * int(1..n_warehouses))
(#1)
RelationAsSet
[representation] given cost_AsReln:
        relation of ((int(1..n_stores), int(1..n_warehouses)) * int(1..MAXINT))
(#1)
RelationAsSet
[configuration] open_AsReln§region2#RelationAsSet cost_AsReln§region2#RelationAsSet open_AsReln§region1#RelationAsSet cost_AsReln§region3#RelationAsSet
[addedDecl] given cost_AsReln_RelationAsSet:
        set of ((int(1..n_stores), int(1..n_warehouses)), int(1..MAXINT))
[addedDecl] find open_AsReln_RelationAsSet: set of (int(1..n_stores), int(1..n_warehouses))
[applied] (sum v__4 in toSet(open_AsReln§region1#RelationAsSet) . 1)
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__4 in open_AsReln_RelationAsSet§region1 . 1)
[applied] (sum v__7 in toSet(cost_AsReln§region2#RelationAsSet)
     , v__7[1, 1] = s /\ v__7[1, 2] = open_Matrix1D§region3[s]
     . v__7[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__7 in cost_AsReln_RelationAsSet§region2
         , v__7[1, 1] = s /\ v__7[1, 2] = open_Matrix1D§region3[s]
         . v__7[2])
[applied] (sum v__11 in toSet(open_AsReln§region2#RelationAsSet) , v__11[1] = v__12[1]
     . v__11[2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__11 in open_AsReln_RelationAsSet§region2 , v__11[1] = v__12[1]
         . v__11[2])
[applied] (forAll v__12 in toSet(open_AsReln§region1#RelationAsSet)
     . (sum v__11 in open_AsReln_RelationAsSet§region2 , v__11[1] = v__12[1]
            . v__11[2])
       =
       open_Matrix1D[v__12[1]])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (forAll v__12 in open_AsReln_RelationAsSet§region1
         . (sum v__11 in open_AsReln_RelationAsSet§region2 , v__11[1] = v__12[1]
                . v__11[2])
           =
           open_Matrix1D[v__12[1]])
[applied] (sum v__5 in toSet(cost_AsReln§region2#RelationAsSet)
     . v__13 = v__5[1, 1] /\ v__14 = v__5[1, 2])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__5 in cost_AsReln_RelationAsSet§region2
         . v__13 = v__5[1, 1] /\ v__14 = v__5[1, 2])
[applied] (sum v__1 in toSet(open_AsReln§region1#RelationAsSet) . v__2 = v__1[1])
{rules/refns/relation-asset/relation-asset-toSet.rule}
    (sum v__1 in open_AsReln_RelationAsSet§region1 . v__2 = v__1[1])
[removedDecl] find open_AsReln: relation of (int(1..n_stores) * int(1..n_warehouses))
[removedDecl] given cost_AsReln:
        relation of ((int(1..n_stores), int(1..n_warehouses)) * int(1..MAXINT))
[representation] find open_AsReln_RelationAsSet: set of (int(1..n_stores), int(1..n_warehouses))
(#1)
ExplicitVarSize
[representation] given cost_AsReln_RelationAsSet:
        set of ((int(1..n_stores), int(1..n_warehouses)), int(1..MAXINT))
(#1)
ExplicitVarSize
[configuration] open_AsReln_RelationAsSet§region1#ExplicitVarSize cost_AsReln_RelationAsSet§region1#ExplicitVarSize cost_AsReln_RelationAsSet§region2#ExplicitVarSize open_AsReln_RelationAsSet§region2#ExplicitVarSize
[addedDecl] find open_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n_stores * n_warehouses)] of (bool,
                                                                (int(1..n_stores), int(1..n_warehouses)))
[addedDecl] given cost_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n_stores * n_warehouses * MAXINT)] of (bool,
                                                                         ((int(1..n_stores), int(1..n_warehouses)),
                                                                          int(1..MAXINT)))
[applied] (sum v__4 in open_AsReln_RelationAsSet§region1#ExplicitVarSize . 1)
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__15 : int(1..n_stores * n_warehouses)
         , open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__15, 1]
         . 1)
[applied] (sum v__7 in cost_AsReln_RelationAsSet§region2#ExplicitVarSize
     , v__7[1, 1] = s /\ v__7[1, 2] = open_Matrix1D§region3[s]
     . v__7[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__16 : int(1..n_stores * n_warehouses * MAXINT)
         , cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__16, 2, 1, 1] = s
           /\
           cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__16, 2, 1, 2]
           =
           open_Matrix1D§region3[s]
           /\
           cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__16, 1]
         . cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__16, 2, 2])
[applied] (sum v__11 in open_AsReln_RelationAsSet§region2#ExplicitVarSize
     , v__11[1] = v__12[1]
     . v__11[2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__17 : int(1..n_stores * n_warehouses)
         , open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1] = v__12[1]
           /\
           open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
         . open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
[applied] (forAll v__12 in open_AsReln_RelationAsSet§region1#ExplicitVarSize
     . (sum v__17 : int(1..n_stores * n_warehouses)
            , open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1] = v__12[1]
              /\
              open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
            . open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
       =
       open_Matrix1D[v__12[1]])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (forAll v__18 : int(1..n_stores * n_warehouses)
         , open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 1]
         . (sum v__17 : int(1..n_stores * n_warehouses)
                , open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 1]
                  =
                  open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 2, 1]
                  /\
                  open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 1]
                . open_AsReln_RelationAsSet_ExplicitVarSize§region2[v__17, 2, 2])
           =
           open_Matrix1D[open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__18, 2, 1]])
[applied] (sum v__5 in cost_AsReln_RelationAsSet§region2#ExplicitVarSize
     . v__13 = v__5[1, 1] /\ v__14 = v__5[1, 2])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__19 : int(1..n_stores * n_warehouses * MAXINT)
         , cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__19, 1]
         . v__13 = cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__19, 2, 1, 1]
           /\
           v__14 = cost_AsReln_RelationAsSet_ExplicitVarSize§region2[v__19, 2, 1, 2])
[applied] (sum v__1 in open_AsReln_RelationAsSet§region1#ExplicitVarSize . v__2 = v__1[1])
{rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
    (sum v__20 : int(1..n_stores * n_warehouses)
         , open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__20, 1]
         . v__2 = open_AsReln_RelationAsSet_ExplicitVarSize§region1[v__20, 2, 1])
[removedDecl] given cost_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n_stores * n_warehouses * MAXINT)] of (bool,
                                                                         ((int(1..n_stores), int(1..n_warehouses)),
                                                                          int(1..MAXINT)))
[removedDecl] find open_AsReln_RelationAsSet_ExplicitVarSize:
        matrix indexed by [int(1..n_stores * n_warehouses)] of (bool,
                                                                (int(1..n_stores), int(1..n_warehouses)))
[removedDecl] given cost_AsReln_RelationAsSet_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..n_stores * n_warehouses
                                  *
                                  MAXINT)] of ((int(1..n_stores), int(1..n_warehouses)), int(1..MAXINT))
[removedDecl] find open_AsReln_RelationAsSet_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..n_stores * n_warehouses)] of (int(1..n_stores),
                                                                int(1..n_warehouses))
[removedDecl] given cost_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..n_stores * n_warehouses
                                  *
                                  MAXINT)] of (int(1..n_stores), int(1..n_warehouses))
[removedDecl] find open_AsReln_RelationAsSet: set of (int(1..n_stores), int(1..n_warehouses))
[removedDecl] given cost_AsReln_RelationAsSet:
        set of ((int(1..n_stores), int(1..n_warehouses)), int(1..MAXINT))