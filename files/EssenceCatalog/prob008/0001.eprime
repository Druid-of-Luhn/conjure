language ESSENCE' 1.0

given n_upper: int
given deck_width: int(1..)
given deck_length: int(1..)
given n_containers: int(1..)
given n_classes: int(1..)
given width_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_width)
given length_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(1..deck_length)
given class_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(1..n_classes)
given separation_AsReln_RelationAsSet_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2 ** n_classes * (n_upper + 1))] of bool
given separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence:
        matrix indexed by [int(1..2 ** n_classes * (n_upper + 1)),
                           int(1..n_classes)] of bool
given separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..2 ** n_classes * (n_upper + 1))] of int(0..n_upper)
find west_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find east_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_width)
find north_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
find south_Matrix1D:
        matrix indexed by [int(1..n_containers)] of int(0..deck_length)
such that
    forAll c : int(1..n_containers)
        . east_Matrix1D[c] - west_Matrix1D[c] = width_Matrix1D[c]
          /\
          south_Matrix1D[c] - north_Matrix1D[c] = length_Matrix1D[c]
          \/
          east_Matrix1D[c] - west_Matrix1D[c] = length_Matrix1D[c]
          /\
          south_Matrix1D[c] - north_Matrix1D[c] = width_Matrix1D[c],
    forAll c1 : int(1..n_containers)
        . (forAll c2 : int(1..n_containers)
               . c1 != c2
                 ->
                 west_Matrix1D[c1] != west_Matrix1D[c2]
                 \/
                 north_Matrix1D[c1] != north_Matrix1D[c2]),
    forAll c1 : int(1..n_containers)
        . (forAll c2 : int(1..n_containers)
               . c1 != c2
                 ->
                 max(west_Matrix1D[c1], west_Matrix1D[c2])
                 -
                 min(east_Matrix1D[c1], east_Matrix1D[c2])
                 >=
                 (sum v__0 : int(1..2 ** n_classes * (n_upper + 1))
                      . ((forAll v__1 : int(1..n_classes)
                              . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                         v__1]
                                ->
                                class_Matrix1D[c1] = v__1 \/ class_Matrix1D[c2] = v__1)
                         /\
                         ((exists v__1 : int(1..n_classes)
                               . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                          v__1]
                                 /\
                                 v__1 = class_Matrix1D[c1])
                          /\
                          (exists v__1 : int(1..n_classes)
                               . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                          v__1]
                                 /\
                                 v__1 = class_Matrix1D[c2]))
                         /\
                         separation_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0])
                        *
                        separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__0])
                 \/
                 max(north_Matrix1D[c1], north_Matrix1D[c2])
                 -
                 min(south_Matrix1D[c1], south_Matrix1D[c2])
                 >=
                 (sum v__0 : int(1..2 ** n_classes * (n_upper + 1))
                      . ((forAll v__1 : int(1..n_classes)
                              . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                         v__1]
                                ->
                                class_Matrix1D[c1] = v__1 \/ class_Matrix1D[c2] = v__1)
                         /\
                         ((exists v__1 : int(1..n_classes)
                               . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                          v__1]
                                 /\
                                 v__1 = class_Matrix1D[c1])
                          /\
                          (exists v__1 : int(1..n_classes)
                               . separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple1_Occurrence[v__0,
                                                                                                          v__1]
                                 /\
                                 v__1 = class_Matrix1D[c2]))
                         /\
                         separation_AsReln_RelationAsSet_ExplicitVarSize_tuple1[v__0])
                        *
                        separation_AsReln_RelationAsSet_ExplicitVarSize_tuple2_tuple2[v__0])),
    forAll c1 : int(1..n_containers)
        . (forAll c2 : int(1..n_containers)
               . c1 != c2
                 ->
                 max(west_Matrix1D[c1], west_Matrix1D[c2])
                 -
                 min(east_Matrix1D[c1], east_Matrix1D[c2])
                 >=
                 0
                 \/
                 max(north_Matrix1D[c1], north_Matrix1D[c2])
                 -
                 min(south_Matrix1D[c1], south_Matrix1D[c2])
                 >=
                 0)
