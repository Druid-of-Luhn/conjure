
~~> MSetOfSets
~~> mset (size &n) of set (size &m) of &tau
$ there are n parts in the partition
$ each part has m things in it.


*** partition (complete, regular, size &n) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    /\  ( forAll i : &tau . exists s in refn . i in s )                         $ every element of the domain is in one set

    letting &m be domSize(&tau) / &n
    $where   domSize(&tau) = &n * &m


*** partition (complete, regular, partSize &m) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    /\  ( forAll i : &tau . exists s in refn . i in s )                         $ every element of the domain is in one set

    letting &n be domSize(&tau) / &m
    $where   domSize(&tau) = &n * &m


*** partition (complete, size &n, partSize &m, ..) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    /\  ( forAll i : &tau . exists s in refn . i in s )                         $ every element of the domain is in one set

    $where   domSize(&tau) = &n * &m



*** partition (regular, size &n) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    letting &m be domSize(&tau) / &n
    $where   domSize(&tau) = &n * &m


*** partition (regular, partSize &m) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    letting &n be domSize(&tau) / &m
    $where   domSize(&tau) = &n * &m


*** partition (size &n, partSize &m, ..) from &tau

    ~~> ( forAll i,j in refn, i != j . |i intersect j| = 0 )                    $ parts that aren't equal should have no common element
                                                                                $ i.e. a part can only be in one set

    /\  ( forAll i in refn, |i| > 0 . 1 = (sum j in refn , i = j . 1) )         $ no duplicate parts

    $where   domSize(&tau) = &n * &m
