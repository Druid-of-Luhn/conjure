
$ Cells can be either empty or full.
$ Cells that are empty have a "false" first component.
$ Cells that are full  have a "true"  first component.
$ Empty cells come before full cells.
$ Full cells have a strict value ordering.

$ To break the symmetry between two Set~ExplicitVarSize represented sets,
$ we do a case analysis.
$ (|first| < |second|) \/ ((|first| = |second|) /\ "complicated")
$ Where "complicated" needs to put a lexicographic ordering between full cells.

$ What do we know now:
$ * number of full cells of the first set = number of of full cells in the second
$ * they aren't exactly equal.
$ ==> there has to be at least one value that is smaller in the first set.
$ See ../../rules/refns/vertical/Set~ExplicitVarSize/DotLt.rule for the implementation



~~> Set~ExplicitVarSize
~~> matrix indexed by [int(1..&mx)] of (bool,&t)
~~> (
        forAll i : int(1..&mx-1), refn[i][1] /\ refn[i+1][1] . refn[i][2] .< refn[i+1][2]
    )
        /\
    (
        forAll i : int(1..&mx-1) . refn[i][1] >= refn[i+1][1]
    )


*** set of &t
    letting &mx be domSize(&t)

$ *** set (size n) of t
$     ~~> (sum i : int(1..mx) . refn[i][1]) = n
$     letting mx be domSize(t)

*** set (minSize &mn) of &t
    ~~> (sum i : int(1..&mx) . refn[i][1]) >= &mn
    letting &mx be domSize(&t)

*** set (maxSize &mx) of &t

$ *** set (size n, minSize b) of t
$     ~~> (sum i : int(1..mx) . refn[i][1]) = n
$     letting mx be domSize(t)

$ *** set (size n, maxSize mx) of t
$     ~~> (sum i : int(1..mx) . refn[i][1]) = n

*** set (minSize &mn, maxSize &mx) of &t
    ~~> (sum i : int(1..&mx) . refn[i][1]) >= &mn

$ *** set (size n, minSize mn, maxSize mx) of t
$     ~~> (sum i : int(1..mx) . refn[i][1]) = n
