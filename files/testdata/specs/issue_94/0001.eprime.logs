[representation] find f: function (total) Index --> int(-1, 1) (#2) AsReln, Matrix1D
[configuration] f§region1#Matrix1D
[addedDecl] find f_Matrix1D: matrix indexed by [Index] of int(-1, 1)
[applied] f§region1#Matrix1D = function(1 --> -1, 2 --> 1)
{rules/refns/function-eq.rule}
    (forAll v__1 in defined(f§region1#Matrix1D)
         . f§region1#Matrix1D(v__1) = function(1 --> -1, 2 --> 1)(v__1))
[applied] f§region1#Matrix1D(v__1)
{rules/refns/function-matrix1d/function-matrix1d-image.rule}
    f_Matrix1D§region1[v__1]
[applied] function(1 --> -1, 2 --> 1)(v__1)
{builtIn.functionLiteralApply}
    toInt(!((1, -1) in (mset() : `mset of (int, int)`)) /\ 1 = v__1) * -1
    +
    toInt(!((2, 1) in mset((1, -1))) /\ 2 = v__1)
[applied] (1, -1) in (mset() : `mset of (int, int)`)
{rules/refns/mset-in.rule}
    false
[simplified] !false
~~>
true
[simplified] true /\ 1 = v__1
~~>
1 = v__1
[applied] (2, 1) in mset((1, -1))
{rules/refns/mset-in.rule}
    false
[simplified] true /\ 2 = v__1
~~>
2 = v__1
[applied] (forAll v__1 in defined(f§region1#Matrix1D)
     . f_Matrix1D§region1[v__1] = toInt(1 = v__1) * -1 + toInt(2 = v__1))
{rules/refns/function-defined-quantified.rule}
    (forAll v__5 in toSet(f§region1#Matrix1D)
         . f_Matrix1D§region1[v__5[1]] = toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]))
[applied] (forAll v__5 in toSet(f§region1#Matrix1D)
     . f_Matrix1D§region1[v__5[1]] = toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]))
{rules/refns/function-matrix1d/function-toSet-quantified.rule}
    (forAll v__6 : Index
         . f_Matrix1D§region1[v__6] = toInt(1 = v__6) * -1 + toInt(2 = v__6))
[removedDecl] find f: function (total) Index --> int(-1, 1)