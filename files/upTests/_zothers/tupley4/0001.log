[removedDecl] find pain:
                      matrix indexed by [int(1..2), int(3..4)] of (set (size 1) of int(6, 8),
                                                                   int(3, 4),
                                                                   bool)
[representation] find pain_tuple1:
                         matrix indexed by [int(1..2), int(3..4)] of set (size 1) of int(6, 8)
                 (#2)
                 Explicit, Occurrence
[configuration] pain_tuple1§region1#Explicit pain_tuple1§region2#Explicit pain_tuple1§region3#Explicit
[addedDecl] (find pain_tuple1:
                     matrix indexed by [int(1..2), int(3..4)] of set (size 1) of int(6, 8),
             find pain_tuple1_Explicit:
                     matrix indexed by [int(1..2), int(3..4), int(1..1)] of int(6, 8))
[fullEvaluator empty range] (forAll v__3 : int(1..0)
                                 . pain_tuple1_Explicit§regionS[v__4, v__5, v__3]
                                   <
                                   pain_tuple1_Explicit§regionS[v__4, v__5, v__3 + 1])
[applied] 6 in pain_tuple1§region1#Explicit[1, 3]
          {rules/refns/set-in-to-quantified.rule}
              (exists v__11 in pain_tuple1§region1#Explicit[1, 3] . v__11 = 6)
[applied] (exists v__11 in pain_tuple1§region1#Explicit[1, 3] . v__11 = 6)
          {rules/refns/set-explicit/set-explicit-quantified.rule}
              (exists v__12 : int(1..1) . pain_tuple1_Explicit§region1[1, 3, v__12] = 6)
[applied] 8 in pain_tuple1§region2#Explicit[1, 4]
          {rules/refns/set-in-to-quantified.rule}
              (exists v__13 in pain_tuple1§region2#Explicit[1, 4] . v__13 = 8)
[applied] (exists v__13 in pain_tuple1§region2#Explicit[1, 4] . v__13 = 8)
          {rules/refns/set-explicit/set-explicit-quantified.rule}
              (exists v__14 : int(1..1) . pain_tuple1_Explicit§region2[1, 4, v__14] = 8)
[applied] pain_tuple1§region3#Explicit[2, 4] = {8}
          {rules/refns/set-eq-to-subsets.rule}
              pain_tuple1§region3#Explicit[2, 4] subsetEq {8}
              /\
              pain_tuple1§region3#Explicit[2, 4] supsetEq {8}
[applied] pain_tuple1§region3#Explicit[2, 4] subsetEq {8}
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__15 in pain_tuple1§region3#Explicit[2, 4] . v__15 in {8})
[applied] v__15 in {8}
          {rules/refns/set-in-to-quantified.rule}
              8 = v__15
[simplified] 8
             ~~>
             8
[applied] (forAll v__15 in pain_tuple1§region3#Explicit[2, 4] . 8 = v__15)
          {rules/refns/set-explicit/set-explicit-quantified.rule}
              (forAll v__17 : int(1..1) . 8 = pain_tuple1_Explicit§region3[2, 4, v__17])
[applied] pain_tuple1§region3#Explicit[2, 4] supsetEq {8}
          {rules/refns/set-supseteq-to-subseteq.rule}
              {8} subsetEq pain_tuple1§region3#Explicit[2, 4]
[applied] {8} subsetEq pain_tuple1§region3#Explicit[2, 4]
          {rules/refns/set-subseteq-to-quantified.rule}
              8 in pain_tuple1§region3#Explicit[2, 4]
[applied] 8 in pain_tuple1§region3#Explicit[2, 4]
          {rules/refns/set-in-to-quantified.rule}
              (exists v__19 in pain_tuple1§region3#Explicit[2, 4] . v__19 = 8)
[applied] (exists v__19 in pain_tuple1§region3#Explicit[2, 4] . v__19 = 8)
          {rules/refns/set-explicit/set-explicit-quantified.rule}
              (exists v__20 : int(1..1) . pain_tuple1_Explicit§region3[2, 4, v__20] = 8)
[removedDecl] find pain_tuple1:
                      matrix indexed by [int(1..2), int(3..4)] of set (size 1) of int(6, 8)
[addSlicing] pain_tuple1_Explicit[v__4, v__5]
             pain_tuple1_Explicit[v__4, v__5, ..]