language ESSENCE' 1.0

find x_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..2), int(1..3)] of int(5..8)
find x_SetExplicitVarSize_tuple1:
        matrix indexed by [int(1..2), int(1..3)] of bool
find x_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(1..3)] of int(6..8)
such that
    exists v__0 : int(1..3)
        . x_SetExplicitVarSizeWithDefault[2, v__0] != 5
          /\
          x_SetExplicitVarSizeWithDefault[2, v__0] = 7,
    exists v__0 : int(1..3)
        . x_SetExplicitVarSizeWithDefault[2, v__0] != 5
          /\
          x_SetExplicitVarSizeWithDefault[2, v__0] = 8,
    exists v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[1, v__0]
          /\
          x_SetExplicitVarSize_tuple2[1, v__0] = 6,
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . x_SetExplicitVarSizeWithDefault[v__0, v__1] != 5
                 /\
                 x_SetExplicitVarSizeWithDefault[v__0, v__1 + 1] != 5
                 ->
                 x_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <
                 x_SetExplicitVarSizeWithDefault[v__0, v__1 + 1])
          /\
          (forAll v__1 : int(1..2)
               . x_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <=
                 x_SetExplicitVarSizeWithDefault[v__0, v__1 + 1]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple1[v__0, v__1]
                 /\
                 x_SetExplicitVarSize_tuple1[v__0, v__1 + 1]
                 ->
                 x_SetExplicitVarSize_tuple2[v__0, v__1]
                 <
                 x_SetExplicitVarSize_tuple2[v__0, v__1 + 1])
          /\
          (forAll v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple1[v__0, v__1]
                 <=
                 x_SetExplicitVarSize_tuple1[v__0, v__1 + 1]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(6..8)
               . (exists v__2 : int(1..3)
                      . x_SetExplicitVarSize_tuple1[v__0, v__2]
                        /\
                        x_SetExplicitVarSize_tuple2[v__0, v__2] = v__1)
                 <->
                 (exists v__2 : int(1..3)
                      . x_SetExplicitVarSizeWithDefault[v__0, v__2] != 5
                        /\
                        x_SetExplicitVarSizeWithDefault[v__0, v__2] = v__1))
          /\
          (forAll v__1 : int(6..8)
               . (exists v__2 : int(1..3)
                      . x_SetExplicitVarSize_tuple1[v__0, v__2]
                        /\
                        x_SetExplicitVarSize_tuple2[v__0, v__2] = v__1)
                 <->
                 (exists v__2 : int(1..3)
                      . x_SetExplicitVarSizeWithDefault[v__0, v__2] != 5
                        /\
                        x_SetExplicitVarSizeWithDefault[v__0, v__2] = v__1)),
    forAll v__0 : int(1..2)
        . (sum v__1 : int(1..3) . x_SetExplicitVarSizeWithDefault[v__0, v__1] != 5)
          >=
          1,
    forAll v__0 : int(1..2)
        . (sum v__1 : int(1..3) . x_SetExplicitVarSize_tuple1[v__0, v__1]) >= 1,
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSizeWithDefault[2, v__0] != 5
          ->
          7 = x_SetExplicitVarSizeWithDefault[2, v__0]
          \/
          8 = x_SetExplicitVarSizeWithDefault[2, v__0],
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[1, v__0]
          ->
          6 = x_SetExplicitVarSize_tuple2[1, v__0]
