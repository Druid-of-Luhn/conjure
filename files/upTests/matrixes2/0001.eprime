language ESSENCE' 1.0

find x_ExplicitVarSize_tuple1: matrix indexed by [int(1..2), int(1..3)] of bool
find x_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(1..3)] of int(6..8)
such that
    forAll v__13 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, v__13] -> 6 = x_ExplicitVarSize_tuple2[1, v__13],
    exists v__16 : int(1..3)
        . x_ExplicitVarSize_tuple1[1, v__16] /\ x_ExplicitVarSize_tuple2[1, v__16] = 6,
    forAll v__19 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, v__19]
          ->
          7 = x_ExplicitVarSize_tuple2[2, v__19]
          \/
          8 = x_ExplicitVarSize_tuple2[2, v__19],
    exists v__22 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, v__22] /\ x_ExplicitVarSize_tuple2[2, v__22] = 7,
    exists v__24 : int(1..3)
        . x_ExplicitVarSize_tuple1[2, v__24] /\ x_ExplicitVarSize_tuple2[2, v__24] = 8,
    forAll v__4 : int(1..2)
        . (forAll v__2 : int(1..3)
               . (forAll v__3 : int(1..3)
                      . v__2 < v__3 /\ x_ExplicitVarSize_tuple1[v__4, v__2]
                        /\
                        x_ExplicitVarSize_tuple1[v__4, v__3]
                        ->
                        x_ExplicitVarSize_tuple2[v__4, v__2] < x_ExplicitVarSize_tuple2[v__4, v__3]))
          /\
          (forAll v__2 : int(1..2)
               . x_ExplicitVarSize_tuple1[v__4, v__2]
                 <=
                 x_ExplicitVarSize_tuple1[v__4, v__2 + 1]),
    forAll v__7 : int(1..2)
        . (sum v__6 : int(1..3) . x_ExplicitVarSize_tuple1[v__7, v__6]) >= 1
