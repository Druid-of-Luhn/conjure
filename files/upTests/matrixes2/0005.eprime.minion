MINION 3
# CSE_number = 15
# CSE_eliminated_expressions = 47
# CSE_total_size = 81
**VARIABLES**
DISCRETE x_SetExplicitVarSizeWithDefault_00000_00000 #
{6..9}
DISCRETE x_SetExplicitVarSizeWithDefault_00000_00001 #
{6..9}
DISCRETE x_SetExplicitVarSizeWithDefault_00000_00002 #
{6..9}
DISCRETE x_SetExplicitVarSizeWithDefault_00001_00000 #
{6..9}
DISCRETE x_SetExplicitVarSizeWithDefault_00001_00001 #
{6..9}
DISCRETE x_SetExplicitVarSizeWithDefault_00001_00002 #
{6..9}
BOOL aux0 #CSE: 4 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00002 != 9)
BOOL aux1 #CSE: 4 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00000 != 9)
BOOL aux2 #CSE: 6 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00001 != 9)
BOOL aux3 #CSE: 5 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00000 != 9)
BOOL aux4 #CSE: 5 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00002 != 9)
BOOL aux5 #CSE: 5 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00001 != 9)
BOOL aux6 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00001=6)
BOOL aux7 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00000=6)
BOOL aux8 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00000_00002=6)
BOOL aux9 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00001=7)
BOOL aux10 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00001=8)
BOOL aux11 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00002=7)
BOOL aux12 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00002=8)
BOOL aux13 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00000=7)
BOOL aux14 #CSE: 2 occurrences of: (x_SetExplicitVarSizeWithDefault_00001_00000=8)
BOOL aux15 #(aux1 /\ aux5)
BOOL aux16 #(x_SetExplicitVarSizeWithDefault_00000_00000<x_SetExplicitVarSizeWithDefault_00000_00001)
BOOL aux17 #(aux5 /\ aux0)
BOOL aux18 #(x_SetExplicitVarSizeWithDefault_00000_00001<x_SetExplicitVarSizeWithDefault_00000_00002)
BOOL aux19 #(aux3 /\ aux2)
BOOL aux20 #(x_SetExplicitVarSizeWithDefault_00001_00000<x_SetExplicitVarSizeWithDefault_00001_00001)
BOOL aux21 #(aux2 /\ aux4)
BOOL aux22 #(x_SetExplicitVarSizeWithDefault_00001_00001<x_SetExplicitVarSizeWithDefault_00001_00002)
BOOL aux23 #(aux13 \/ aux14)
BOOL aux24 #(aux9 \/ aux10)
BOOL aux25 #(aux11 \/ aux12)
**SEARCH**
PRINT[[x_SetExplicitVarSizeWithDefault_00000_00000],[x_SetExplicitVarSizeWithDefault_00000_00001],[x_SetExplicitVarSizeWithDefault_00000_00002],[x_SetExplicitVarSizeWithDefault_00001_00000],[x_SetExplicitVarSizeWithDefault_00001_00001],[x_SetExplicitVarSizeWithDefault_00001_00002]]
VARORDER STATIC [x_SetExplicitVarSizeWithDefault_00000_00000,x_SetExplicitVarSizeWithDefault_00000_00001,x_SetExplicitVarSizeWithDefault_00000_00002,x_SetExplicitVarSizeWithDefault_00001_00000,x_SetExplicitVarSizeWithDefault_00001_00001,x_SetExplicitVarSizeWithDefault_00001_00002]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25]
**CONSTRAINTS**
reify(watched-and({w-literal(aux1,1),w-literal(aux5,1)}), aux15)
reify(ineq(x_SetExplicitVarSizeWithDefault_00000_00000, x_SetExplicitVarSizeWithDefault_00000_00001, -1), aux16)
reify(watched-and({w-literal(aux5,1),w-literal(aux0,1)}), aux17)
reify(ineq(x_SetExplicitVarSizeWithDefault_00000_00001, x_SetExplicitVarSizeWithDefault_00000_00002, -1), aux18)
reify(watched-and({w-literal(aux3,1),w-literal(aux2,1)}), aux19)
reify(ineq(x_SetExplicitVarSizeWithDefault_00001_00000, x_SetExplicitVarSizeWithDefault_00001_00001, -1), aux20)
reify(watched-and({w-literal(aux2,1),w-literal(aux4,1)}), aux21)
reify(ineq(x_SetExplicitVarSizeWithDefault_00001_00001, x_SetExplicitVarSizeWithDefault_00001_00002, -1), aux22)
reify(watched-or({w-literal(aux13,1),w-literal(aux14,1)}), aux23)
reify(watched-or({w-literal(aux9,1),w-literal(aux10,1)}), aux24)
reify(watched-or({w-literal(aux11,1),w-literal(aux12,1)}), aux25)
reify(diseq(x_SetExplicitVarSizeWithDefault_00000_00002,9), aux0)
reify(diseq(x_SetExplicitVarSizeWithDefault_00000_00000,9), aux1)
reify(diseq(x_SetExplicitVarSizeWithDefault_00001_00001,9), aux2)
reify(diseq(x_SetExplicitVarSizeWithDefault_00001_00000,9), aux3)
reify(diseq(x_SetExplicitVarSizeWithDefault_00001_00002,9), aux4)
reify(diseq(x_SetExplicitVarSizeWithDefault_00000_00001,9), aux5)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00000_00001,6), aux6)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00000_00000,6), aux7)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00000_00002,6), aux8)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00001,7), aux9)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00001,8), aux10)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00002,7), aux11)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00002,8), aux12)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00000,7), aux13)
reify(w-literal(x_SetExplicitVarSizeWithDefault_00001_00000,8), aux14)
watched-or({watched-and({w-literal(aux7,1),w-literal(aux1,1)}),watched-and({w-literal(aux6,1),w-literal(aux5,1)}),watched-and({w-literal(aux8,1),w-literal(aux0,1)})})
watched-or({watched-and({w-literal(aux3,1),w-literal(aux13,1)}),watched-and({w-literal(aux2,1),w-literal(aux9,1)}),watched-and({w-literal(aux4,1),w-literal(aux11,1)})})
watched-or({watched-and({w-literal(aux3,1),w-literal(aux14,1)}),watched-and({w-literal(aux2,1),w-literal(aux10,1)}),watched-and({w-literal(aux4,1),w-literal(aux12,1)})})
ineq(aux15, aux16, 0)
ineq(aux17, aux18, 0)
ineq(x_SetExplicitVarSizeWithDefault_00000_00000, x_SetExplicitVarSizeWithDefault_00000_00001, 0)
ineq(x_SetExplicitVarSizeWithDefault_00000_00001, x_SetExplicitVarSizeWithDefault_00000_00002, 0)
ineq(aux19, aux20, 0)
ineq(aux21, aux22, 0)
ineq(x_SetExplicitVarSizeWithDefault_00001_00000, x_SetExplicitVarSizeWithDefault_00001_00001, 0)
ineq(x_SetExplicitVarSizeWithDefault_00001_00001, x_SetExplicitVarSizeWithDefault_00001_00002, 0)
sumgeq([aux1,aux5,aux0],1)
sumgeq([aux3,aux2,aux4],1)
ineq(aux1, aux7, 0)
ineq(aux5, aux6, 0)
ineq(aux0, aux8, 0)
ineq(aux3, aux23, 0)
ineq(aux2, aux24, 0)
ineq(aux4, aux25, 0)
**EOF**
