language ESSENCE' 1.0

find x_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..2)] of int(-1..14)
find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find x_SetExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(0..14)
such that
    x_SetExplicitVarSizeWithDefault[1] != -1
    /\
    x_SetExplicitVarSizeWithDefault[2] != -1
    ->
    x_SetExplicitVarSizeWithDefault[1] < x_SetExplicitVarSizeWithDefault[2],
    x_SetExplicitVarSize_tuple1[1] /\ x_SetExplicitVarSize_tuple1[2]
    ->
    x_SetExplicitVarSize_tuple2[1] < x_SetExplicitVarSize_tuple2[2],
    8
    <
    {aux__0 @ find aux__0: int(0..14)
              such that
                  forAll v__0 : int(1..2)
                      . x_SetExplicitVarSizeWithDefault[v__0] != -1
                        ->
                        x_SetExplicitVarSizeWithDefault[v__0] <= aux__0,
                  exists v__0 : int(1..2)
                      . x_SetExplicitVarSizeWithDefault[v__0] != -1
                        /\
                        x_SetExplicitVarSizeWithDefault[v__0] = aux__0},
    x_SetExplicitVarSizeWithDefault[1] <= x_SetExplicitVarSizeWithDefault[2],
    x_SetExplicitVarSize_tuple1[1] <= x_SetExplicitVarSize_tuple1[2],
    exists v__0 : int(1..2)
        . x_SetExplicitVarSize_tuple1[v__0] /\ x_SetExplicitVarSize_tuple2[v__0] = 2,
    forAll v__0 : int(0..14)
        . (exists v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple1[v__1] /\ x_SetExplicitVarSize_tuple2[v__1] = v__0)
          <->
          (exists v__1 : int(1..2)
               . x_SetExplicitVarSizeWithDefault[v__1] != -1
                 /\
                 x_SetExplicitVarSizeWithDefault[v__1] = v__0)
