language ESSENCE' 1.0

find pain_tuple1_tuple1_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple1_tuple1_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(1, 3)
find pain_tuple1_tuple2_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..2)] of int(1, 2)
find pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..2)] of int(5)
find pain_tuple2_tuple1_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple2_tuple1_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(1, 3)
find pain_tuple2_tuple2_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..2)] of int(1, 2)
find pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..2)] of int(6)
such that
    forAll v__17 : int(1..2)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__17]
          ->
          3 = pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__17],
    exists v__20 : int(1..2)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__20]
          /\
          pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__20] = 3,
    forAll v__23 : int(1..2)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__23]
          ->
          1 = pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__23]
          /\
          5 = pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__23],
    exists v__26 : int(1..2)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__26]
          /\
          (pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__26] = 1
           /\
           pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__26] = 5),
    forAll v__29 : int(1..2)
        . pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__29]
          ->
          1 = pain_tuple2_tuple1_ExplicitVarSize_tuple2[v__29],
    exists v__32 : int(1..2)
        . pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__32]
          /\
          pain_tuple2_tuple1_ExplicitVarSize_tuple2[v__32] = 1,
    forAll v__35 : int(1..2)
        . pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__35]
          ->
          2 = pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple1[v__35]
          /\
          6 = pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple2[v__35],
    exists v__38 : int(1..2)
        . pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__38]
          /\
          (pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple1[v__38] = 2
           /\
           pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple2[v__38] = 6),
    forAll v__12 : int(1..2)
        . (forAll v__13 : int(1..2)
               . v__12 < v__13 /\ pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__12]
                 /\
                 pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__13]
                 ->
                 pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple1[v__12]
                 !=
                 pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple1[v__13]
                 \/
                 pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple2[v__12]
                 !=
                 pain_tuple2_tuple2_ExplicitVarSize_tuple2_tuple2[v__13]),
    forAll v__12 : int(1..1)
        . pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__12]
          <=
          pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__12 + 1],
    (sum v__14 : int(1..2) . pain_tuple2_tuple2_ExplicitVarSize_tuple1[v__14]) >= 1,
    forAll v__8 : int(1..2)
        . (forAll v__9 : int(1..2)
               . v__8 < v__9 /\ pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__8]
                 /\
                 pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__9]
                 ->
                 pain_tuple2_tuple1_ExplicitVarSize_tuple2[v__8]
                 <
                 pain_tuple2_tuple1_ExplicitVarSize_tuple2[v__9]),
    forAll v__8 : int(1..1)
        . pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__8]
          <=
          pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__8 + 1],
    (sum v__10 : int(1..2) . pain_tuple2_tuple1_ExplicitVarSize_tuple1[v__10]) >= 1,
    forAll v__5 : int(1..2)
        . (forAll v__6 : int(1..2)
               . v__5 < v__6 /\ pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5]
                 /\
                 pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__6]
                 ->
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__5]
                 !=
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__6]
                 \/
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__5]
                 !=
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__6]),
    forAll v__5 : int(1..1)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5]
          <=
          pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5 + 1],
    (sum v__7 : int(1..2) . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__7]) >= 1,
    forAll v__1 : int(1..2)
        . (forAll v__2 : int(1..2)
               . v__1 < v__2 /\ pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1]
                 /\
                 pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__2]
                 ->
                 pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__1]
                 <
                 pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__2]),
    forAll v__1 : int(1..1)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1]
          <=
          pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1 + 1],
    (sum v__3 : int(1..2) . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__3]) >= 1
