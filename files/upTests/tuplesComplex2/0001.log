[removedDecl] find pain:
                      ((set (minSize 1) of int(1, 3), set (minSize 1) of (int(1, 2), int(5))),
                       (set (minSize 1) of int(1, 3), set (minSize 1) of (int(1, 2), int(6))))
[removedDecl] find pain_tuple1:
                      (set (minSize 1) of int(1, 3), set (minSize 1) of (int(1, 2), int(5)))
[removedDecl] find pain_tuple2:
                      (set (minSize 1) of int(1, 3), set (minSize 1) of (int(1, 2), int(6)))
[representation] find pain_tuple1_tuple1: set (minSize 1) of int(1, 3)
                 (#2)
                 ExplicitVarSize, Occurrence
[representation] find pain_tuple1_tuple2: set (minSize 1) of (int(1, 2), int(5))
                 (#1)
                 ExplicitVarSize
[representation] find pain_tuple2_tuple1: set (minSize 1) of int(1, 3)
                 (#2)
                 ExplicitVarSize, Occurrence
[representation] find pain_tuple2_tuple2: set (minSize 1) of (int(1, 2), int(6))
                 (#1)
                 ExplicitVarSize
[configuration] pain_tuple1_tuple1§region1#ExplicitVarSize pain_tuple1_tuple2§region2#ExplicitVarSize pain_tuple2_tuple1§region3#ExplicitVarSize pain_tuple2_tuple2§region4#ExplicitVarSize
[addedDecl] (find pain_tuple2_tuple2: set (minSize 1) of (int(1, 2), int(6)),
             find pain_tuple2_tuple2_ExplicitVarSize:
                     matrix indexed by [int(1..2)] of (bool, (int(1, 2), int(6))))
[addedDecl] (find pain_tuple2_tuple1: set (minSize 1) of int(1, 3),
             find pain_tuple2_tuple1_ExplicitVarSize:
                     matrix indexed by [int(1..2)] of (bool, int(1, 3)))
[addedDecl] (find pain_tuple1_tuple2: set (minSize 1) of (int(1, 2), int(5)),
             find pain_tuple1_tuple2_ExplicitVarSize:
                     matrix indexed by [int(1..2)] of (bool, (int(1, 2), int(5))))
[addedDecl] (find pain_tuple1_tuple1: set (minSize 1) of int(1, 3),
             find pain_tuple1_tuple1_ExplicitVarSize:
                     matrix indexed by [int(1..2)] of (bool, int(1, 3)))
[applied] pain_tuple1_tuple1§region1#ExplicitVarSize = {3}
          {rules/refns/set-eq-to-subsets.rule}
              pain_tuple1_tuple1§region1#ExplicitVarSize subsetEq {3}
              /\
              pain_tuple1_tuple1§region1#ExplicitVarSize supsetEq {3}
[applied] pain_tuple1_tuple1§region1#ExplicitVarSize subsetEq {3}
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__15 in pain_tuple1_tuple1§region1#ExplicitVarSize . v__15 in {3})
[applied] v__15 in {3}
          {rules/refns/set-in-to-quantified.rule}
              3 = v__15
[simplified] 3
             ~~>
             3
[applied] (forAll v__15 in pain_tuple1_tuple1§region1#ExplicitVarSize
               . 3 = v__15)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (forAll v__17 : int(1..2) , pain_tuple1_tuple1_ExplicitVarSize§region1[v__17, 1]
                   . 3 = pain_tuple1_tuple1_ExplicitVarSize§region1[v__17, 2])
[applied] pain_tuple1_tuple1§region1#ExplicitVarSize supsetEq {3}
          {rules/refns/set-supseteq-to-subseteq.rule}
              {3} subsetEq pain_tuple1_tuple1§region1#ExplicitVarSize
[applied] {3} subsetEq pain_tuple1_tuple1§region1#ExplicitVarSize
          {rules/refns/set-subseteq-to-quantified.rule}
              3 in pain_tuple1_tuple1§region1#ExplicitVarSize
[applied] 3 in pain_tuple1_tuple1§region1#ExplicitVarSize
          {rules/refns/set-in-to-quantified.rule}
              (exists v__19 in pain_tuple1_tuple1§region1#ExplicitVarSize . v__19 = 3)
[applied] (exists v__19 in pain_tuple1_tuple1§region1#ExplicitVarSize
               . v__19 = 3)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (exists v__20 : int(1..2) , pain_tuple1_tuple1_ExplicitVarSize§region1[v__20, 1]
                   . pain_tuple1_tuple1_ExplicitVarSize§region1[v__20, 2] = 3)
[applied] pain_tuple1_tuple2§region2#ExplicitVarSize = {(1, 5)}
          {rules/refns/set-eq-to-subsets.rule}
              pain_tuple1_tuple2§region2#ExplicitVarSize subsetEq {(1, 5)}
              /\
              pain_tuple1_tuple2§region2#ExplicitVarSize supsetEq {(1, 5)}
[applied] pain_tuple1_tuple2§region2#ExplicitVarSize subsetEq {(1, 5)}
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__21 in pain_tuple1_tuple2§region2#ExplicitVarSize . v__21 in {(1, 5)})
[applied] v__21 in {(1, 5)}
          {rules/refns/set-in-to-quantified.rule}
              (1, 5)[1] = v__21[1] /\ (1, 5)[2] = v__21[2]
[simplified] (1, 5)
             ~~>
             (1, 5)
[simplified] (1, 5)[1]
             ~~>
             1
[simplified] (1, 5)[2]
             ~~>
             5
[applied] (forAll v__21 in pain_tuple1_tuple2§region2#ExplicitVarSize
               . 1 = v__21[1] /\ 5 = v__21[2])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (forAll v__23 : int(1..2) , pain_tuple1_tuple2_ExplicitVarSize§region2[v__23, 1]
                   . 1 = pain_tuple1_tuple2_ExplicitVarSize§region2[v__23, 2, 1]
                     /\
                     5 = pain_tuple1_tuple2_ExplicitVarSize§region2[v__23, 2, 2])
[applied] pain_tuple1_tuple2§region2#ExplicitVarSize supsetEq {(1, 5)}
          {rules/refns/set-supseteq-to-subseteq.rule}
              {(1, 5)} subsetEq pain_tuple1_tuple2§region2#ExplicitVarSize
[applied] {(1, 5)} subsetEq pain_tuple1_tuple2§region2#ExplicitVarSize
          {rules/refns/set-subseteq-to-quantified.rule}
              (1, 5) in pain_tuple1_tuple2§region2#ExplicitVarSize
[applied] (1, 5) in pain_tuple1_tuple2§region2#ExplicitVarSize
          {rules/refns/set-in-to-quantified.rule}
              (exists v__25 in pain_tuple1_tuple2§region2#ExplicitVarSize
                   . v__25[1] = (1, 5)[1] /\ v__25[2] = (1, 5)[2])
[applied] (exists v__25 in pain_tuple1_tuple2§region2#ExplicitVarSize
               . v__25[1] = 1 /\ v__25[2] = 5)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (exists v__26 : int(1..2) , pain_tuple1_tuple2_ExplicitVarSize§region2[v__26, 1]
                   . pain_tuple1_tuple2_ExplicitVarSize§region2[v__26, 2, 1] = 1
                     /\
                     pain_tuple1_tuple2_ExplicitVarSize§region2[v__26, 2, 2] = 5)
[applied] pain_tuple2_tuple1§region3#ExplicitVarSize = {1}
          {rules/refns/set-eq-to-subsets.rule}
              pain_tuple2_tuple1§region3#ExplicitVarSize subsetEq {1}
              /\
              pain_tuple2_tuple1§region3#ExplicitVarSize supsetEq {1}
[applied] pain_tuple2_tuple1§region3#ExplicitVarSize subsetEq {1}
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__27 in pain_tuple2_tuple1§region3#ExplicitVarSize . v__27 in {1})
[applied] v__27 in {1}
          {rules/refns/set-in-to-quantified.rule}
              1 = v__27
[simplified] 1
             ~~>
             1
[applied] (forAll v__27 in pain_tuple2_tuple1§region3#ExplicitVarSize
               . 1 = v__27)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (forAll v__29 : int(1..2) , pain_tuple2_tuple1_ExplicitVarSize§region3[v__29, 1]
                   . 1 = pain_tuple2_tuple1_ExplicitVarSize§region3[v__29, 2])
[applied] pain_tuple2_tuple1§region3#ExplicitVarSize supsetEq {1}
          {rules/refns/set-supseteq-to-subseteq.rule}
              {1} subsetEq pain_tuple2_tuple1§region3#ExplicitVarSize
[applied] {1} subsetEq pain_tuple2_tuple1§region3#ExplicitVarSize
          {rules/refns/set-subseteq-to-quantified.rule}
              1 in pain_tuple2_tuple1§region3#ExplicitVarSize
[applied] 1 in pain_tuple2_tuple1§region3#ExplicitVarSize
          {rules/refns/set-in-to-quantified.rule}
              (exists v__31 in pain_tuple2_tuple1§region3#ExplicitVarSize . v__31 = 1)
[applied] (exists v__31 in pain_tuple2_tuple1§region3#ExplicitVarSize
               . v__31 = 1)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (exists v__32 : int(1..2) , pain_tuple2_tuple1_ExplicitVarSize§region3[v__32, 1]
                   . pain_tuple2_tuple1_ExplicitVarSize§region3[v__32, 2] = 1)
[applied] pain_tuple2_tuple2§region4#ExplicitVarSize = {(2, 6)}
          {rules/refns/set-eq-to-subsets.rule}
              pain_tuple2_tuple2§region4#ExplicitVarSize subsetEq {(2, 6)}
              /\
              pain_tuple2_tuple2§region4#ExplicitVarSize supsetEq {(2, 6)}
[applied] pain_tuple2_tuple2§region4#ExplicitVarSize subsetEq {(2, 6)}
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__33 in pain_tuple2_tuple2§region4#ExplicitVarSize . v__33 in {(2, 6)})
[applied] v__33 in {(2, 6)}
          {rules/refns/set-in-to-quantified.rule}
              (2, 6)[1] = v__33[1] /\ (2, 6)[2] = v__33[2]
[simplified] (2, 6)
             ~~>
             (2, 6)
[simplified] (2, 6)[1]
             ~~>
             2
[simplified] (2, 6)[2]
             ~~>
             6
[applied] (forAll v__33 in pain_tuple2_tuple2§region4#ExplicitVarSize
               . 2 = v__33[1] /\ 6 = v__33[2])
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (forAll v__35 : int(1..2) , pain_tuple2_tuple2_ExplicitVarSize§region4[v__35, 1]
                   . 2 = pain_tuple2_tuple2_ExplicitVarSize§region4[v__35, 2, 1]
                     /\
                     6 = pain_tuple2_tuple2_ExplicitVarSize§region4[v__35, 2, 2])
[applied] pain_tuple2_tuple2§region4#ExplicitVarSize supsetEq {(2, 6)}
          {rules/refns/set-supseteq-to-subseteq.rule}
              {(2, 6)} subsetEq pain_tuple2_tuple2§region4#ExplicitVarSize
[applied] {(2, 6)} subsetEq pain_tuple2_tuple2§region4#ExplicitVarSize
          {rules/refns/set-subseteq-to-quantified.rule}
              (2, 6) in pain_tuple2_tuple2§region4#ExplicitVarSize
[applied] (2, 6) in pain_tuple2_tuple2§region4#ExplicitVarSize
          {rules/refns/set-in-to-quantified.rule}
              (exists v__37 in pain_tuple2_tuple2§region4#ExplicitVarSize
                   . v__37[1] = (2, 6)[1] /\ v__37[2] = (2, 6)[2])
[applied] (exists v__37 in pain_tuple2_tuple2§region4#ExplicitVarSize
               . v__37[1] = 2 /\ v__37[2] = 6)
          {rules/refns/set-explicitvarsize/set-explicitvarsize-quantified.rule}
              (exists v__38 : int(1..2) , pain_tuple2_tuple2_ExplicitVarSize§region4[v__38, 1]
                   . pain_tuple2_tuple2_ExplicitVarSize§region4[v__38, 2, 1] = 2
                     /\
                     pain_tuple2_tuple2_ExplicitVarSize§region4[v__38, 2, 2] = 6)
[removedDecl] find pain_tuple1_tuple1_ExplicitVarSize:
                      matrix indexed by [int(1..2)] of (bool, int(1, 3))
[removedDecl] find pain_tuple1_tuple2_ExplicitVarSize:
                      matrix indexed by [int(1..2)] of (bool, (int(1, 2), int(5)))
[removedDecl] find pain_tuple2_tuple1_ExplicitVarSize:
                      matrix indexed by [int(1..2)] of (bool, int(1, 3))
[removedDecl] find pain_tuple2_tuple2_ExplicitVarSize:
                      matrix indexed by [int(1..2)] of (bool, (int(1, 2), int(6)))
[removedDecl] find pain_tuple1_tuple2_ExplicitVarSize_tuple2:
                      matrix indexed by [int(1..2)] of (int(1, 2), int(5))
[removedDecl] find pain_tuple2_tuple2_ExplicitVarSize_tuple2:
                      matrix indexed by [int(1..2)] of (int(1, 2), int(6))
[removedDecl] find pain_tuple2_tuple2: set (minSize 1) of (int(1, 2), int(6))
[removedDecl] find pain_tuple2_tuple1: set (minSize 1) of int(1, 3)
[removedDecl] find pain_tuple1_tuple2: set (minSize 1) of (int(1, 2), int(5))
[removedDecl] find pain_tuple1_tuple1: set (minSize 1) of int(1, 3)