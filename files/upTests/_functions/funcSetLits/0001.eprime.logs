[representation] find f: function (total) int(1..3) --> set of int(1, 2)
                 (#1)
                 Matrix1D
[configuration] f§region1#Matrix1D
[addedDecl] find f_Matrix1D: matrix indexed by [int(1..3)] of set of int(1, 2)
[applied] f§region1#Matrix1D = function(3 --> {}, 2 --> {1}, 1 --> {2, 1})
          {rules/refns/function-eq.rule}
              (forAll v__3 in defined(f§region1#Matrix1D)
                   . f§region1#Matrix1D(v__3) = function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3))
[applied] f§region1#Matrix1D(v__3)
          {rules/refns/function-matrix1d/function-matrix1d-image.rule}
              f_Matrix1D§region1[v__3]
[applied] f_Matrix1D§region1[v__3]
          =
          function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
          {rules/refns/set-eq-to-subsets.rule}
              f_Matrix1D§region1[v__3]
              subsetEq
              function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
              /\
              f_Matrix1D§region1[v__3]
              supsetEq
              function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
[applied] f_Matrix1D§region1[v__3]
          subsetEq
          function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__4 in f_Matrix1D§region1[v__3]
                   . v__4 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3))
[applied] v__4 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
          {rules/refns/set-in-to-quantified.rule}
              (exists v__5 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3) . v__5 = v__4)
[debug] v__5 = v__4
[debug] v__6 = v__4
[debug] (exists v__5 in {(3, {}), (2, {1}), (1, {2, 1})}
             , emptyGuard /\ v__5[1] = v__3
             . (exists v__6 in v__5[2] . v__6 = v__4))
[applied] (exists v__5 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
               . v__5 = v__4)
          {builtIn.functionLiteralApply}
              2 = v__3 /\ 1 = v__4 \/ 1 = v__3 /\ (2 = v__4 \/ 1 = v__4)
[applied] f_Matrix1D§region1[v__3]
          supsetEq
          function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
          {rules/refns/set-supseteq-to-subseteq.rule}
              function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
              subsetEq
              f_Matrix1D§region1[v__3]
[applied] function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
          subsetEq
          f_Matrix1D§region1[v__3]
          {rules/refns/set-subseteq-to-quantified.rule}
              (forAll v__7 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
                   . v__7 in f_Matrix1D§region1[v__3])
[applied] v__7 in f_Matrix1D§region1[v__3]
          {rules/refns/set-in-to-quantified.rule}
              (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = v__7)
[debug] (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = v__7)
[debug] (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = v__9)
[debug] (forAll v__7 in {(3, {}), (2, {1}), (1, {2, 1})}
             , emptyGuard /\ v__7[1] = v__3
             . (forAll v__9 in v__7[2]
                    . (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = v__9)))
[applied] (forAll v__7 in function(3 --> {}, 2 --> {1}, 1 --> {2, 1})(v__3)
               . (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = v__7))
          {builtIn.functionLiteralApply}
              (3 = v__3 -> true)
              /\
              (2 = v__3 -> (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 1))
              /\
              (1 = v__3
               ->
               (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 2)
               /\
               (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 1))
[applied] (forAll v__3 in defined(f§region1#Matrix1D)
               . (forAll v__4 in f_Matrix1D§region1[v__3]
                      . 2 = v__3 /\ 1 = v__4 \/ 1 = v__3 /\ (2 = v__4 \/ 1 = v__4))
                 /\
                 ((3 = v__3 -> true)
                  /\
                  (2 = v__3 -> (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 1))
                  /\
                  (1 = v__3
                   ->
                   (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 2)
                   /\
                   (exists v__8 in f_Matrix1D§region1[v__3] . v__8 = 1))))
          {rules/refns/function-defined-quantified.rule}
              (forAll v__10 in toSet(f§region1#Matrix1D)
                   . (forAll v__4 in f_Matrix1D§region1[v__10[1]]
                          . 2 = v__10[1] /\ 1 = v__4 \/ 1 = v__10[1] /\ (2 = v__4 \/ 1 = v__4))
                     /\
                     ((3 = v__10[1] -> true)
                      /\
                      (2 = v__10[1] -> (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 1))
                      /\
                      (1 = v__10[1]
                       ->
                       (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 2)
                       /\
                       (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 1))))
[applied] (forAll v__10 in toSet(f§region1#Matrix1D)
               . (forAll v__4 in f_Matrix1D§region1[v__10[1]]
                      . 2 = v__10[1] /\ 1 = v__4 \/ 1 = v__10[1] /\ (2 = v__4 \/ 1 = v__4))
                 /\
                 ((3 = v__10[1] -> true)
                  /\
                  (2 = v__10[1] -> (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 1))
                  /\
                  (1 = v__10[1]
                   ->
                   (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 2)
                   /\
                   (exists v__8 in f_Matrix1D§region1[v__10[1]] . v__8 = 1))))
          {rules/refns/function-matrix1d/function-toSet-quantified.rule}
              (forAll v__11 : int(1..3)
                   . (forAll v__4 in f_Matrix1D§region1[v__11]
                          . 2 = v__11 /\ 1 = v__4 \/ 1 = v__11 /\ (2 = v__4 \/ 1 = v__4))
                     /\
                     ((3 = v__11 -> true)
                      /\
                      (2 = v__11 -> (exists v__8 in f_Matrix1D§region1[v__11] . v__8 = 1))
                      /\
                      (1 = v__11
                       ->
                       (exists v__8 in f_Matrix1D§region1[v__11] . v__8 = 2)
                       /\
                       (exists v__8 in f_Matrix1D§region1[v__11] . v__8 = 1))))
[removedDecl] find f: function (total) int(1..3) --> set of int(1, 2)
[representation] find f_Matrix1D:
                         matrix indexed by [int(1..3)] of set of int(1, 2)
                 (#1)
                 Occurrence
[configuration] f_Matrix1D§region1#Occurrence
[addedDecl] find f_Matrix1D_Occurrence:
                    matrix indexed by [int(1..3), int(1, 2)] of bool
[applied] (forAll v__4 in f_Matrix1D§region1#Occurrence[v__11]
               . 2 = v__11 /\ 1 = v__4 \/ 1 = v__11 /\ (2 = v__4 \/ 1 = v__4))
          {rules/refns/set-occurrence/set-occurrence-quantified.rule}
              (forAll v__15 : int(1, 2) , f_Matrix1D_Occurrence§region1[v__11, v__15]
                   . 2 = v__11 /\ 1 = v__15 \/ 1 = v__11 /\ (2 = v__15 \/ 1 = v__15))
[applied] (exists v__8 in f_Matrix1D§region1#Occurrence[v__11] . v__8 = 1)
          {rules/refns/set-occurrence/set-occurrence-quantified.rule}
              (exists v__16 : int(1, 2) , f_Matrix1D_Occurrence§region1[v__11, v__16]
                   . v__16 = 1)
[applied] (exists v__8 in f_Matrix1D§region1#Occurrence[v__11] . v__8 = 2)
          {rules/refns/set-occurrence/set-occurrence-quantified.rule}
              (exists v__17 : int(1, 2) , f_Matrix1D_Occurrence§region1[v__11, v__17]
                   . v__17 = 2)
[applied] (exists v__8 in f_Matrix1D§region1#Occurrence[v__11] . v__8 = 1)
          {rules/refns/set-occurrence/set-occurrence-quantified.rule}
              (exists v__18 : int(1, 2) , f_Matrix1D_Occurrence§region1[v__11, v__18]
                   . v__18 = 1)
[removedDecl] find f_Matrix1D: matrix indexed by [int(1..3)] of set of int(1, 2)