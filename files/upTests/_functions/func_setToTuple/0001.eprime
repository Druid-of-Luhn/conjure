language ESSENCE' 1.0

find f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1:
        matrix indexed by [int(1..4)] of bool
find f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit:
        matrix indexed by [int(1..4), int(1..2)] of int(1..2)
find f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple1:
        matrix indexed by [int(1..4)] of int(3, 4)
find f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple2:
        matrix indexed by [int(1..4)] of int(5, 6)
such that
    forAll v__0 : int(1..3)
        . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1[v__0]
          /\
          f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          flatten(f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0,
                                                                                      ..])
          <lex
          flatten(f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0
                                                                                      +
                                                                                      1,
                                                                                      ..])
          \/
          (forAll v__1 : int(1..2)
               . (exists v__2 : int(1..2)
                      . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0,
                                                                                            v__2]
                        =
                        v__1)
                 <->
                 (exists v__2 : int(1..2)
                      . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0 + 1,
                                                                                            v__2]
                        =
                        v__1))
          /\
          (forAll v__1 : int(1..2)
               . (exists v__2 : int(1..2)
                      . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0,
                                                                                            v__2]
                        =
                        v__1)
                 <->
                 (exists v__2 : int(1..2)
                      . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0 + 1,
                                                                                            v__2]
                        =
                        v__1))
          /\
          (f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple1[v__0]
           <
           f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple1[v__0 + 1]
           \/
           f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple1[v__0]
           =
           f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple1[v__0 + 1]
           /\
           f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple2[v__0]
           <
           f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple2_tuple2[v__0 + 1]),
    forAll v__0 : int(1..3)
        . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1[v__0]
          <=
          f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..4)
        . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0, 1]
          <
          f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__0, 2],
    forAll v__0 : matrix indexed by [int(1..2)] of int(1..2)
        . v__0[1] < v__0[2]
          ->
          (sum v__1 : int(1..4)
               . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple1[v__1]
                 *
                 ((forAll v__2 : int(1..2)
                       . (exists v__3 : int(1..2)
                              . f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__1,
                                                                                                    v__3]
                                =
                                v__0[v__2]))
                  /\
                  (forAll v__2 : int(1..2)
                       . (exists v__3 : int(1..2)
                              . v__0[v__3]
                                =
                                f_AsReln_RelationAsSet_SetExplicitVarSize_tuple2_tuple1_SetExplicit[v__1,
                                                                                                    v__2]))))
          =
          1
