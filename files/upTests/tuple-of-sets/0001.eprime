language ESSENCE' 1.0

find a_tuple1: int(0..9)
find b_tuple1: int(0..9)
find b_tuple2: int(3..8)
find b_tuple3_ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find b_tuple3_ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(3..4)
find c_tuple1: int(0..9)
find c_tuple2_ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find c_tuple2_ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(3..4)
find c_tuple3_tuple1_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find c_tuple3_tuple1_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(3..4)
find c_tuple3_tuple2_tuple1: int(3..4)
find c_tuple3_tuple2_tuple2: bool
such that
    b_tuple1 < 2,
    b_tuple2 > b_tuple1,
    c_tuple1 = a_tuple1,
    forAll v__10 : int(1..2)
        . c_tuple2_ExplicitVarSize_tuple1[v__10]
          ->
          (exists v__9 : int(1..2)
               . b_tuple3_ExplicitVarSize_tuple1[v__9]
                 /\
                 b_tuple3_ExplicitVarSize_tuple2[v__9] = c_tuple2_ExplicitVarSize_tuple2[v__10]),
    forAll v__14 : int(1..2)
        . b_tuple3_ExplicitVarSize_tuple1[v__14]
          ->
          (exists v__13 : int(1..2)
               . c_tuple2_ExplicitVarSize_tuple1[v__13]
                 /\
                 c_tuple2_ExplicitVarSize_tuple2[v__13]
                 =
                 b_tuple3_ExplicitVarSize_tuple2[v__14]),
    forAll v__17 : int(1..2)
        . c_tuple3_tuple1_ExplicitVarSize_tuple1[v__17]
          ->
          3 = c_tuple3_tuple1_ExplicitVarSize_tuple2[v__17]
          \/
          4 = c_tuple3_tuple1_ExplicitVarSize_tuple2[v__17],
    exists v__20 : int(1..2)
        . c_tuple3_tuple1_ExplicitVarSize_tuple1[v__20]
          /\
          c_tuple3_tuple1_ExplicitVarSize_tuple2[v__20] = 3,
    exists v__22 : int(1..2)
        . c_tuple3_tuple1_ExplicitVarSize_tuple1[v__22]
          /\
          c_tuple3_tuple1_ExplicitVarSize_tuple2[v__22] = 4,
    c_tuple3_tuple2_tuple1 = 3,
    c_tuple3_tuple2_tuple2 = true,
    forAll v__5 : int(1..2)
        . (forAll v__6 : int(1..2)
               . v__5 < v__6 /\ c_tuple3_tuple1_ExplicitVarSize_tuple1[v__5]
                 /\
                 c_tuple3_tuple1_ExplicitVarSize_tuple1[v__6]
                 ->
                 c_tuple3_tuple1_ExplicitVarSize_tuple2[v__5]
                 <
                 c_tuple3_tuple1_ExplicitVarSize_tuple2[v__6]),
    forAll v__5 : int(1..1)
        . c_tuple3_tuple1_ExplicitVarSize_tuple1[v__5]
          <=
          c_tuple3_tuple1_ExplicitVarSize_tuple1[v__5 + 1],
    forAll v__1 : int(1..2)
        . (forAll v__2 : int(1..2)
               . v__1 < v__2 /\ b_tuple3_ExplicitVarSize_tuple1[v__1]
                 /\
                 b_tuple3_ExplicitVarSize_tuple1[v__2]
                 ->
                 b_tuple3_ExplicitVarSize_tuple2[v__1] < b_tuple3_ExplicitVarSize_tuple2[v__2]),
    forAll v__1 : int(1..1)
        . b_tuple3_ExplicitVarSize_tuple1[v__1]
          <=
          b_tuple3_ExplicitVarSize_tuple1[v__1 + 1],
    forAll v__3 : int(1..2)
        . (forAll v__4 : int(1..2)
               . v__3 < v__4 /\ c_tuple2_ExplicitVarSize_tuple1[v__3]
                 /\
                 c_tuple2_ExplicitVarSize_tuple1[v__4]
                 ->
                 c_tuple2_ExplicitVarSize_tuple2[v__3] < c_tuple2_ExplicitVarSize_tuple2[v__4]),
    forAll v__3 : int(1..1)
        . c_tuple2_ExplicitVarSize_tuple1[v__3]
          <=
          c_tuple2_ExplicitVarSize_tuple1[v__3 + 1]
