language ESSENCE' 1.0

find x_ExplicitVarSize_tuple1: matrix indexed by [int(1..4)] of bool
find x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..4), int(1..2)] of bool
find x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..4), int(1..2)] of int(1..2)
such that
    forAll v__4 : int(1..4)
        . x_ExplicitVarSize_tuple1[v__4]
          ->
          (sum v__19 : int(1..2)
               . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__4, v__19]
                 *
                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__4, v__19])
          =
          2,
    forAll v__1 : int(1..4)
        . (forAll v__2 : int(1..4)
               . v__1 < v__2 /\ x_ExplicitVarSize_tuple1[v__1]
                 /\
                 x_ExplicitVarSize_tuple1[v__2]
                 ->
                 !((forAll v__21 : int(1..2)
                        . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__1, v__21]
                          ->
                          (exists v__20 : int(1..2)
                               . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__2, v__20]
                                 /\
                                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__2, v__20]
                                 =
                                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__1, v__21]))
                   /\
                   (forAll v__23 : int(1..2)
                        . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__2, v__23]
                          ->
                          (exists v__22 : int(1..2)
                               . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__1, v__22]
                                 /\
                                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__1, v__22]
                                 =
                                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__2, v__23])))),
    forAll v__1 : int(1..3)
        . x_ExplicitVarSize_tuple1[v__1] <= x_ExplicitVarSize_tuple1[v__1 + 1],
    (sum v__3 : int(1..4) . x_ExplicitVarSize_tuple1[v__3]) >= 1,
    forAll v__12 : int(1..4)
        . (forAll v__10 : int(1..2)
               . (forAll v__11 : int(1..2)
                      . v__10 < v__11 /\ x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__12, v__10]
                        /\
                        x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__12, v__11]
                        ->
                        x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__12, v__10]
                        <
                        x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple2[v__12, v__11]))
          /\
          (forAll v__10 : int(1..1)
               . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__12, v__10]
                 <=
                 x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__12, v__10 + 1]),
    forAll v__15 : int(1..4)
        . (sum v__14 : int(1..2)
               . x_ExplicitVarSize_tuple2_ExplicitVarSize_tuple1[v__15, v__14])
          >=
          1
