language ESSENCE' 1.0

find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..4)] of bool
find x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..4), int(1..2)] of int(1..3)
such that
    (sum v__0 : int(1..4) . x_SetExplicitVarSize_tuple1[v__0]) >= 1,
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[v__0] /\ x_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, ..]
          <lex
          x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0 + 1, ..],
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[v__0] >= x_SetExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..4)
        . x_SetExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..2)
               . (x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1] != 3)
                 *
                 x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1])
          =
          2,
    forAll v__0 : int(1..4)
        . (x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 1] != 3
           /\
           x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 2] != 3
           ->
           x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 1]
           <
           x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 2])
          /\
          x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 1]
          <=
          x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, 2],
    forAll v__0 : int(1..4)
        . (sum v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple2_SetExplicitVarSizeWithDefault[v__0, v__1] != 3)
          >=
          1
