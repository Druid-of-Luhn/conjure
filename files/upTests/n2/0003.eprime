language ESSENCE' 1.0

find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..4)] of bool
find x_SetExplicitVarSize_tuple2_SetOccurrence:
        matrix indexed by [int(1..4), int(1..2)] of bool
such that
    (sum v__0 : int(1..4) . x_SetExplicitVarSize_tuple1[v__0]) >= 1,
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[v__0] /\ x_SetExplicitVarSize_tuple1[v__0 + 1]
          ->
          flatten(x_SetExplicitVarSize_tuple2_SetOccurrence[v__0 + 1, ..])
          <lex
          flatten(x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, ..]),
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[v__0] >= x_SetExplicitVarSize_tuple1[v__0 + 1],
    forAll v__0 : int(1..4)
        . x_SetExplicitVarSize_tuple1[v__0]
          ->
          (sum v__1 : int(1..2)
               . x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1] * v__1)
          =
          2,
    forAll v__0 : int(1..4)
        . (sum v__1 : int(1..2) . x_SetExplicitVarSize_tuple2_SetOccurrence[v__0, v__1])
          >=
          1
