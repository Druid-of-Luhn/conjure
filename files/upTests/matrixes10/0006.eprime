language ESSENCE' 1.0

find x_SetExplicitVarSize_tuple1:
        matrix indexed by [int(1..2), int(1, 2), int(1..3)] of bool
find x_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(1, 2), int(1..3)] of int(6, 7, 8)
find x_SetOccurrence:
        matrix indexed by [int(1..2), int(1, 2), int(6, 7, 8)] of bool
such that
    x_SetOccurrence[1, 1, 6] = true,
    x_SetOccurrence[2, 1, 7] = true,
    x_SetOccurrence[2, 1, 8] = true,
    exists v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[1, 2, v__0]
          /\
          x_SetExplicitVarSize_tuple2[1, 2, v__0] = 7,
    exists v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[2, 2, v__0]
          /\
          x_SetExplicitVarSize_tuple2[2, 2, v__0] = 8,
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1, 2)
               . (forAll v__2 : int(1..2)
                      . x_SetExplicitVarSize_tuple1[v__0, v__1, v__2]
                        /\
                        x_SetExplicitVarSize_tuple1[v__0, v__1, v__2 + 1]
                        ->
                        x_SetExplicitVarSize_tuple2[v__0, v__1, v__2]
                        <
                        x_SetExplicitVarSize_tuple2[v__0, v__1, v__2 + 1])
                 /\
                 (forAll v__2 : int(1..2)
                      . x_SetExplicitVarSize_tuple1[v__0, v__1, v__2]
                        <=
                        x_SetExplicitVarSize_tuple1[v__0, v__1, v__2 + 1])),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1, 2)
               . (forAll v__2 : int(6, 7, 8)
                      . (exists v__3 : int(1..3)
                             . x_SetExplicitVarSize_tuple1[v__0, v__1, v__3]
                               /\
                               x_SetExplicitVarSize_tuple2[v__0, v__1, v__3] = v__2)
                        <->
                        x_SetOccurrence[v__0, v__1, v__2] = true)
                 /\
                 (forAll v__2 : int(6, 7, 8)
                      . (exists v__3 : int(1..3)
                             . x_SetExplicitVarSize_tuple1[v__0, v__1, v__3]
                               /\
                               x_SetExplicitVarSize_tuple2[v__0, v__1, v__3] = v__2)
                        <->
                        x_SetOccurrence[v__0, v__1, v__2] = true)),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1, 2)
               . (sum v__2 : int(1..3) . x_SetExplicitVarSize_tuple1[v__0, v__1, v__2]) >= 1),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1, 2)
               . (sum v__2 : int(6, 7, 8) . x_SetOccurrence[v__0, v__1, v__2]) >= 1),
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[1, 2, v__0]
          ->
          7 = x_SetExplicitVarSize_tuple2[1, 2, v__0],
    forAll v__0 : int(1..3)
        . x_SetExplicitVarSize_tuple1[2, 2, v__0]
          ->
          8 = x_SetExplicitVarSize_tuple2[2, 2, v__0],
    forAll v__0 : int(6, 7, 8) . x_SetOccurrence[1, 1, v__0] -> 6 = v__0,
    forAll v__0 : int(6, 7, 8) . x_SetOccurrence[2, 1, v__0] -> 7 = v__0 \/ 8 = v__0
