language ESSENCE' 1.0

find a_tuple1: int(0..9)
find b_tuple1: int(0..9)
find b_tuple2: int(3..8)
find b_tuple3_ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find b_tuple3_ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(3..4)
find c_tuple1: int(0..9)
find c_tuple2_ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find c_tuple2_ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(3..4)
such that
    c_tuple1 = a_tuple1,
    forAll v__8 : int(1..2)
        . c_tuple2_ExplicitVarSize_tuple1[v__8]
          ->
          (exists v__7 : int(1..2)
               . b_tuple3_ExplicitVarSize_tuple1[v__7]
                 /\
                 b_tuple3_ExplicitVarSize_tuple2[v__7] = c_tuple2_ExplicitVarSize_tuple2[v__8]),
    forAll v__12 : int(1..2)
        . b_tuple3_ExplicitVarSize_tuple1[v__12]
          ->
          (exists v__11 : int(1..2)
               . c_tuple2_ExplicitVarSize_tuple1[v__11]
                 /\
                 c_tuple2_ExplicitVarSize_tuple2[v__11]
                 =
                 b_tuple3_ExplicitVarSize_tuple2[v__12]),
    forAll v__1 : int(1..2)
        . (forAll v__2 : int(1..2)
               . v__1 < v__2 /\ b_tuple3_ExplicitVarSize_tuple1[v__1]
                 /\
                 b_tuple3_ExplicitVarSize_tuple1[v__2]
                 ->
                 b_tuple3_ExplicitVarSize_tuple2[v__1] < b_tuple3_ExplicitVarSize_tuple2[v__2]),
    forAll v__1 : int(1..1)
        . b_tuple3_ExplicitVarSize_tuple1[v__1]
          <=
          b_tuple3_ExplicitVarSize_tuple1[v__1 + 1],
    forAll v__3 : int(1..2)
        . (forAll v__4 : int(1..2)
               . v__3 < v__4 /\ c_tuple2_ExplicitVarSize_tuple1[v__3]
                 /\
                 c_tuple2_ExplicitVarSize_tuple1[v__4]
                 ->
                 c_tuple2_ExplicitVarSize_tuple2[v__3] < c_tuple2_ExplicitVarSize_tuple2[v__4]),
    forAll v__3 : int(1..1)
        . c_tuple2_ExplicitVarSize_tuple1[v__3]
          <=
          c_tuple2_ExplicitVarSize_tuple1[v__3 + 1]
