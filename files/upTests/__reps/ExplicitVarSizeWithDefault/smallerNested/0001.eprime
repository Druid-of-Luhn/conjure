language ESSENCE' 1.0

find s_Explicit_ExplicitVarSizeWithDefault:
        matrix indexed by [int(1..2), int(1..4)] of int(0..4)
such that
    (sum v__0 : int(1..4) . s_Explicit_ExplicitVarSizeWithDefault[1, v__0] != 0)
    >=
    3,
    (sum v__0 : int(1..4) . s_Explicit_ExplicitVarSizeWithDefault[2, v__0] != 0)
    >=
    3,
    forAll v__0 : int(1..2)
        . (exists v__1 : int(1..4)
               . s_Explicit_ExplicitVarSizeWithDefault[v__0, v__1] != 0
                 /\
                 s_Explicit_ExplicitVarSizeWithDefault[v__0, v__1] = 2),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . v__0 < v__1
                 ->
                 !((forAll v__2 : int(1..4)
                        . (exists v__3 : int(1..4)
                               . s_Explicit_ExplicitVarSizeWithDefault[v__0, v__3] != 0
                                 /\
                                 s_Explicit_ExplicitVarSizeWithDefault[v__0, v__3] = v__2)
                          <->
                          (exists v__3 : int(1..4)
                               . s_Explicit_ExplicitVarSizeWithDefault[v__1, v__3] != 0
                                 /\
                                 s_Explicit_ExplicitVarSizeWithDefault[v__1, v__3] = v__2))
                   /\
                   (forAll v__2 : int(1..4)
                        . (exists v__3 : int(1..4)
                               . s_Explicit_ExplicitVarSizeWithDefault[v__0, v__3] != 0
                                 /\
                                 s_Explicit_ExplicitVarSizeWithDefault[v__0, v__3] = v__2)
                          <->
                          (exists v__3 : int(1..4)
                               . s_Explicit_ExplicitVarSizeWithDefault[v__1, v__3] != 0
                                 /\
                                 s_Explicit_ExplicitVarSizeWithDefault[v__1, v__3] = v__2)))),
    forAll v__0 : int(1..3)
        . s_Explicit_ExplicitVarSizeWithDefault[1, v__0] != 0
          /\
          s_Explicit_ExplicitVarSizeWithDefault[1, v__0 + 1] != 0
          ->
          s_Explicit_ExplicitVarSizeWithDefault[1, v__0]
          <
          s_Explicit_ExplicitVarSizeWithDefault[1, v__0 + 1],
    forAll v__0 : int(1..3)
        . s_Explicit_ExplicitVarSizeWithDefault[2, v__0] != 0
          /\
          s_Explicit_ExplicitVarSizeWithDefault[2, v__0 + 1] != 0
          ->
          s_Explicit_ExplicitVarSizeWithDefault[2, v__0]
          <
          s_Explicit_ExplicitVarSizeWithDefault[2, v__0 + 1],
    forAll v__0 : int(1..3)
        . s_Explicit_ExplicitVarSizeWithDefault[1, v__0]
          <=
          s_Explicit_ExplicitVarSizeWithDefault[1, v__0 + 1],
    forAll v__0 : int(1..3)
        . s_Explicit_ExplicitVarSizeWithDefault[2, v__0]
          <=
          s_Explicit_ExplicitVarSizeWithDefault[2, v__0 + 1]
