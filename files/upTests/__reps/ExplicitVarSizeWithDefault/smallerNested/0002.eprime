language ESSENCE' 1.0

find s_SetExplicit_SetExplicitVarSizeWithDefault:
        matrix indexed by [int(1..2), int(1..4)] of int(0..4)
such that
    (forAll v__0 : int(1..4)
         . s_SetExplicit_SetExplicitVarSizeWithDefault[1, v__0] != 0 -> false)
    /\
    (forAll v__0 : int(1..4)
         . s_SetExplicit_SetExplicitVarSizeWithDefault[2, v__0] != 0 -> false)
    \/
    s_SetExplicit_SetExplicitVarSizeWithDefault[1, ..]
    <lex
    s_SetExplicit_SetExplicitVarSizeWithDefault[2, ..],
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..3)
               . s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1] != 0
                 /\
                 s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1 + 1] != 0
                 ->
                 s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <
                 s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1 + 1])
          /\
          (forAll v__1 : int(1..3)
               . s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1]
                 <=
                 s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1 + 1]),
    forAll v__0 : int(1..2)
        . (sum v__1 : int(1..4)
               . s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1] != 0)
          >=
          3,
    forAll v__0 : int(1..2)
        . (exists v__1 : int(1..4)
               . s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1] != 0
                 /\
                 s_SetExplicit_SetExplicitVarSizeWithDefault[v__0, v__1] = 2)
