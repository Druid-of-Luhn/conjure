MINION 3
# CSE_number = 0
# CSE_eliminated_expressions = 0
# CSE_total_size = 0
**VARIABLES**
BOOL s_SetExplicitVarSize_tuple1_00000 #
BOOL s_SetExplicitVarSize_tuple1_00001 #
BOOL s_SetExplicitVarSize_tuple1_00002 #
BOOL s_SetExplicitVarSize_tuple1_00003 #
DISCRETE s_SetExplicitVarSize_tuple2_00000 #
{1..4}
DISCRETE s_SetExplicitVarSize_tuple2_00001 #
{1..4}
DISCRETE s_SetExplicitVarSize_tuple2_00002 #
{1..4}
DISCRETE s_SetExplicitVarSize_tuple2_00003 #
{1..4}
BOOL aux0 #(s_SetExplicitVarSize_tuple1_00000 /\ s_SetExplicitVarSize_tuple1_00001)
BOOL aux1 #(s_SetExplicitVarSize_tuple2_00000<s_SetExplicitVarSize_tuple2_00001)
BOOL aux2 #(s_SetExplicitVarSize_tuple1_00001 /\ s_SetExplicitVarSize_tuple1_00002)
BOOL aux3 #(s_SetExplicitVarSize_tuple2_00001<s_SetExplicitVarSize_tuple2_00002)
BOOL aux4 #(s_SetExplicitVarSize_tuple1_00002 /\ s_SetExplicitVarSize_tuple1_00003)
BOOL aux5 #(s_SetExplicitVarSize_tuple2_00002<s_SetExplicitVarSize_tuple2_00003)
**SEARCH**
PRINT[[s_SetExplicitVarSize_tuple1_00000],[s_SetExplicitVarSize_tuple1_00001],[s_SetExplicitVarSize_tuple1_00002],[s_SetExplicitVarSize_tuple1_00003],[s_SetExplicitVarSize_tuple2_00000],[s_SetExplicitVarSize_tuple2_00001],[s_SetExplicitVarSize_tuple2_00002],[s_SetExplicitVarSize_tuple2_00003]]
VARORDER STATIC [s_SetExplicitVarSize_tuple1_00000,s_SetExplicitVarSize_tuple1_00001,s_SetExplicitVarSize_tuple1_00002,s_SetExplicitVarSize_tuple1_00003,s_SetExplicitVarSize_tuple2_00000,s_SetExplicitVarSize_tuple2_00001,s_SetExplicitVarSize_tuple2_00002,s_SetExplicitVarSize_tuple2_00003]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5]
**CONSTRAINTS**
reify(watched-and({w-literal(s_SetExplicitVarSize_tuple1_00000,1),w-literal(s_SetExplicitVarSize_tuple1_00001,1)}), aux0)
reify(ineq(s_SetExplicitVarSize_tuple2_00000, s_SetExplicitVarSize_tuple2_00001, -1), aux1)
reify(watched-and({w-literal(s_SetExplicitVarSize_tuple1_00001,1),w-literal(s_SetExplicitVarSize_tuple1_00002,1)}), aux2)
reify(ineq(s_SetExplicitVarSize_tuple2_00001, s_SetExplicitVarSize_tuple2_00002, -1), aux3)
reify(watched-and({w-literal(s_SetExplicitVarSize_tuple1_00002,1),w-literal(s_SetExplicitVarSize_tuple1_00003,1)}), aux4)
reify(ineq(s_SetExplicitVarSize_tuple2_00002, s_SetExplicitVarSize_tuple2_00003, -1), aux5)
sumgeq([s_SetExplicitVarSize_tuple1_00000,s_SetExplicitVarSize_tuple1_00001,s_SetExplicitVarSize_tuple1_00002,s_SetExplicitVarSize_tuple1_00003],3)
watched-or({watched-and({w-literal(s_SetExplicitVarSize_tuple2_00000,2),w-literal(s_SetExplicitVarSize_tuple1_00000,1)}),watched-and({w-literal(s_SetExplicitVarSize_tuple2_00001,2),w-literal(s_SetExplicitVarSize_tuple1_00001,1)}),watched-and({w-literal(s_SetExplicitVarSize_tuple2_00002,2),w-literal(s_SetExplicitVarSize_tuple1_00002,1)}),watched-and({w-literal(s_SetExplicitVarSize_tuple2_00003,2),w-literal(s_SetExplicitVarSize_tuple1_00003,1)})})
ineq(aux0, aux1, 0)
ineq(aux2, aux3, 0)
ineq(aux4, aux5, 0)
ineq(s_SetExplicitVarSize_tuple1_00000, s_SetExplicitVarSize_tuple1_00001, 0)
ineq(s_SetExplicitVarSize_tuple1_00001, s_SetExplicitVarSize_tuple1_00002, 0)
ineq(s_SetExplicitVarSize_tuple1_00002, s_SetExplicitVarSize_tuple1_00003, 0)
**EOF**
