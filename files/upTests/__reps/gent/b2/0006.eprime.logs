[useChannelling] True
[representation] find x: set (maxSize 2) of int(0..9)
                 (#5)
                 Set~ExplicitVarSize, Set~ExplicitVarSizeWithDefault, Set~ExplicitVarSizeWithMarker, Set~Gent, Set~Occurrence
[configuration] x§region1#Set~Gent x§region2#Set~ExplicitVarSize
[addedChannel] such that x#Set~ExplicitVarSize = x#Set~Gent
[addedDecl] find x_Set~Gent: matrix indexed by [int(0..9)] of int(0..2)
[addedDecl] find x_Set~ExplicitVarSize: matrix indexed by [int(1..2)] of (bool, int(0..9))
[addedStructuralCons] {Set~Gent}
                      (forAll v__5 : int(0..9)
                           . x_Set~Gent§region1[v__5] = 0 \/ x_Set~Gent§region1[v__5] = 1 + (sum v__4 : int(0..9) , v__4 < v__5 /\ x_Set~Gent§region1[v__4] > 0 . 1))
[Evaluator.dontCare] dontCare(x_Set~ExplicitVarSize§region2[v__1, 2]) ~~> x_Set~ExplicitVarSize§region2[v__1, 2] = 0
[addedStructuralCons] {Set~ExplicitVarSize}
                      (x_Set~ExplicitVarSize§region2[2, 1] -> x_Set~ExplicitVarSize§region2[1, 2] .< x_Set~ExplicitVarSize§region2[2, 2])
                      /\
                      (x_Set~ExplicitVarSize§region2[2, 1] -> x_Set~ExplicitVarSize§region2[1, 1])
                      /\
                      (forAll v__1 : int(1..2) , !x_Set~ExplicitVarSize§region2[v__1, 1] . x_Set~ExplicitVarSize§region2[v__1, 2] = 0)
[refn] 0
[applied] 2 in x§region1#Set~Gent
          {rules/refns/vertical/Set~Gent/in.rule}
              x_Set~Gent§region1[2] > 0
[applied] max(x§region2#Set~ExplicitVarSize)
          {rules/refns/horizontal/set/max.rule}
              {aux__8§regionS @ find aux__8: int(0..9)
                                such that forAll v__7 in x§region2#Set~ExplicitVarSize . v__7 <= aux__8§regionS
                                such that aux__8§regionS in x§region2#Set~ExplicitVarSize}
[applied] (forAll v__7 in x§region2#Set~ExplicitVarSize . v__7 <= aux__8§regionS)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (forAll v__9 : int(1..2) , x_Set~ExplicitVarSize§region2[v__9, 1] . x_Set~ExplicitVarSize§region2[v__9, 2] <= aux__8§regionS)
[applied] aux__8§regionS in x§region2#Set~ExplicitVarSize
          {rules/refns/horizontal/set/in-to-quantified.rule}
              (exists v__10 in x§region2#Set~ExplicitVarSize . v__10 = aux__8§regionS)
[applied] (exists v__10 in x§region2#Set~ExplicitVarSize . v__10 = aux__8§regionS)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (exists v__11 : int(1..2) , x_Set~ExplicitVarSize§region2[v__11, 1] . x_Set~ExplicitVarSize§region2[v__11, 2] = aux__8§regionS)
[applied] x#Set~ExplicitVarSize = x#Set~Gent
          multiple: (2)
          {rules/refns/horizontal/set/eq-better.rule}
              (forAll v__12 : int(0..9) . v__12 in x#Set~ExplicitVarSize = v__12 in x#Set~Gent)
              /\
              (forAll v__12 : int(0..9) . v__12 in x#Set~ExplicitVarSize = v__12 in x#Set~Gent)
          {rules/refns/horizontal/set/eq-to-subsets.rule}
              x#Set~ExplicitVarSize subsetEq x#Set~Gent /\ x#Set~ExplicitVarSize supsetEq x#Set~Gent
[applied] x#Set~ExplicitVarSize subsetEq x#Set~Gent
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              (forAll v__13 in x#Set~ExplicitVarSize . v__13 in x#Set~Gent)
[applied] v__13 in x#Set~Gent
          {rules/refns/vertical/Set~Gent/in.rule}
              x_Set~Gent[v__13] > 0
[applied] (forAll v__13 in x#Set~ExplicitVarSize . x_Set~Gent[v__13] > 0)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (forAll v__14 : int(1..2) , x_Set~ExplicitVarSize[v__14, 1] . x_Set~Gent[x_Set~ExplicitVarSize[v__14, 2]] > 0)
[applied] x#Set~ExplicitVarSize supsetEq x#Set~Gent
          {rules/refns/horizontal/set/supseteq-to-subseteq.rule}
              x#Set~Gent subsetEq x#Set~ExplicitVarSize
[applied] x#Set~Gent subsetEq x#Set~ExplicitVarSize
          {rules/refns/horizontal/set/subseteq-to-quantified.rule}
              (forAll v__15 in x#Set~Gent . v__15 in x#Set~ExplicitVarSize)
[applied] v__15 in x#Set~ExplicitVarSize
          {rules/refns/horizontal/set/in-to-quantified.rule}
              (exists v__16 in x#Set~ExplicitVarSize . v__16 = v__15)
[applied] (exists v__16 in x#Set~ExplicitVarSize . v__16 = v__15)
          {rules/refns/vertical/Set~ExplicitVarSize/quantified.rule}
              (exists v__17 : int(1..2) , x_Set~ExplicitVarSize[v__17, 1] . x_Set~ExplicitVarSize[v__17, 2] = v__15)
[applied] (forAll v__15 in x#Set~Gent . (exists v__17 : int(1..2) , x_Set~ExplicitVarSize[v__17, 1] . x_Set~ExplicitVarSize[v__17, 2] = v__15))
          {rules/refns/vertical/Set~Gent/quantified.rule}
              (forAll v__18 : int(0..9) , x_Set~Gent[v__18] > 0 . (exists v__17 : int(1..2) , x_Set~ExplicitVarSize[v__17, 1] . x_Set~ExplicitVarSize[v__17, 2] = v__18))
[applied] x_Set~ExplicitVarSize§region2[1, 2] .< x_Set~ExplicitVarSize§region2[2, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              x_Set~ExplicitVarSize§region2[1, 2] < x_Set~ExplicitVarSize§region2[2, 2]
[removeRefinedDecl] find x: set (maxSize 2) of int(0..9)
[matrixToTuple] x_Set~ExplicitVarSize∑1
[removedDecl] find x_Set~ExplicitVarSize: matrix indexed by [int(1..2)] of (bool, int(0..9))
              Added the following:
              find x_Set~ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
              find x_Set~ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(0..9)
[repr] 1