language ESSENCE' 1.0

given n: int
find x_SetExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
find x_SetExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(0..10 + n)
find aux__7: int(0..10 + n)
such that
    x_SetExplicitVarSize_tuple1[1] /\ x_SetExplicitVarSize_tuple1[2]
    ->
    x_SetExplicitVarSize_tuple2[1] < x_SetExplicitVarSize_tuple2[2],
    8 < aux__7,
    x_SetExplicitVarSize_tuple1[1] <= x_SetExplicitVarSize_tuple1[2],
    exists v__0 : int(1..2)
        . x_SetExplicitVarSize_tuple1[v__0]
          /\
          x_SetExplicitVarSize_tuple2[v__0] = aux__7,
    exists v__0 : int(1..2)
        . x_SetExplicitVarSize_tuple1[v__0] /\ x_SetExplicitVarSize_tuple2[v__0] = 2,
    forAll v__0 : int(1..2)
        . x_SetExplicitVarSize_tuple1[v__0]
          ->
          x_SetExplicitVarSize_tuple2[v__0] <= aux__7
