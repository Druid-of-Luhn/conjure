language ESSENCE' 1.0

find x_ExplicitVarSize_tuple1:
        matrix indexed by [int(3, 4), int(1, 2), int(1..2)] of bool
find x_ExplicitVarSize_tuple2:
        matrix indexed by [int(3, 4), int(1, 2), int(1..2)] of int(6..8)
such that
    x_ExplicitVarSize_tuple1[3, 1, 1] <= x_ExplicitVarSize_tuple1[3, 1, 2],
    x_ExplicitVarSize_tuple1[3, 2, 1] <= x_ExplicitVarSize_tuple1[3, 2, 2],
    x_ExplicitVarSize_tuple1[4, 1, 1] <= x_ExplicitVarSize_tuple1[4, 1, 2],
    x_ExplicitVarSize_tuple1[4, 2, 1] <= x_ExplicitVarSize_tuple1[4, 2, 2],
    (sum v__0 : int(1..2) . x_ExplicitVarSize_tuple1[3, 1, v__0]) >= 1,
    (sum v__0 : int(1..2) . x_ExplicitVarSize_tuple1[3, 2, v__0]) >= 1,
    (sum v__0 : int(1..2) . x_ExplicitVarSize_tuple1[4, 1, v__0]) >= 1,
    (sum v__0 : int(1..2) . x_ExplicitVarSize_tuple1[4, 2, v__0]) >= 1,
    exists v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[3, 1, v__0]
          /\
          x_ExplicitVarSize_tuple2[3, 1, v__0] = 6,
    exists v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[3, 2, v__0]
          /\
          x_ExplicitVarSize_tuple2[3, 2, v__0] = 7,
    exists v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[4, 1, v__0]
          /\
          x_ExplicitVarSize_tuple2[4, 1, v__0] = 6,
    exists v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[4, 1, v__0]
          /\
          x_ExplicitVarSize_tuple2[4, 1, v__0] = 7,
    exists v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[4, 2, v__0]
          /\
          x_ExplicitVarSize_tuple2[4, 2, v__0] = 8,
    forAll v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[3, 1, v__0]
          ->
          6 = x_ExplicitVarSize_tuple2[3, 1, v__0],
    forAll v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[3, 2, v__0]
          ->
          7 = x_ExplicitVarSize_tuple2[3, 2, v__0],
    forAll v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[4, 1, v__0]
          ->
          6 = x_ExplicitVarSize_tuple2[4, 1, v__0]
          \/
          7 = x_ExplicitVarSize_tuple2[4, 1, v__0],
    forAll v__0 : int(1..2)
        . x_ExplicitVarSize_tuple1[4, 2, v__0]
          ->
          8 = x_ExplicitVarSize_tuple2[4, 2, v__0],
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . v__0 < v__1 /\ x_ExplicitVarSize_tuple1[3, 1, v__0]
                 /\
                 x_ExplicitVarSize_tuple1[3, 1, v__1]
                 ->
                 x_ExplicitVarSize_tuple2[3, 1, v__0] < x_ExplicitVarSize_tuple2[3, 1, v__1]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . v__0 < v__1 /\ x_ExplicitVarSize_tuple1[3, 2, v__0]
                 /\
                 x_ExplicitVarSize_tuple1[3, 2, v__1]
                 ->
                 x_ExplicitVarSize_tuple2[3, 2, v__0] < x_ExplicitVarSize_tuple2[3, 2, v__1]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . v__0 < v__1 /\ x_ExplicitVarSize_tuple1[4, 1, v__0]
                 /\
                 x_ExplicitVarSize_tuple1[4, 1, v__1]
                 ->
                 x_ExplicitVarSize_tuple2[4, 1, v__0] < x_ExplicitVarSize_tuple2[4, 1, v__1]),
    forAll v__0 : int(1..2)
        . (forAll v__1 : int(1..2)
               . v__0 < v__1 /\ x_ExplicitVarSize_tuple1[4, 2, v__0]
                 /\
                 x_ExplicitVarSize_tuple1[4, 2, v__1]
                 ->
                 x_ExplicitVarSize_tuple2[4, 2, v__0] < x_ExplicitVarSize_tuple2[4, 2, v__1])
