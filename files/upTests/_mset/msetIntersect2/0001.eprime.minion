MINION 3
# CSE_number = 28
# CSE_eliminated_expressions = 112
# CSE_total_size = 84
**VARIABLES**
DISCRETE a_MSetExplicit_00000 #
{3..7}
DISCRETE a_MSetExplicit_00001 #
{3..7}
DISCRETE a_MSetExplicit_00002 #
{3..7}
DISCRETE a_MSetExplicit_00003 #
{3..7}
DISCRETE b_MSetExplicit_00000 #
{3..7}
DISCRETE b_MSetExplicit_00001 #
{3..7}
DISCRETE b_MSetExplicit_00002 #
{3..7}
DISCRETE b_MSetExplicit_00003 #
{3..7}
DISCRETE c #
{3..7}
BOOL aux0 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00003)
BOOL aux1 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00002)
BOOL aux2 #CSE: 4 occurrences of: (b_MSetExplicit_00000=b_MSetExplicit_00001)
BOOL aux3 #CSE: 4 occurrences of: (b_MSetExplicit_00001=b_MSetExplicit_00003)
BOOL aux4 #CSE: 4 occurrences of: (b_MSetExplicit_00001=b_MSetExplicit_00002)
BOOL aux5 #CSE: 4 occurrences of: (b_MSetExplicit_00002=b_MSetExplicit_00003)
BOOL aux6 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00003)
BOOL aux7 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00001)
BOOL aux8 #CSE: 4 occurrences of: (a_MSetExplicit_00000=a_MSetExplicit_00002)
BOOL aux9 #CSE: 4 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00002)
BOOL aux10 #CSE: 4 occurrences of: (a_MSetExplicit_00001=a_MSetExplicit_00003)
BOOL aux11 #CSE: 4 occurrences of: (a_MSetExplicit_00002=a_MSetExplicit_00003)
BOOL aux12 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00000)
BOOL aux13 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00001)
BOOL aux14 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00002)
BOOL aux15 #CSE: 4 occurrences of: (b_MSetExplicit_00001=a_MSetExplicit_00003)
BOOL aux16 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00000)
BOOL aux17 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00001)
BOOL aux18 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00002)
BOOL aux19 #CSE: 4 occurrences of: (b_MSetExplicit_00002=a_MSetExplicit_00003)
BOOL aux20 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00000)
BOOL aux21 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00001)
BOOL aux22 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00002)
BOOL aux23 #CSE: 4 occurrences of: (b_MSetExplicit_00000=a_MSetExplicit_00003)
BOOL aux24 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00000)
BOOL aux25 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00001)
BOOL aux26 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00002)
BOOL aux27 #CSE: 4 occurrences of: (b_MSetExplicit_00003=a_MSetExplicit_00003)
BOOL aux28 #(b_MSetExplicit_00000=3)
BOOL aux29 #(b_MSetExplicit_00001=3)
BOOL aux30 #(b_MSetExplicit_00002=3)
BOOL aux31 #(b_MSetExplicit_00003=3)
DISCRETE aux32 #(aux28 + aux29 + aux30 + aux31)
{0..4}
BOOL aux33 #(a_MSetExplicit_00000=3)
BOOL aux34 #(a_MSetExplicit_00001=3)
BOOL aux35 #(a_MSetExplicit_00002=3)
BOOL aux36 #(a_MSetExplicit_00003=3)
DISCRETE aux37 #(aux33 + aux34 + aux35 + aux36)
{0..4}
DISCRETE aux38 #min(aux32, aux37)
{0..4}
BOOL aux39 #(b_MSetExplicit_00000=4)
BOOL aux40 #(b_MSetExplicit_00001=4)
BOOL aux41 #(b_MSetExplicit_00002=4)
BOOL aux42 #(b_MSetExplicit_00003=4)
DISCRETE aux43 #(aux39 + aux40 + aux41 + aux42)
{0..4}
BOOL aux44 #(a_MSetExplicit_00000=4)
BOOL aux45 #(a_MSetExplicit_00001=4)
BOOL aux46 #(a_MSetExplicit_00002=4)
BOOL aux47 #(a_MSetExplicit_00003=4)
DISCRETE aux48 #(aux44 + aux45 + aux46 + aux47)
{0..4}
DISCRETE aux49 #min(aux43, aux48)
{0..4}
BOOL aux50 #(b_MSetExplicit_00000=5)
BOOL aux51 #(b_MSetExplicit_00001=5)
BOOL aux52 #(b_MSetExplicit_00002=5)
BOOL aux53 #(b_MSetExplicit_00003=5)
DISCRETE aux54 #(aux50 + aux51 + aux52 + aux53)
{0..4}
BOOL aux55 #(a_MSetExplicit_00000=5)
BOOL aux56 #(a_MSetExplicit_00001=5)
BOOL aux57 #(a_MSetExplicit_00002=5)
BOOL aux58 #(a_MSetExplicit_00003=5)
DISCRETE aux59 #(aux55 + aux56 + aux57 + aux58)
{0..4}
DISCRETE aux60 #min(aux54, aux59)
{0..4}
BOOL aux61 #(b_MSetExplicit_00000=6)
BOOL aux62 #(b_MSetExplicit_00001=6)
BOOL aux63 #(b_MSetExplicit_00002=6)
BOOL aux64 #(b_MSetExplicit_00003=6)
DISCRETE aux65 #(aux61 + aux62 + aux63 + aux64)
{0..4}
BOOL aux66 #(a_MSetExplicit_00000=6)
BOOL aux67 #(a_MSetExplicit_00001=6)
BOOL aux68 #(a_MSetExplicit_00002=6)
BOOL aux69 #(a_MSetExplicit_00003=6)
DISCRETE aux70 #(aux66 + aux67 + aux68 + aux69)
{0..4}
DISCRETE aux71 #min(aux65, aux70)
{0..4}
BOOL aux72 #(b_MSetExplicit_00000=7)
BOOL aux73 #(b_MSetExplicit_00001=7)
BOOL aux74 #(b_MSetExplicit_00002=7)
BOOL aux75 #(b_MSetExplicit_00003=7)
DISCRETE aux76 #(aux72 + aux73 + aux74 + aux75)
{0..4}
BOOL aux77 #(a_MSetExplicit_00000=7)
BOOL aux78 #(a_MSetExplicit_00001=7)
BOOL aux79 #(a_MSetExplicit_00002=7)
BOOL aux80 #(a_MSetExplicit_00003=7)
DISCRETE aux81 #(aux77 + aux78 + aux79 + aux80)
{0..4}
DISCRETE aux82 #min(aux76, aux81)
{0..4}
BOOL aux83 #(((-1-1*aux6-1*aux10-1*aux11 + aux23 + aux15 + aux19 + aux27)<=0) /\ ((1 + aux7 + aux9 + aux10-1*aux21-1*aux13-1*aux17-1*aux25)<=0) /\ ((-1-1*aux2-1*aux1-1*aux0 + aux20 + aux21 + aux22 + aux23)<=0) /\ ((-1-1*aux7-1*aux8-1*aux6 + aux20 + aux12 + aux16 + aux24)<=0) /\ ((1 + aux0 + aux3 + aux5-1*aux24-1*aux25-1*aux26-1*aux27)<=0) /\ ((1 + aux6 + aux10 + aux11-1*aux23-1*aux15-1*aux19-1*aux27)<=0) /\ ((-1-1*aux1-1*aux4-1*aux5 + aux16 + aux17 + aux18 + aux19)<=0) /\ ((1 + aux2 + aux1 + aux0-1*aux20-1*aux21-1*aux22-1*aux23)<=0) /\ ((-1-1*aux8-1*aux9-1*aux11 + aux22 + aux14 + aux18 + aux26)<=0) /\ ((1 + aux7 + aux8 + aux6-1*aux20-1*aux12-1*aux16-1*aux24)<=0) /\ ((1 + aux1 + aux4 + aux5-1*aux16-1*aux17-1*aux18-1*aux19)<=0) /\ ((1 + aux8 + aux9 + aux11-1*aux22-1*aux14-1*aux18-1*aux26)<=0) /\ ((-1-1*aux2-1*aux4-1*aux3 + aux12 + aux13 + aux14 + aux15)<=0) /\ ((-1-1*aux7-1*aux9-1*aux10 + aux21 + aux13 + aux17 + aux25)<=0) /\ ((-1-1*aux0-1*aux3-1*aux5 + aux24 + aux25 + aux26 + aux27)<=0) /\ ((1 + aux2 + aux4 + aux3-1*aux12-1*aux13-1*aux14-1*aux15)<=0))
**SEARCH**
PRINT[[a_MSetExplicit_00000],[a_MSetExplicit_00001],[a_MSetExplicit_00002],[a_MSetExplicit_00003],[b_MSetExplicit_00000],[b_MSetExplicit_00001],[b_MSetExplicit_00002],[b_MSetExplicit_00003],[c]]
VARORDER STATIC [a_MSetExplicit_00000,a_MSetExplicit_00001,a_MSetExplicit_00002,a_MSetExplicit_00003,b_MSetExplicit_00000,b_MSetExplicit_00001,b_MSetExplicit_00002,b_MSetExplicit_00003,c]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59,aux60,aux61,aux62,aux63,aux64,aux65,aux66,aux67,aux68,aux69,aux70,aux71,aux72,aux73,aux74,aux75,aux76,aux77,aux78,aux79,aux80,aux81,aux82,aux83]
**CONSTRAINTS**
reify(w-literal(b_MSetExplicit_00000,3), aux28)
reify(w-literal(b_MSetExplicit_00001,3), aux29)
reify(w-literal(b_MSetExplicit_00002,3), aux30)
reify(w-literal(b_MSetExplicit_00003,3), aux31)
reify(w-literal(a_MSetExplicit_00000,3), aux33)
reify(w-literal(a_MSetExplicit_00001,3), aux34)
reify(w-literal(a_MSetExplicit_00002,3), aux35)
reify(w-literal(a_MSetExplicit_00003,3), aux36)
min([aux32,aux37],aux38)
reify(w-literal(b_MSetExplicit_00000,4), aux39)
reify(w-literal(b_MSetExplicit_00001,4), aux40)
reify(w-literal(b_MSetExplicit_00002,4), aux41)
reify(w-literal(b_MSetExplicit_00003,4), aux42)
reify(w-literal(a_MSetExplicit_00000,4), aux44)
reify(w-literal(a_MSetExplicit_00001,4), aux45)
reify(w-literal(a_MSetExplicit_00002,4), aux46)
reify(w-literal(a_MSetExplicit_00003,4), aux47)
min([aux43,aux48],aux49)
reify(w-literal(b_MSetExplicit_00000,5), aux50)
reify(w-literal(b_MSetExplicit_00001,5), aux51)
reify(w-literal(b_MSetExplicit_00002,5), aux52)
reify(w-literal(b_MSetExplicit_00003,5), aux53)
reify(w-literal(a_MSetExplicit_00000,5), aux55)
reify(w-literal(a_MSetExplicit_00001,5), aux56)
reify(w-literal(a_MSetExplicit_00002,5), aux57)
reify(w-literal(a_MSetExplicit_00003,5), aux58)
min([aux54,aux59],aux60)
reify(w-literal(b_MSetExplicit_00000,6), aux61)
reify(w-literal(b_MSetExplicit_00001,6), aux62)
reify(w-literal(b_MSetExplicit_00002,6), aux63)
reify(w-literal(b_MSetExplicit_00003,6), aux64)
reify(w-literal(a_MSetExplicit_00000,6), aux66)
reify(w-literal(a_MSetExplicit_00001,6), aux67)
reify(w-literal(a_MSetExplicit_00002,6), aux68)
reify(w-literal(a_MSetExplicit_00003,6), aux69)
min([aux65,aux70],aux71)
reify(w-literal(b_MSetExplicit_00000,7), aux72)
reify(w-literal(b_MSetExplicit_00001,7), aux73)
reify(w-literal(b_MSetExplicit_00002,7), aux74)
reify(w-literal(b_MSetExplicit_00003,7), aux75)
reify(w-literal(a_MSetExplicit_00000,7), aux77)
reify(w-literal(a_MSetExplicit_00001,7), aux78)
reify(w-literal(a_MSetExplicit_00002,7), aux79)
reify(w-literal(a_MSetExplicit_00003,7), aux80)
min([aux76,aux81],aux82)
reify(watched-and({weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux6,aux10,aux11,aux23,aux15,aux19,aux27],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux7,aux9,aux10,aux21,aux13,aux17,aux25],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux2,aux1,aux0,aux20,aux21,aux22,aux23],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux7,aux8,aux6,aux20,aux12,aux16,aux24],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux0,aux3,aux5,aux24,aux25,aux26,aux27],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux6,aux10,aux11,aux23,aux15,aux19,aux27],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux1,aux4,aux5,aux16,aux17,aux18,aux19],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux2,aux1,aux0,aux20,aux21,aux22,aux23],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux8,aux9,aux11,aux22,aux14,aux18,aux26],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux7,aux8,aux6,aux20,aux12,aux16,aux24],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux1,aux4,aux5,aux16,aux17,aux18,aux19],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux8,aux9,aux11,aux22,aux14,aux18,aux26],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux2,aux4,aux3,aux12,aux13,aux14,aux15],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux7,aux9,aux10,aux21,aux13,aux17,aux25],0),weightedsumleq([1,-1,-1,-1,1,1,1,1],[-1,aux0,aux3,aux5,aux24,aux25,aux26,aux27],0),weightedsumleq([1,1,1,1,-1,-1,-1,-1],[1,aux2,aux4,aux3,aux12,aux13,aux14,aux15],0)}), aux83)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00003), aux0)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00002), aux1)
reify(eq(b_MSetExplicit_00000,b_MSetExplicit_00001), aux2)
reify(eq(b_MSetExplicit_00001,b_MSetExplicit_00003), aux3)
reify(eq(b_MSetExplicit_00001,b_MSetExplicit_00002), aux4)
reify(eq(b_MSetExplicit_00002,b_MSetExplicit_00003), aux5)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00003), aux6)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00001), aux7)
reify(eq(a_MSetExplicit_00000,a_MSetExplicit_00002), aux8)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00002), aux9)
reify(eq(a_MSetExplicit_00001,a_MSetExplicit_00003), aux10)
reify(eq(a_MSetExplicit_00002,a_MSetExplicit_00003), aux11)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00000), aux12)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00001), aux13)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00002), aux14)
reify(eq(b_MSetExplicit_00001,a_MSetExplicit_00003), aux15)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00000), aux16)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00001), aux17)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00002), aux18)
reify(eq(b_MSetExplicit_00002,a_MSetExplicit_00003), aux19)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00000), aux20)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00001), aux21)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00002), aux22)
reify(eq(b_MSetExplicit_00000,a_MSetExplicit_00003), aux23)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00000), aux24)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00001), aux25)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00002), aux26)
reify(eq(b_MSetExplicit_00003,a_MSetExplicit_00003), aux27)
eq(aux83,0)
ineq(a_MSetExplicit_00000, a_MSetExplicit_00001, 0)
ineq(a_MSetExplicit_00001, a_MSetExplicit_00002, 0)
ineq(a_MSetExplicit_00002, a_MSetExplicit_00003, 0)
ineq(b_MSetExplicit_00000, b_MSetExplicit_00001, 0)
ineq(b_MSetExplicit_00001, b_MSetExplicit_00002, 0)
ineq(b_MSetExplicit_00002, b_MSetExplicit_00003, 0)
sumleq([aux28,aux29,aux30,aux31],aux32)
sumgeq([aux28,aux29,aux30,aux31],aux32)
sumleq([aux33,aux34,aux35,aux36],aux37)
sumgeq([aux33,aux34,aux35,aux36],aux37)
sumleq([aux39,aux40,aux41,aux42],aux43)
sumgeq([aux39,aux40,aux41,aux42],aux43)
sumleq([aux44,aux45,aux46,aux47],aux48)
sumgeq([aux44,aux45,aux46,aux47],aux48)
sumleq([aux50,aux51,aux52,aux53],aux54)
sumgeq([aux50,aux51,aux52,aux53],aux54)
sumleq([aux55,aux56,aux57,aux58],aux59)
sumgeq([aux55,aux56,aux57,aux58],aux59)
sumleq([aux61,aux62,aux63,aux64],aux65)
sumgeq([aux61,aux62,aux63,aux64],aux65)
sumleq([aux66,aux67,aux68,aux69],aux70)
sumgeq([aux66,aux67,aux68,aux69],aux70)
sumleq([aux72,aux73,aux74,aux75],aux76)
sumgeq([aux72,aux73,aux74,aux75],aux76)
sumleq([aux77,aux78,aux79,aux80],aux81)
sumgeq([aux77,aux78,aux79,aux80],aux81)
sumleq([aux38,aux49,aux60,aux71,aux82],c)
sumgeq([aux38,aux49,aux60,aux71,aux82],c)
**EOF**
