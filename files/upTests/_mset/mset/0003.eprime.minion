MINION 3
# CSE_number = 35
# CSE_eliminated_expressions = 100
# CSE_total_size = 105
**VARIABLES**
DISCRETE x_MSetExplicit_00000 #
{4..9}
DISCRETE x_MSetExplicit_00001 #
{4..9}
DISCRETE x_MSetExplicit_00002 #
{4..9}
DISCRETE x_MSetExplicit_00003 #
{4..9}
DISCRETE x_MSetExplicit_00004 #
{4..9}
DISCRETE y_MSetOccurrence_00000 #
{0..3}
DISCRETE y_MSetOccurrence_00001 #
{0..3}
DISCRETE y_MSetOccurrence_00002 #
{0..3}
DISCRETE y_MSetOccurrence_00003 #
{0..3}
DISCRETE y_MSetOccurrence_00004 #
{0..3}
BOOL aux0 #CSE: 2 occurrences of: (x_MSetExplicit_00003=x_MSetExplicit_00004)
BOOL aux1 #CSE: 2 occurrences of: (x_MSetExplicit_00001=x_MSetExplicit_00002)
BOOL aux2 #CSE: 2 occurrences of: (x_MSetExplicit_00001=x_MSetExplicit_00004)
BOOL aux3 #CSE: 2 occurrences of: (x_MSetExplicit_00001=x_MSetExplicit_00003)
BOOL aux4 #CSE: 2 occurrences of: (x_MSetExplicit_00002=x_MSetExplicit_00003)
BOOL aux5 #CSE: 2 occurrences of: (x_MSetExplicit_00002=x_MSetExplicit_00004)
BOOL aux6 #CSE: 2 occurrences of: (x_MSetExplicit_00000=x_MSetExplicit_00001)
BOOL aux7 #CSE: 2 occurrences of: (x_MSetExplicit_00000=x_MSetExplicit_00002)
BOOL aux8 #CSE: 2 occurrences of: (x_MSetExplicit_00000=x_MSetExplicit_00003)
BOOL aux9 #CSE: 2 occurrences of: (x_MSetExplicit_00000=x_MSetExplicit_00004)
BOOL aux10 #CSE: 8 occurrences of: (0<y_MSetOccurrence_00004)
BOOL aux11 #CSE: 8 occurrences of: (0<y_MSetOccurrence_00001)
BOOL aux12 #CSE: 8 occurrences of: (0<y_MSetOccurrence_00002)
BOOL aux13 #CSE: 3 occurrences of: (x_MSetExplicit_00002=4)
BOOL aux14 #CSE: 3 occurrences of: (x_MSetExplicit_00001=4)
BOOL aux15 #CSE: 3 occurrences of: (x_MSetExplicit_00000=4)
BOOL aux16 #CSE: 3 occurrences of: (x_MSetExplicit_00004=4)
BOOL aux17 #CSE: 3 occurrences of: (x_MSetExplicit_00003=4)
BOOL aux18 #CSE: 2 occurrences of: (x_MSetExplicit_00003=7)
BOOL aux19 #CSE: 2 occurrences of: (x_MSetExplicit_00003=6)
BOOL aux20 #CSE: 2 occurrences of: (x_MSetExplicit_00003=5)
BOOL aux21 #CSE: 2 occurrences of: (x_MSetExplicit_00004=7)
BOOL aux22 #CSE: 2 occurrences of: (x_MSetExplicit_00004=5)
BOOL aux23 #CSE: 2 occurrences of: (x_MSetExplicit_00004=6)
BOOL aux24 #CSE: 2 occurrences of: (x_MSetExplicit_00000=7)
BOOL aux25 #CSE: 2 occurrences of: (x_MSetExplicit_00001=6)
BOOL aux26 #CSE: 2 occurrences of: (x_MSetExplicit_00001=7)
BOOL aux27 #CSE: 2 occurrences of: (x_MSetExplicit_00001=5)
BOOL aux28 #CSE: 2 occurrences of: (x_MSetExplicit_00002=5)
BOOL aux29 #CSE: 2 occurrences of: (x_MSetExplicit_00002=6)
BOOL aux30 #CSE: 2 occurrences of: (x_MSetExplicit_00002=7)
BOOL aux31 #CSE: 2 occurrences of: (x_MSetExplicit_00000=6)
BOOL aux32 #CSE: 2 occurrences of: (x_MSetExplicit_00000=5)
BOOL aux33 #CSE: 3 occurrences of: (0<y_MSetOccurrence_00000)
BOOL aux34 #CSE: 8 occurrences of: (0<y_MSetOccurrence_00003)
BOOL aux35 #(aux15*aux11)
BOOL aux36 #(aux32*aux12)
BOOL aux37 #(aux31*aux34)
BOOL aux38 #(aux24*aux10)
BOOL aux39 #(aux14*aux11)
BOOL aux40 #(aux27*aux12)
BOOL aux41 #(aux25*aux34)
BOOL aux42 #(aux26*aux10)
BOOL aux43 #(aux13*aux11)
BOOL aux44 #(aux28*aux12)
BOOL aux45 #(aux29*aux34)
BOOL aux46 #(aux30*aux10)
BOOL aux47 #(aux17*aux11)
BOOL aux48 #(aux20*aux12)
BOOL aux49 #(aux19*aux34)
BOOL aux50 #(aux18*aux10)
BOOL aux51 #(aux16*aux11)
BOOL aux52 #(aux22*aux12)
BOOL aux53 #(aux23*aux34)
BOOL aux54 #(aux21*aux10)
BOOL aux55 #(aux33<=0)
BOOL aux56 #(aux11<=(aux15 + aux14 + aux13 + aux17 + aux16))
BOOL aux57 #(aux12<=(aux32 + aux27 + aux28 + aux20 + aux22))
BOOL aux58 #(aux34<=(aux31 + aux25 + aux29 + aux19 + aux23))
BOOL aux59 #(aux10<=(aux24 + aux26 + aux30 + aux18 + aux21))
**SEARCH**
PRINT[[x_MSetExplicit_00000],[x_MSetExplicit_00001],[x_MSetExplicit_00002],[x_MSetExplicit_00003],[x_MSetExplicit_00004],[y_MSetOccurrence_00000],[y_MSetOccurrence_00001],[y_MSetOccurrence_00002],[y_MSetOccurrence_00003],[y_MSetOccurrence_00004]]
VARORDER STATIC [x_MSetExplicit_00000,x_MSetExplicit_00001,x_MSetExplicit_00002,x_MSetExplicit_00003,x_MSetExplicit_00004,y_MSetOccurrence_00000,y_MSetOccurrence_00001,y_MSetOccurrence_00002,y_MSetOccurrence_00003,y_MSetOccurrence_00004]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10,aux11,aux12,aux13,aux14,aux15,aux16,aux17,aux18,aux19,aux20,aux21,aux22,aux23,aux24,aux25,aux26,aux27,aux28,aux29,aux30,aux31,aux32,aux33,aux34,aux35,aux36,aux37,aux38,aux39,aux40,aux41,aux42,aux43,aux44,aux45,aux46,aux47,aux48,aux49,aux50,aux51,aux52,aux53,aux54,aux55,aux56,aux57,aux58,aux59]
**CONSTRAINTS**
product(aux15, aux11, aux35)
product(aux32, aux12, aux36)
product(aux31, aux34, aux37)
product(aux24, aux10, aux38)
product(aux14, aux11, aux39)
product(aux27, aux12, aux40)
product(aux25, aux34, aux41)
product(aux26, aux10, aux42)
product(aux13, aux11, aux43)
product(aux28, aux12, aux44)
product(aux29, aux34, aux45)
product(aux30, aux10, aux46)
product(aux17, aux11, aux47)
product(aux20, aux12, aux48)
product(aux19, aux34, aux49)
product(aux18, aux10, aux50)
product(aux16, aux11, aux51)
product(aux22, aux12, aux52)
product(aux23, aux34, aux53)
product(aux21, aux10, aux54)
reify(ineq(aux33, 0, 0), aux55)
reify(sumgeq([aux15,aux14,aux13,aux17,aux16],aux11), aux56)
reify(sumgeq([aux32,aux27,aux28,aux20,aux22],aux12), aux57)
reify(sumgeq([aux31,aux25,aux29,aux19,aux23],aux34), aux58)
reify(sumgeq([aux24,aux26,aux30,aux18,aux21],aux10), aux59)
reify(eq(x_MSetExplicit_00003,x_MSetExplicit_00004), aux0)
reify(eq(x_MSetExplicit_00001,x_MSetExplicit_00002), aux1)
reify(eq(x_MSetExplicit_00001,x_MSetExplicit_00004), aux2)
reify(eq(x_MSetExplicit_00001,x_MSetExplicit_00003), aux3)
reify(eq(x_MSetExplicit_00002,x_MSetExplicit_00003), aux4)
reify(eq(x_MSetExplicit_00002,x_MSetExplicit_00004), aux5)
reify(eq(x_MSetExplicit_00000,x_MSetExplicit_00001), aux6)
reify(eq(x_MSetExplicit_00000,x_MSetExplicit_00002), aux7)
reify(eq(x_MSetExplicit_00000,x_MSetExplicit_00003), aux8)
reify(eq(x_MSetExplicit_00000,x_MSetExplicit_00004), aux9)
reify(ineq(0, y_MSetOccurrence_00004, -1), aux10)
reify(ineq(0, y_MSetOccurrence_00001, -1), aux11)
reify(ineq(0, y_MSetOccurrence_00002, -1), aux12)
reify(w-literal(x_MSetExplicit_00002,4), aux13)
reify(w-literal(x_MSetExplicit_00001,4), aux14)
reify(w-literal(x_MSetExplicit_00000,4), aux15)
reify(w-literal(x_MSetExplicit_00004,4), aux16)
reify(w-literal(x_MSetExplicit_00003,4), aux17)
reify(w-literal(x_MSetExplicit_00003,7), aux18)
reify(w-literal(x_MSetExplicit_00003,6), aux19)
reify(w-literal(x_MSetExplicit_00003,5), aux20)
reify(w-literal(x_MSetExplicit_00004,7), aux21)
reify(w-literal(x_MSetExplicit_00004,5), aux22)
reify(w-literal(x_MSetExplicit_00004,6), aux23)
reify(w-literal(x_MSetExplicit_00000,7), aux24)
reify(w-literal(x_MSetExplicit_00001,6), aux25)
reify(w-literal(x_MSetExplicit_00001,7), aux26)
reify(w-literal(x_MSetExplicit_00001,5), aux27)
reify(w-literal(x_MSetExplicit_00002,5), aux28)
reify(w-literal(x_MSetExplicit_00002,6), aux29)
reify(w-literal(x_MSetExplicit_00002,7), aux30)
reify(w-literal(x_MSetExplicit_00000,6), aux31)
reify(w-literal(x_MSetExplicit_00000,5), aux32)
reify(ineq(0, y_MSetOccurrence_00000, -1), aux33)
reify(ineq(0, y_MSetOccurrence_00003, -1), aux34)
watched-or({w-literal(aux15,1),w-literal(aux14,1),w-literal(aux13,1),w-literal(aux17,1),w-literal(aux16,1)})
ineq(x_MSetExplicit_00000, x_MSetExplicit_00001, 0)
ineq(x_MSetExplicit_00001, x_MSetExplicit_00002, 0)
ineq(x_MSetExplicit_00002, x_MSetExplicit_00003, 0)
ineq(x_MSetExplicit_00003, x_MSetExplicit_00004, 0)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[-1,aux35,aux36,aux37,aux38,aux6,aux7,aux8,aux9],0)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[-1,aux39,aux40,aux41,aux42,aux6,aux1,aux3,aux2],0)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[-1,aux43,aux44,aux45,aux46,aux7,aux1,aux4,aux5],0)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[-1,aux47,aux48,aux49,aux50,aux8,aux3,aux4,aux0],0)
weightedsumleq([1,1,1,1,1,-1,-1,-1,-1],[-1,aux51,aux52,aux53,aux54,aux9,aux2,aux5,aux0],0)
ineq(aux33, aux55, 0)
ineq(aux11, aux56, 0)
ineq(aux12, aux57, 0)
ineq(aux34, aux58, 0)
ineq(aux10, aux59, 0)
sumleq([aux33,aux11,aux12,aux34,aux10],3)
sumgeq([aux33,aux11,aux12,aux34,aux10],3)
**EOF**
