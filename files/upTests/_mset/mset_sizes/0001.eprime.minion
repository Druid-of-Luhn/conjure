MINION 3
# CSE_number = 6
# CSE_eliminated_expressions = 12
# CSE_total_size = 46
**VARIABLES**
DISCRETE x_MSetOccurrence_00000 #
{0..6}
DISCRETE x_MSetOccurrence_00001 #
{0..6}
DISCRETE x_MSetOccurrence_00002 #
{0..6}
DISCRETE x_MSetOccurrence_00003 #
{0..6}
DISCRETE x_MSetOccurrence_00004 #
{0..6}
DISCRETE x_MSetOccurrence_00005 #
{0..6}
DISCRETE x_MSetOccurrence_00006 #
{0..6}
DISCRETE x_MSetOccurrence_00007 #
{0..6}
DISCRETE x_MSetOccurrence_00008 #
{0..6}
DISCRETE x_MSetOccurrence_00009 #
{0..6}
DISCRETE aux0 #CSE: 2 occurrences of: ((0<x_MSetOccurrence_00000) + (0<x_MSetOccurrence_00001) + (0<x_MSetOccurrence_00002) + (0<x_MSetOccurrence_00003) + (0<x_MSetOccurrence_00004) + (0<x_MSetOccurrence_00005) + (0<x_MSetOccurrence_00006) + (0<x_MSetOccurrence_00007) + (0<x_MSetOccurrence_00008) + (0<x_MSetOccurrence_00009))
{0..10}
BOOL aux1 #CSE: 2 occurrences of: (0<x_MSetOccurrence_00004)
BOOL aux2 #CSE: 2 occurrences of: (0<x_MSetOccurrence_00000)
BOOL aux3 #CSE: 2 occurrences of: (0<x_MSetOccurrence_00001)
BOOL aux4 #CSE: 2 occurrences of: (0<x_MSetOccurrence_00002)
BOOL aux5 #CSE: 2 occurrences of: (0<x_MSetOccurrence_00003)
BOOL aux6 #(0<x_MSetOccurrence_00005)
BOOL aux7 #(0<x_MSetOccurrence_00006)
BOOL aux8 #(0<x_MSetOccurrence_00007)
BOOL aux9 #(0<x_MSetOccurrence_00008)
BOOL aux10 #(0<x_MSetOccurrence_00009)
**SEARCH**
PRINT[[x_MSetOccurrence_00000],[x_MSetOccurrence_00001],[x_MSetOccurrence_00002],[x_MSetOccurrence_00003],[x_MSetOccurrence_00004],[x_MSetOccurrence_00005],[x_MSetOccurrence_00006],[x_MSetOccurrence_00007],[x_MSetOccurrence_00008],[x_MSetOccurrence_00009]]
VARORDER STATIC [x_MSetOccurrence_00000,x_MSetOccurrence_00001,x_MSetOccurrence_00002,x_MSetOccurrence_00003,x_MSetOccurrence_00004,x_MSetOccurrence_00005,x_MSetOccurrence_00006,x_MSetOccurrence_00007,x_MSetOccurrence_00008,x_MSetOccurrence_00009]
VARORDER AUX [aux0,aux1,aux2,aux3,aux4,aux5,aux6,aux7,aux8,aux9,aux10]
**CONSTRAINTS**
reify(ineq(0, x_MSetOccurrence_00005, -1), aux6)
reify(ineq(0, x_MSetOccurrence_00006, -1), aux7)
reify(ineq(0, x_MSetOccurrence_00007, -1), aux8)
reify(ineq(0, x_MSetOccurrence_00008, -1), aux9)
reify(ineq(0, x_MSetOccurrence_00009, -1), aux10)
reify(ineq(0, x_MSetOccurrence_00004, -1), aux1)
reify(ineq(0, x_MSetOccurrence_00000, -1), aux2)
reify(ineq(0, x_MSetOccurrence_00001, -1), aux3)
reify(ineq(0, x_MSetOccurrence_00002, -1), aux4)
reify(ineq(0, x_MSetOccurrence_00003, -1), aux5)
ineq(aux0, 6, 0)
ineq(2, aux0, 0)
eq(aux2,0)
eq(aux3,0)
eq(aux4,0)
eq(aux5,0)
eq(aux1,0)
sumleq([aux2,aux3,aux4,aux5,aux1,aux6,aux7,aux8,aux9,aux10],aux0)
sumgeq([aux2,aux3,aux4,aux5,aux1,aux6,aux7,aux8,aux9,aux10],aux0)
**EOF**
