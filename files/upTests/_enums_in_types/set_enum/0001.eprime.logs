[useChannelling] True
[handleEnums] letting VCol be new type enum {rx, ry}
              ~~>
              letting VCol_fromEnum be domain int(1..2)
[representation] find se: set (minSize 1) of int(1..2)
                 (#4)
                 Set~ExplicitVarSize,
                 Set~ExplicitVarSizeWithDefault,
                 Set~ExplicitVarSizeWithMarker,
                 Set~Occurrence
[configuration] se§region1#Set~ExplicitVarSize
[addedDecl] find se_Set~ExplicitVarSize:
                    matrix indexed by [int(1..2)] of (bool, int(1..2))
[addedStructuralCons] (se_Set~ExplicitVarSize§region1[1, 1]
                       /\
                       se_Set~ExplicitVarSize§region1[2, 1]
                       ->
                       se_Set~ExplicitVarSize§region1[1, 2] .< se_Set~ExplicitVarSize§region1[2, 2])
                      /\
                      se_Set~ExplicitVarSize§region1[1, 1] >= se_Set~ExplicitVarSize§region1[2, 1]
                      (sum v__2 : int(1..2) . se_Set~ExplicitVarSize§region1[v__2, 1]) >= 1
[refn] 0
[applied] se_Set~ExplicitVarSize§region1[1, 2]
          .<
          se_Set~ExplicitVarSize§region1[2, 2]
          {rules/refns/horizontal/DotLt-ints.rule}
              se_Set~ExplicitVarSize§region1[1, 2] < se_Set~ExplicitVarSize§region1[2, 2]
[removeRefinedDecl] find se: set (minSize 1) of int(1..2)
[matrixToTuple] se_Set~ExplicitVarSize∑1
[removedDecl] find se_Set~ExplicitVarSize:
                      matrix indexed by [int(1..2)] of (bool, int(1..2))
              Added the following:
              find se_Set~ExplicitVarSize_tuple1: matrix indexed by [int(1..2)] of bool
              find se_Set~ExplicitVarSize_tuple2: matrix indexed by [int(1..2)] of int(1..2)
[repr] 1