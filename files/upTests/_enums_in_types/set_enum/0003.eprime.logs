[useChannelling] True
[handleEnums] letting VCol be new type enum {rx, ry}
              ~~>
              letting VCol_fromEnum be domain int(1..2)
[representation] find se: set (minSize 1) of int(1..2)
                 (#4)
                 Set~ExplicitVarSize,
                 Set~ExplicitVarSizeWithDefault,
                 Set~ExplicitVarSizeWithMarker,
                 Set~Occurrence
[configuration] se§region1#Set~ExplicitVarSizeWithMarker
[addedDecl] find se_Set~ExplicitVarSizeWithMarker:
                    (int(0..2), matrix indexed by [int(1..2)] of int(1..2))
[addedStructuralCons] (forAll v__5 : int(1..2)
                           , v__5 + 1 <= se_Set~ExplicitVarSizeWithMarker§region1[1]
                           . se_Set~ExplicitVarSizeWithMarker§region1[2, v__5]
                             .<
                             se_Set~ExplicitVarSizeWithMarker§region1[2, v__5 + 1])
                      se_Set~ExplicitVarSizeWithMarker§region1[1] >= 1
[refn] 0
[applied] se_Set~ExplicitVarSizeWithMarker§region1[2, v__5]
          .<
          se_Set~ExplicitVarSizeWithMarker§region1[2, v__5 + 1]
          {rules/refns/horizontal/DotLt-ints.rule}
              se_Set~ExplicitVarSizeWithMarker§region1[2, v__5]
              <
              se_Set~ExplicitVarSizeWithMarker§region1[2, v__5 + 1]
[removeRefinedDecl] find se: set (minSize 1) of int(1..2)
[removedDecl] find se_Set~ExplicitVarSizeWithMarker:
                      (int(0..2), matrix indexed by [int(1..2)] of int(1..2))
              Added the following:
              find se_Set~ExplicitVarSizeWithMarker_tuple1: int(0..2)
              find se_Set~ExplicitVarSizeWithMarker_tuple2:
                      matrix indexed by [int(1..2)] of int(1..2)
[repr] 1