[useChannelling] True
[removedDecl] find pain:
                      matrix indexed by [int(1..2), int(3)] of ((set (size 1) of int(1, 2),
                                                                 set (size 1) of int(4, 5)),
                                                                set of int(8, 9))
[matrixToTuple] pain∑2
[removedDecl] find pain_tuple1:
                      matrix indexed by [int(1..2), int(3)] of (set (size 1) of int(1, 2),
                                                                set (size 1) of int(4, 5))
[matrixToTuple] pain_tuple1∑2
[representation] find pain_tuple1_tuple1:
                         matrix indexed by [int(1..2), int(3)] of set (size 1) of int(1, 2)
                 (#2)
                 Set~Explicit, Set~Occurrence
[representation] find pain_tuple1_tuple2:
                         matrix indexed by [int(1..2), int(3)] of set (size 1) of int(4, 5)
                 (#2)
                 Set~Explicit, Set~Occurrence
[representation] find pain_tuple2:
                         matrix indexed by [int(1..2), int(3)] of set of int(8, 9)
                 (#2)
                 Set~ExplicitVarSize, Set~Occurrence
[configuration] pain_tuple1_tuple1§region1#Set~Explicit pain_tuple2§region6#Set~ExplicitVarSize pain_tuple1_tuple2§region2#Set~Explicit pain_tuple1_tuple2§region4#Set~Explicit pain_tuple1_tuple1§region3#Set~Occurrence pain_tuple2§region5#Set~ExplicitVarSize
[addedDecl] find pain_tuple2_Set~ExplicitVarSize:
                    matrix indexed by [int(1..2), int(3), int(1..2)] of (bool, int(8, 9))
[addedDecl] find pain_tuple1_tuple2_Set~Explicit:
                    matrix indexed by [int(1..2), int(3), int(1..1)] of int(4, 5)
[addedDecl] find pain_tuple1_tuple1_Set~Occurrence:
                    matrix indexed by [int(1..2), int(3), int(1, 2)] of bool
[addedDecl] find pain_tuple1_tuple1_Set~Explicit:
                    matrix indexed by [int(1..2), int(3), int(1..1)] of int(1, 2)
[refn] 0
[applied] pain_tuple1_tuple1§region1#Set~Explicit[1, 3] = {2}
          {rules/refns/horizontal/set-eq-to-subsets.rule}
              pain_tuple1_tuple1§region1#Set~Explicit[1, 3] subsetEq {2}
              /\
              pain_tuple1_tuple1§region1#Set~Explicit[1, 3] supsetEq {2}
[applied] pain_tuple1_tuple1§region1#Set~Explicit[1, 3] subsetEq {2}
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__28 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3] . v__28 in {2})
[applied] v__28 in {2}
          {rules/refns/horizontal/set-in-to-quantified.rule}
              2 = v__28
[applied] (forAll v__28 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
               . 2 = v__28)
          {rules/refns/vertical/Set~Explicit/quantified.rule}
              2 = pain_tuple1_tuple1_Set~Explicit§region1[1, 3, 1]
[applied] pain_tuple1_tuple1§region1#Set~Explicit[1, 3] supsetEq {2}
          {rules/refns/horizontal/set-supseteq-to-subseteq.rule}
              {2} subsetEq pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
[applied] {2} subsetEq pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              2 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
[applied] 2 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
          {rules/refns/horizontal/set-in-to-quantified.rule}
              (exists v__32 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3] . v__32 = 2)
[applied] (exists v__32 in pain_tuple1_tuple1§region1#Set~Explicit[1, 3]
               . v__32 = 2)
          {rules/refns/vertical/Set~Explicit/quantified.rule}
              pain_tuple1_tuple1_Set~Explicit§region1[1, 3, 1] = 2
[applied] pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] = {1}
          {rules/refns/horizontal/set-eq-to-subsets.rule}
              pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] subsetEq {1}
              /\
              pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] supsetEq {1}
[applied] pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] subsetEq {1}
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              (forAll v__34 in pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] . v__34 in {1})
[applied] v__34 in {1}
          {rules/refns/horizontal/set-in-to-quantified.rule}
              1 = v__34
[applied] (forAll v__34 in pain_tuple1_tuple1§region3#Set~Occurrence[2, 3]
               . 1 = v__34)
          {rules/refns/vertical/Set~Occurrence/quantified.rule}
              (forAll v__36 : int(1, 2)
                   , pain_tuple1_tuple1_Set~Occurrence§region3[2, 3, v__36]
                   . 1 = v__36)
[applied] pain_tuple1_tuple1§region3#Set~Occurrence[2, 3] supsetEq {1}
          {rules/refns/horizontal/set-supseteq-to-subseteq.rule}
              {1} subsetEq pain_tuple1_tuple1§region3#Set~Occurrence[2, 3]
[applied] {1} subsetEq pain_tuple1_tuple1§region3#Set~Occurrence[2, 3]
          {rules/refns/horizontal/set-subseteq-to-quantified.rule}
              1 in pain_tuple1_tuple1§region3#Set~Occurrence[2, 3]
[applied] 1 in pain_tuple1_tuple1§region3#Set~Occurrence[2, 3]
          {rules/refns/vertical/Set~Occurrence/in.rule}
              pain_tuple1_tuple1_Set~Occurrence§region3[2, 3, 1] = true
[removeRefinedDecl] find pain_tuple1_tuple1:
                            matrix indexed by [int(1..2), int(3)] of set (size 1) of int(1, 2)
[removeRefinedDecl] find pain_tuple1_tuple2:
                            matrix indexed by [int(1..2), int(3)] of set (size 1) of int(4, 5)
[removeRefinedDecl] find pain_tuple2:
                            matrix indexed by [int(1..2), int(3)] of set of int(8, 9)
[removedDecl] find pain_tuple2_Set~ExplicitVarSize:
                      matrix indexed by [int(1..2), int(3), int(1..2)] of (bool, int(8, 9))
[matrixToTuple] pain_tuple2_Set~ExplicitVarSize∑3
[repr] 1