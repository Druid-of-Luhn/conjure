language ESSENCE' 1.0

find pain_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2), int(3..4), int(1..2)] of bool
find pain_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2), int(3..4), int(1..2)] of int(6, 8)
such that
    exists v__18 : int(1..2)
        . pain_ExplicitVarSize_tuple1[1, 3, v__18]
          /\
          pain_ExplicitVarSize_tuple2[1, 3, v__18] = 6,
    exists v__20 : int(1..2)
        . pain_ExplicitVarSize_tuple1[1, 4, v__20]
          /\
          pain_ExplicitVarSize_tuple2[1, 4, v__20] = 8,
    forAll v__5 : int(1..2)
        . (forAll v__6 : int(3..4)
               . (forAll v__3 : int(1..2)
                      . (forAll v__4 : int(1..2)
                             . v__3 < v__4 /\ pain_ExplicitVarSize_tuple1[v__5, v__6, v__3]
                               /\
                               pain_ExplicitVarSize_tuple1[v__5, v__6, v__4]
                               ->
                               pain_ExplicitVarSize_tuple2[v__5, v__6, v__3]
                               <
                               pain_ExplicitVarSize_tuple2[v__5, v__6, v__4]))
                 /\
                 (forAll v__3 : int(1..1)
                      . pain_ExplicitVarSize_tuple1[v__5, v__6, v__3]
                        <=
                        pain_ExplicitVarSize_tuple1[v__5, v__6, v__3 + 1])),
    forAll v__10 : int(1..2)
        . (forAll v__11 : int(3..4)
               . (sum v__9 : int(1..2) . pain_ExplicitVarSize_tuple1[v__10, v__11, v__9]) >= 1)
