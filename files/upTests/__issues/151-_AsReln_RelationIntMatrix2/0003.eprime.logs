[useChannelling] True
[representation] find seq: function (total) int(1..3) --> int(-1, 1)
                 (#2)
                 AsReln, Matrix1D
[configuration] seq§region1#Matrix1D
[addedDecl] find seq_Matrix1D: matrix indexed by [int(1..3)] of int(-1, 1)
[refn] 0
[applied] seq§region1#Matrix1D = function(1 --> -1, 2 --> -1, 3 --> 1)
          {rules/refns/horizontal/function-eq.rule}
              (forAll v__3 in defined(seq§region1#Matrix1D)
                   . seq§region1#Matrix1D(v__3) = function(1 --> -1, 2 --> -1, 3 --> 1)(v__3))
[applied] seq§region1#Matrix1D(v__3)
          {rules/refns/vertical/function-matrix1d/function-matrix1d-image.rule}
              seq_Matrix1D§region1[v__3]
[applied] function(1 --> -1, 2 --> -1, 3 --> 1)(v__3)
          {builtIn.functionLiteralApply}
              toInt(1 = v__3) * -1 + toInt(2 = v__3) * -1 + toInt(3 = v__3)
[applied] (forAll v__3 in defined(seq§region1#Matrix1D)
               . seq_Matrix1D§region1[v__3]
                 =
                 toInt(1 = v__3) * -1 + toInt(2 = v__3) * -1 + toInt(3 = v__3))
          {rules/refns/horizontal/function-defined-quantified.rule}
              (forAll v__5 in toSet(seq§region1#Matrix1D)
                   . seq_Matrix1D§region1[v__5[1]]
                     =
                     toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]) * -1 + toInt(3 = v__5[1]))
[applied] (forAll v__5 in toSet(seq§region1#Matrix1D)
               . seq_Matrix1D§region1[v__5[1]]
                 =
                 toInt(1 = v__5[1]) * -1 + toInt(2 = v__5[1]) * -1 + toInt(3 = v__5[1]))
          {rules/refns/vertical/function-matrix1d/function-toSet-quantified.rule}
              (forAll v__6 : int(1..3)
                   . seq_Matrix1D§region1[v__6]
                     =
                     toInt(1 = v__6) * -1 + toInt(2 = v__6) * -1 + toInt(3 = v__6))
[removeRefinedDecl] find seq: function (total) int(1..3) --> int(-1, 1)
[repr] 1