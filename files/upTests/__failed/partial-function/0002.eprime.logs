[useChannelling] False
[representation] find f: function int(1..9) --> int(1..9) (#2) Function~1DPartial, Function~AsReln
[configuration] f§regionS#Function~1DPartial
[addedDecl] find f_Function~1DPartial: matrix indexed by [int(1..9)] of (bool, int(1..9))
[Evaluator.dontCare] dontCare(f_Function~1DPartial§regionS[v__1, 2]) ~~> f_Function~1DPartial§regionS[v__1, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..9) , !f_Function~1DPartial§regionS[v__1, 1] . f_Function~1DPartial§regionS[v__1, 2] = 1)
[refn] 0
[applied] |f§regionS#Function~1DPartial|
          multiple: (2)
          {rules/refns/horizontal/function-card.rule}
              |toSet(f§regionS#Function~1DPartial)|
          {rules/refns/horizontal/functions-setlike/card.rule}
              |toSet(f§regionS#Function~1DPartial)|
[applied] |toSet(f§regionS#Function~1DPartial)|
          {rules/refns/horizontal/set/card.rule}
              (sum v__4 in toSet(f§regionS#Function~1DPartial) . 1)
[applied] (sum v__4 in toSet(f§regionS#Function~1DPartial) . 1)
          {rules/refns/vertical/Function~1DPartial/toSet-quantified.rule}
              (sum v__5 : int(1..9) , f_Function~1DPartial§regionS[v__5, 1] . 1)
[removeRefinedDecl] find f: function int(1..9) --> int(1..9)
[matrixToTuple] f_Function~1DPartial∑1
[removedDecl] find f_Function~1DPartial: matrix indexed by [int(1..9)] of (bool, int(1..9))
              Added the following:
              find f_Function~1DPartial_tuple1: matrix indexed by [int(1..9)] of bool
              find f_Function~1DPartial_tuple2: matrix indexed by [int(1..9)] of int(1..9)
[repr] 1