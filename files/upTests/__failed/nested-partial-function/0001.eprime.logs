[useChannelling] True
[representation] find f: function (minSize 1) int(1..9) --> int(1..9) (#2) Function~1DPartial, Function~AsReln
[configuration] f§region2#Function~1DPartial f§region4#Function~1DPartial f§region3#Function~1DPartial f§region1#Function~1DPartial
[addedDecl] find f_Function~1DPartial: matrix indexed by [int(1..9)] of (bool, int(1..9))
[Evaluator.dontCare] dontCare(f_Function~1DPartial§region1[v__1, 2]) ~~> f_Function~1DPartial§region1[v__1, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..9) , !f_Function~1DPartial§region1[v__1, 1] . f_Function~1DPartial§region1[v__1, 2] = 1)
                      (sum v__2 : int(1..9) . toInt(f_Function~1DPartial§region1[v__2, 1])) >= 1
[Evaluator.dontCare] dontCare(f_Function~1DPartial§region4[v__1, 2]) ~~> f_Function~1DPartial§region4[v__1, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..9) , !f_Function~1DPartial§region4[v__1, 1] . f_Function~1DPartial§region4[v__1, 2] = 1)
                      (sum v__2 : int(1..9) . toInt(f_Function~1DPartial§region4[v__2, 1])) >= 1
[Evaluator.dontCare] dontCare(f_Function~1DPartial§region3[v__1, 2]) ~~> f_Function~1DPartial§region3[v__1, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..9) , !f_Function~1DPartial§region3[v__1, 1] . f_Function~1DPartial§region3[v__1, 2] = 1)
                      (sum v__2 : int(1..9) . toInt(f_Function~1DPartial§region3[v__2, 1])) >= 1
[Evaluator.dontCare] dontCare(f_Function~1DPartial§region2[v__1, 2]) ~~> f_Function~1DPartial§region2[v__1, 2] = 1
[addedStructuralCons] {Function~1DPartial}
                      (forAll v__1 : int(1..9) , !f_Function~1DPartial§region2[v__1, 1] . f_Function~1DPartial§region2[v__1, 2] = 1)
                      (sum v__2 : int(1..9) . toInt(f_Function~1DPartial§region2[v__2, 1])) >= 1
[refn] 0
[applied] f§region1#Function~1DPartial(i)
          {rules/refns/vertical/Function~1DPartial/image.rule}
              {f_Function~1DPartial§region1[i, 2] @ such that f_Function~1DPartial§region1[i, 1]}
[applied] f§region3#Function~1DPartial(i)
          {rules/refns/vertical/Function~1DPartial/image.rule}
              {f_Function~1DPartial§region3[i, 2] @ such that f_Function~1DPartial§region3[i, 1]}
[applied] f§region2#Function~1DPartial({f_Function~1DPartial§region3[i, 2] @ such that f_Function~1DPartial§region3[i, 1]})
          {rules/refns/vertical/Function~1DPartial/image.rule}
              {f_Function~1DPartial§region2[{f_Function~1DPartial§region3[i, 2] @ such that f_Function~1DPartial§region3[i, 1]}, 2] @ such that
                                                                                                                                          f_Function~1DPartial§region2[{f_Function~1DPartial§region3[i, 2] @ such that
                                                                                                                                                                                                                 f_Function~1DPartial§region3[i,
                                                                                                                                                                                                                                              1]},
                                                                                                                                                                       1]}
[applied] f§region4#Function~1DPartial(1)
          {rules/refns/vertical/Function~1DPartial/image.rule}
              {f_Function~1DPartial§region4[1, 2] @ such that f_Function~1DPartial§region4[1, 1]}
[removeRefinedDecl] find f: function (minSize 1) int(1..9) --> int(1..9)
[matrixToTuple] f_Function~1DPartial∑1
[removedDecl] find f_Function~1DPartial: matrix indexed by [int(1..9)] of (bool, int(1..9))
              Added the following:
              find f_Function~1DPartial_tuple1: matrix indexed by [int(1..9)] of bool
              find f_Function~1DPartial_tuple2: matrix indexed by [int(1..9)] of int(1..9)
[repr] 1