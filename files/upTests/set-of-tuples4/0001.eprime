language ESSENCE' 1.0

find x_ExplicitVarSize_tuple2_tuple3_Explicit:
        matrix indexed by [int(1..16), int(1..1)] of int(9)
find x_ExplicitVarSize_tuple2_tuple1_Explicit:
        matrix indexed by [int(1..16), int(1..2)] of int(6, 7)
find x_ExplicitVarSize_tuple1: matrix indexed by [int(1..16)] of bool
find x_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..16)] of int(1, 3)
such that
    exists v__14 : int(1..16)
        . x_ExplicitVarSize_tuple1[v__14]
          /\
          ((forAll v__35 : int(1..2)
                . 6 = x_ExplicitVarSize_tuple2_tuple1_Explicit[v__14, v__35]
                  \/
                  7 = x_ExplicitVarSize_tuple2_tuple1_Explicit[v__14, v__35])
           /\
           ((exists v__36 : int(1..2)
                 . x_ExplicitVarSize_tuple2_tuple1_Explicit[v__14, v__36] = 6)
            /\
            (exists v__37 : int(1..2)
                 . x_ExplicitVarSize_tuple2_tuple1_Explicit[v__14, v__37] = 7))
           /\
           (x_ExplicitVarSize_tuple2_tuple2[v__14] = 3
            /\
            ((forAll v__38 : int(1..1)
                  . 9 = x_ExplicitVarSize_tuple2_tuple3_Explicit[v__14, v__38])
             /\
             (exists v__39 : int(1..1)
                  . x_ExplicitVarSize_tuple2_tuple3_Explicit[v__14, v__39] = 9)))),
    forAll v__1 : int(1..16)
        . (forAll v__2 : int(1..16)
               . v__1 < v__2 /\ x_ExplicitVarSize_tuple1[v__1]
                 /\
                 x_ExplicitVarSize_tuple1[v__2]
                 ->
                 !((forAll v__41 : int(1..2)
                        . (exists v__40 : int(1..2)
                               . x_ExplicitVarSize_tuple2_tuple1_Explicit[v__2, v__40]
                                 =
                                 x_ExplicitVarSize_tuple2_tuple1_Explicit[v__1, v__41]))
                   /\
                   (forAll v__43 : int(1..2)
                        . (exists v__42 : int(1..2)
                               . x_ExplicitVarSize_tuple2_tuple1_Explicit[v__1, v__42]
                                 =
                                 x_ExplicitVarSize_tuple2_tuple1_Explicit[v__2, v__43])))
                 \/
                 (x_ExplicitVarSize_tuple2_tuple2[v__1] != x_ExplicitVarSize_tuple2_tuple2[v__2]
                  \/
                  !((forAll v__45 : int(1..1)
                         . (exists v__44 : int(1..1)
                                . x_ExplicitVarSize_tuple2_tuple3_Explicit[v__2, v__44]
                                  =
                                  x_ExplicitVarSize_tuple2_tuple3_Explicit[v__1, v__45]))
                    /\
                    (forAll v__47 : int(1..1)
                         . (exists v__46 : int(1..1)
                                . x_ExplicitVarSize_tuple2_tuple3_Explicit[v__1, v__46]
                                  =
                                  x_ExplicitVarSize_tuple2_tuple3_Explicit[v__2, v__47]))))),
    forAll v__1 : int(1..15)
        . x_ExplicitVarSize_tuple1[v__1] <= x_ExplicitVarSize_tuple1[v__1 + 1],
    (sum v__3 : int(1..16) . x_ExplicitVarSize_tuple1[v__3]) >= 1,
    forAll v__31 : int(1..16)
        . allDiff(x_ExplicitVarSize_tuple2_tuple3_Explicit[v__31, ..]),
    forAll v__25 : int(1..16)
        . allDiff(x_ExplicitVarSize_tuple2_tuple1_Explicit[v__25, ..])
          /\
          (forAll v__24 : int(1..1)
               . x_ExplicitVarSize_tuple2_tuple1_Explicit[v__25, v__24]
                 <
                 x_ExplicitVarSize_tuple2_tuple1_Explicit[v__25, v__24 + 1])
