language ESSENCE' 1.0

find pain_tuple1_tuple1_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple1_tuple1_ExplicitVarSize_tuple2:
        matrix indexed by [int(1..2)] of int(1, 3)
find pain_tuple1_tuple2_ExplicitVarSize_tuple1:
        matrix indexed by [int(1..2)] of bool
find pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1:
        matrix indexed by [int(1..2)] of int(1, 2)
find pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2:
        matrix indexed by [int(1..2)] of int(5)
find pain_tuple2: int(3)
such that
    forAll v__10 : int(1..2)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__10]
          ->
          3 = pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__10],
    exists v__13 : int(1..2)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__13]
          /\
          pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__13] = 3,
    forAll v__16 : int(1..2)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__16]
          ->
          1 = pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__16]
          /\
          5 = pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__16],
    exists v__19 : int(1..2)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__19]
          /\
          (pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__19] = 1
           /\
           pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__19] = 5),
    pain_tuple2 = 3,
    forAll v__5 : int(1..2)
        . (forAll v__6 : int(1..2)
               . v__5 < v__6 /\ pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5]
                 /\
                 pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__6]
                 ->
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__5]
                 !=
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple1[v__6]
                 \/
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__5]
                 !=
                 pain_tuple1_tuple2_ExplicitVarSize_tuple2_tuple2[v__6]),
    forAll v__5 : int(1..1)
        . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5]
          <=
          pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__5 + 1],
    (sum v__7 : int(1..2) . pain_tuple1_tuple2_ExplicitVarSize_tuple1[v__7]) >= 1,
    forAll v__1 : int(1..2)
        . (forAll v__2 : int(1..2)
               . v__1 < v__2 /\ pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1]
                 /\
                 pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__2]
                 ->
                 pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__1]
                 <
                 pain_tuple1_tuple1_ExplicitVarSize_tuple2[v__2]),
    forAll v__1 : int(1..1)
        . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1]
          <=
          pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__1 + 1],
    (sum v__3 : int(1..2) . pain_tuple1_tuple1_ExplicitVarSize_tuple1[v__3]) >= 1
