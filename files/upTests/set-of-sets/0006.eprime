language ESSENCE' 1.0

find x_SetExplicit_SetExplicit:
        matrix indexed by [int(1..6), int(1..4)] of int(0..9)
find x_SetExplicit_SetOccurrence:
        matrix indexed by [int(1..6), int(0..9)] of bool
find y_SetOccurrence: matrix indexed by [int(2..7)] of bool
such that
    (sum v__0 : int(2..7) . y_SetOccurrence[v__0]) = 4,
    exists v__0 : int(1..6)
        . (forAll v__1 : int(0..9)
               . x_SetExplicit_SetOccurrence[v__0, v__1] -> y_SetOccurrence[v__1] = true)
          /\
          (forAll v__1 : int(2..7)
               . y_SetOccurrence[v__1]
                 ->
                 (exists v__2 : int(0..9)
                      . x_SetExplicit_SetOccurrence[v__0, v__2] /\ v__2 = v__1)),
    forAll v__0 : int(1..5)
        . flatten(x_SetExplicit_SetOccurrence[v__0, ..])
          <lex
          flatten(x_SetExplicit_SetOccurrence[v__0 + 1, ..]),
    forAll v__0 : int(1..6)
        . (forAll v__1 : int(0..9)
               . (exists v__2 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__2] = v__1)
                 <->
                 x_SetExplicit_SetOccurrence[v__0, v__1] = true)
          /\
          (forAll v__1 : int(0..9)
               . (exists v__2 : int(1..4) . x_SetExplicit_SetExplicit[v__0, v__2] = v__1)
                 <->
                 x_SetExplicit_SetOccurrence[v__0, v__1] = true),
    forAll v__0 : int(1..6)
        . (sum v__1 : int(0..9) . x_SetExplicit_SetOccurrence[v__0, v__1]) = 4,
    forAll v__0 : int(1..6)
        . (forAll v__1 : int(1..3)
               . x_SetExplicit_SetExplicit[v__0, v__1]
                 <
                 x_SetExplicit_SetExplicit[v__0, v__1 + 1])
