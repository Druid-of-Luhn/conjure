
################################################################################
## Tests for parsing inline values##############################################
################################################################################

*** NoParse
    [1,,]

*** ParsePrint
    1
    ~~ ValueInteger 1

*** ParsePrint
    2
    ~~ ValueInteger 2

*** ParsePrint
    false
    ~~ ValueBoolean False

*** ParsePrint
    true
    ~~ ValueBoolean True

*** ShouldParse
    1

*** ShouldParseTo
    1
    ~~ ValueInteger 1

*** ParsePrint
    [1, 2, 3]
    ~~ ValueMatrix [ ValueInteger 1 , ValueInteger 2 , ValueInteger 3 ]

*** ParsePrint
    [1, 2, 3, false, 4]
    ~~ ValueMatrix [ ValueInteger 1
                   , ValueInteger 2
                   , ValueInteger 3
                   , ValueBoolean False
                   , ValueInteger 4
                   ]

*** ParsePrint
    []
    ~~ ValueMatrix []

*** ParsePrint
    [[]]
    ~~ ValueMatrix [ValueMatrix []]

*** ParsePrint
    [[1, 2, 3], [4, 5, 6]]
    ~~ ValueMatrix [ ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                   , ValueMatrix [ValueInteger 4, ValueInteger 5, ValueInteger 6]
                   ]

*** ParsePrint
    [[1, 2, 3], [true, false]]
    ~~ ValueMatrix [ ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                   , ValueMatrix [ValueBoolean True, ValueBoolean False]
                   ]

*** ParsePrint
    (1, 2)
    ~~ ValueTuple [ValueInteger 1, ValueInteger 2]

*** ParsePrint
    (1, 2, 3, [1, 2, 3])
    ~~ ValueTuple [ ValueInteger 1
                  , ValueInteger 2
                  , ValueInteger 3
                  , ValueMatrix [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                  ]

*** ParsePrint
    (true, 1, (false, 2))
    ~~ ValueTuple [ ValueBoolean True
                  , ValueInteger 1
                  , ValueTuple [ValueBoolean False, ValueInteger 2]
                  ]

*** ParsePrint
    set {}
    ~~ ValueSet []

*** ParsePrint
    set {1}
    ~~ ValueSet [ValueInteger 1]

*** ParsePrint
    set {a}
    ~~ ValueSet [Identifier "a"]

*** ParsePrint
    set {1, 2, true, false, (1, 2, 3)}
    ~~ ValueSet [ ValueInteger 1
                , ValueInteger 2
                , ValueBoolean True
                , ValueBoolean False
                , ValueTuple [ ValueInteger 1
                             , ValueInteger 2
                             , ValueInteger 3
                             ]
                ]

*** ParsePrint
    set {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}}
    ~~ ValueSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                ]

*** ParsePrint
    set {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}, set {true, false}}
    ~~ ValueSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                , ValueSet [ValueBoolean True, ValueBoolean False]
                ]

*** ParsePrint
    mset {}
    ~~ ValueMSet []

*** ParsePrint
    mset {1}
    ~~ ValueMSet [ValueInteger 1]

*** ParsePrint
    mset {a}
    ~~ ValueMSet [Identifier "a"]

*** ParsePrint
    mset {mset {}}
    ~~ ValueMSet [ValueMSet []]

*** ParsePrint
    mset {1, 2, true, false, (1, 2, 3)}
    ~~ ValueMSet [ ValueInteger 1
                 , ValueInteger 2
                 , ValueBoolean True
                 , ValueBoolean False
                 , ValueTuple [ ValueInteger 1
                              , ValueInteger 2
                              , ValueInteger 3
                              ]
                 ]

*** ParsePrint
    mset {set {1, 2, 3}, set {1, 3, 5}, set {2, 4, 6}}
    ~~ ValueMSet [ ValueSet [ValueInteger 1, ValueInteger 2, ValueInteger 3]
                 , ValueSet [ValueInteger 1, ValueInteger 3, ValueInteger 5]
                 , ValueSet [ValueInteger 2, ValueInteger 4, ValueInteger 6]
                 ]

*** ParsePrint
    function {}
    ~~ ValueFunction []

*** ParsePrint
    function {1 -> 2}
    ~~ ValueFunction [(ValueInteger 1, ValueInteger 2)]

*** ParsePrint
    function {1 -> 2, 3 -> 4, 5 -> 6, 7 -> 8}
    ~~ ValueFunction [ (ValueInteger 1, ValueInteger 2)
                     , (ValueInteger 3, ValueInteger 4)
                     , (ValueInteger 5, ValueInteger 6)
                     , (ValueInteger 7, ValueInteger 8)
                     ]

*** ParsePrint
function {1 -> set {2},
          3 -> mset {4},
          5 -> function {6 -> 6},
          7 -> (false, true, 4)}
    ~~ ValueFunction [ (ValueInteger 1, ValueSet [ValueInteger 2])
                     , (ValueInteger 3, ValueMSet [ValueInteger 4])
                     , (ValueInteger 5, ValueFunction [(ValueInteger 6, ValueInteger 6)])
                     , (ValueInteger 7, ValueTuple [ValueBoolean False, ValueBoolean True, ValueInteger 4])
                     ]

*** ParsePrint
    relation {}
    ~~ ValueRelation []

*** ParsePrint
    relation {(1, a)}
    ~~ ValueRelation [ValueTuple [ValueInteger 1, Identifier "a"]]

*** ParsePrint
    relation {(1, a), (2, b)}
    ~~ ValueRelation [ ValueTuple [ValueInteger 1, Identifier "a"]
                     , ValueTuple [ValueInteger 2, Identifier "b"]
                     ]

*** ParsePrint
    relation {(1, set {a}), (mset {2, 3, 4}, b)}
    ~~ ValueRelation [ ValueTuple [ValueInteger 1, ValueSet [Identifier "a"]]
                     , ValueTuple [ValueMSet [ValueInteger 2, ValueInteger 3, ValueInteger 4], Identifier "b"]
                     ]

*** ParsePrint
    partition {}
    ~~ ValuePartition []

*** ParsePrint
    partition {{}, {1}, {2}, {3}, {1, 2}, {1, 3}, {2, 3}, {1, 2, 3}}
    ~~ ValuePartition [ [ ]
                      , [ ValueInteger 1 ]
                      , [ ValueInteger 2 ]
                      , [ ValueInteger 3 ]
                      , [ ValueInteger 1, ValueInteger 2 ]
                      , [ ValueInteger 1, ValueInteger 3 ]
                      , [ ValueInteger 2, ValueInteger 3 ]
                      , [ ValueInteger 1, ValueInteger 2, ValueInteger 3 ]
                      ]

*** ParsePrint
    partition {{1, 2, 3}, {4, 5, 6}}
    ~~ ValuePartition [ [ ValueInteger 1, ValueInteger 2, ValueInteger 3 ]
                      , [ ValueInteger 4, ValueInteger 5, ValueInteger 6 ]
                      ]


################################################################################
## Tests for parsing domains ###################################################
################################################################################

*** ParsePrint
    bool
    ~~ DomainBoolean

*** ParsePrint
    int
    ~~ DomainIntegerList []

*** ParsePrint
    int(1)
    ~~ DomainIntegerList [ValueInteger 1]

*** ParsePrint
    int(1, 2)
    ~~ DomainIntegerList [ValueInteger 1, ValueInteger 2]

*** ParsePrint
    int(1, 2, a)
    ~~ DomainIntegerList [ValueInteger 1, ValueInteger 2, Identifier "a"]

*** ParsePrint
    int(1..)
    ~~ DomainIntegerFromTo (Just (ValueInteger 1)) Nothing

*** ParsePrint
    int(1..20)
    ~~ DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 20))

*** ParsePrint
    int(..20)
    ~~ DomainIntegerFromTo Nothing (Just (ValueInteger 20))

*** NoParse int(1...3)

*** NoParse int(1,,2,3)

*** ParsePrint
    new type of size 4
    ~~ DomainUnnamed { theSize = ValueInteger 4
                     , representation = Nothing
                     }

*** ParsePrint
    new type of size a
    ~~ DomainUnnamed { theSize = Identifier "a"
                     , representation = Nothing
                     }

*** ParsePrint
    new type (representation foo) of size a
    ~~ DomainUnnamed { theSize = Identifier "a"
                     , representation = Just "foo"
                     }

*** ParsePrint
    new type of size a + b
    ~~ DomainUnnamed { theSize = GenericNode Plus [Identifier "a", Identifier "b"]
                     , representation = Nothing
                     }

*** ParsePrint
    new type (representation foo) of size a + b
    ~~ DomainUnnamed { theSize = GenericNode Plus [Identifier "a", Identifier "b"]
                     , representation = Just "foo"
                     }

*** ParsePrint
    enum {foo, bar}
    ~~ DomainEnum {enums = ["foo","bar"], representation = Nothing}

*** ParsePrint
    enum {foo, bar, baz}
    ~~ DomainEnum {enums = ["foo","bar","baz"], representation = Nothing}

*** NoParse
    enum {foo, int}

*** ParsePrint
    matrix indexed by [int(1..9)] of bool
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainBoolean
                    }

*** ParsePrint
    matrix indexed by [int(1..9), int(a..b)] of enum {foo, bar}
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainMatrix { index = DomainIntegerFromTo (Just (Identifier "a")) (Just (Identifier "b"))
                                             , element = DomainEnum {enums = ["foo","bar"], representation = Nothing}
                                             }
                    }

*** ParsePrint
    matrix indexed by [int(1..9), int(a..), int(..b)] of bool
    ~~ DomainMatrix { index = DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                    , element = DomainMatrix { index = DomainIntegerFromTo (Just (Identifier "a")) Nothing
                                             , element = DomainMatrix { index = DomainIntegerFromTo Nothing (Just (Identifier "b"))
                                                                      , element = DomainBoolean
                                                                      }
                                             }
                    }

*** ParsePrint
    tuple of (int, bool)
    ~~ DomainTuple { components = [DomainIntegerList [],DomainBoolean]
                   , representation = Nothing
                   }

*** ParsePrint
    tuple (representation foo) of (int, bool)
    ~~ DomainTuple { components = [DomainIntegerList [],DomainBoolean]
                   , representation = Just "foo"
                   }

*** ParsePrint
    tuple of (int, fool, tuple of (enum {foo, bar}, int(1..9)))
    ~~ DomainTuple { components = [ DomainIntegerList []
                                  , Identifier "fool"
                                  , DomainTuple { components = [ DomainEnum {enums = ["foo","bar"], representation = Nothing}
                                                               , DomainIntegerFromTo (Just (ValueInteger 1)) (Just (ValueInteger 9))
                                                               ]
                                                , representation = Nothing
                                                }
                                  ]
                   , representation = Nothing
                   }

*** ParsePrint
    set of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ParsePrint
    set of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (size n) of a
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (size n) of tuple of (a,b)
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainTuple {components = [Identifier "a",Identifier "b"], representation = Nothing}
                 , representation = Nothing
                 }

*** ParsePrint
    set (size n) of tuple of (a, b)
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainTuple {components = [Identifier "a",Identifier "b"], representation = Nothing}
                 , representation = Nothing
                 }

*** ParsePrint
    set (minSize n) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Just (Identifier "n")
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (maxSize n) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Nothing
                 }

*** ParsePrint
    set (representation foo) of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (size n, minSize m, representation foo) of a
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Just (Identifier "m")
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = Identifier "a"
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (representation foo) of set of a
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = False
                 , element = DomainSet { size = Nothing
                                       , minSize = Nothing
                                       , maxSize = Nothing
                                       , attrDontCare = False
                                       , element = Identifier "a"
                                       , representation = Nothing
                                       }
                 , representation = Just "foo"
                 }

*** ParsePrint
    set (size n, _) of int
    ~~ DomainSet { size = Just (Identifier "n")
                 , minSize = Nothing
                 , maxSize = Nothing
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n, _) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ShouldParseTo
    set (_, maxSize n, _, _) of int
    ~~ DomainSet { size = Nothing
                 , minSize = Nothing
                 , maxSize = Just (Identifier "n")
                 , attrDontCare = True
                 , element = DomainIntegerList []
                 , representation = Nothing
                 }

*** ParsePrint
    mset of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    mset of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (size n) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (size n) of tuple of (a, b)
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainTuple { components = [Identifier "a",Identifier "b"]
                                          , representation = Nothing
                                          } 
                  , representation = Nothing
                  }

*** ParsePrint
    mset (minSize n) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Just (Identifier "n")
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (maxSize n) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Nothing
                  }

*** ParsePrint
    mset (representation foo) of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (size n, minSize m, representation foo) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Just (Identifier "m")
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = Identifier "a"
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (representation foo) of mset of a
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainMSet { size = Nothing
                                         , minSize = Nothing
                                         , maxSize = Nothing
                                         , occr = Nothing
                                         , minOccr = Nothing
                                         , maxOccr = Nothing
                                         , attrDontCare = False
                                         , element = Identifier "a"
                                         , representation = Nothing
                                         }
                  , representation = Just "foo"
                  }

*** ParsePrint
    mset (size n, _) of a
    ~~ DomainMSet { size = Just (Identifier "n")
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = Identifier "a"
                  , representation = Nothing
                  }


*** ShouldParseTo
    mset (_, maxSize n) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ShouldParseTo
    mset (_, maxSize n, _) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ShouldParseTo
    mset (_, maxSize n, _,_) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    mset (maxSize n, occr o, _) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Just (Identifier "n")
                  , occr = Just (Identifier "o")
                  , minOccr = Nothing
                  , maxOccr = Nothing
                  , attrDontCare = True
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    mset (occr o, minOccr m) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Just (Identifier "o")
                  , minOccr = Just (Identifier "m")
                  , maxOccr = Nothing
                  , attrDontCare = False
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    mset (maxOccr m) of int
    ~~ DomainMSet { size = Nothing
                  , minSize = Nothing
                  , maxSize = Nothing
                  , occr = Nothing
                  , minOccr = Nothing
                  , maxOccr = Just (Identifier "m")
                  , attrDontCare = False
                  , element = DomainIntegerList []
                  , representation = Nothing
                  }

*** ParsePrint
    function a -> b
    ~~ DomainFunction { functionFrom = Identifier "a"
                      , functionTo = Identifier "b"
                      , isTotal = False
                      , isPartial = False
                      , isInjective = False
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = False
                      , representation = Nothing
                      }

*** ParsePrint
    function (total) a -> b
    ~~ DomainFunction { functionFrom = Identifier "a"
                      , functionTo = Identifier "b"
                      , isTotal = True
                      , isPartial = False
                      , isInjective = False
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = False
                      , representation = Nothing
                      }

*** ParsePrint
    function (total, representation foo, _) a -> b
    ~~ DomainFunction { functionFrom = Identifier "a"
                      , functionTo = Identifier "b"
                      , isTotal = True
                      , isPartial = False
                      , isInjective = False
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = True
                      , representation = Just "foo"
                      }

*** ParsePrint
    function (total, injective) a -> b
    ~~ DomainFunction { functionFrom = Identifier "a"
                      , functionTo = Identifier "b"
                      , isTotal = True
                      , isPartial = False
                      , isInjective = True
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = False
                      , representation = Nothing
                      }

*** ParsePrint
    function a -> function b -> c
    ~~ DomainFunction { functionFrom = Identifier "a"
                      , functionTo = DomainFunction { functionFrom = Identifier "b"
                                                    , functionTo = Identifier "c"
                                                    , isTotal = False
                                                    , isPartial = False
                                                    , isInjective = False
                                                    , isBijective = False
                                                    , isSurjective = False
                                                    , attrDontCare = False
                                                    , representation = Nothing
                                                    }
                      , isTotal = False
                      , isPartial = False
                      , isInjective = False
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = False
                      , representation = Nothing
                      }

*** ParsePrint
    function function a -> b -> c
    ~~ DomainFunction { functionFrom = DomainFunction { functionFrom = Identifier "a"
                                                      , functionTo = Identifier "b"
                                                      , isTotal = False
                                                      , isPartial = False
                                                      , isInjective = False
                                                      , isBijective = False
                                                      , isSurjective = False
                                                      , attrDontCare = False
                                                      , representation = Nothing
                                                      }
                      , functionTo = Identifier "c"
                      , isTotal = False
                      , isPartial = False
                      , isInjective = False
                      , isBijective = False
                      , isSurjective = False
                      , attrDontCare = False
                      , representation = Nothing
                      }

*** ParsePrint
    relation of ()
    ~~ DomainRelation { components     = []
                      , attrDontCare   = False
                      , representation = Nothing
                      }


*** ParsePrint
    relation of (a * b)
    ~~ DomainRelation { components     = [Identifier "a", Identifier "b"]
                      , attrDontCare   = False
                      , representation = Nothing
                      }

*** ParsePrint
    relation (representation foo) of (a * b * c)
    ~~ DomainRelation { components     = [Identifier "a", Identifier "b", Identifier "c"]
                      , attrDontCare   = False
                      , representation = Just "foo"
                      }

*** ParsePrint
    relation (representation foo, _) of (a * b * c)
    ~~ DomainRelation { components     = [Identifier "a", Identifier "b", Identifier "c"]
                      , attrDontCare   = True
                      , representation = Just "foo"
                      }

*** ParsePrint
    relation (representation foo, _) of (int(0..9) * set of a * function c -> d)
    ~~ DomainRelation { components     = [ DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                                         , DomainSet { size = Nothing
                                                     , minSize = Nothing
                                                     , maxSize = Nothing
                                                     , attrDontCare = False
                                                     , element = Identifier "a"
                                                     , representation = Nothing
                                                     }
                                         , DomainFunction { functionFrom = Identifier "c"
                                                          , functionTo = Identifier "d"
                                                          , isTotal = False
                                                          , isPartial = False
                                                          , isInjective = False
                                                          , isBijective = False
                                                          , isSurjective = False
                                                          , attrDontCare = False
                                                          , representation = Nothing
                                                          }
                                         ]
                      , attrDontCare   = True
                      , representation = Just "foo"
                      }


*** ParsePrint
    partition from int(0..9)
    ~~ DomainPartition { element = DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                       , isRegular = False
                       , isComplete = False
                       , size = Nothing
                       , minSize = Nothing
                       , maxSize = Nothing
                       , partSize = Nothing
                       , minPartSize = Nothing
                       , maxPartSize = Nothing
                       , numParts = Nothing
                       , minNumParts = Nothing
                       , maxNumParts = Nothing
                       , attrDontCare = False
                       , representation = Nothing
                       }

*** ParsePrint
    partition (regular) from int(0..9)
    ~~ DomainPartition { element = DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                       , isRegular = True
                       , isComplete = False
                       , size = Nothing
                       , minSize = Nothing
                       , maxSize = Nothing
                       , partSize = Nothing
                       , minPartSize = Nothing
                       , maxPartSize = Nothing
                       , numParts = Nothing
                       , minNumParts = Nothing
                       , maxNumParts = Nothing
                       , attrDontCare = False
                       , representation = Nothing
                       }

*** ParsePrint
    partition (regular, numParts 5) from int(0..9)
    ~~ DomainPartition { element = DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                       , isRegular = True
                       , isComplete = False
                       , size = Nothing
                       , minSize = Nothing
                       , maxSize = Nothing
                       , partSize = Nothing
                       , minPartSize = Nothing
                       , maxPartSize = Nothing
                       , numParts = Just (ValueInteger 5)
                       , minNumParts = Nothing
                       , maxNumParts = Nothing
                       , attrDontCare = False
                       , representation = Nothing
                       }

*** ParsePrint
    partition (regular, numParts 5, _) from int(0..9)
    ~~ DomainPartition { element = DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                       , isRegular = True
                       , isComplete = False
                       , size = Nothing
                       , minSize = Nothing
                       , maxSize = Nothing
                       , partSize = Nothing
                       , minPartSize = Nothing
                       , maxPartSize = Nothing
                       , numParts = Just (ValueInteger 5)
                       , minNumParts = Nothing
                       , maxNumParts = Nothing
                       , attrDontCare = True
                       , representation = Nothing
                       }

*** ParsePrint
    partition (regular, maxNumParts 5, representation foo, _) from int(0..9)
    ~~ DomainPartition { element = DomainIntegerFromTo (Just (ValueInteger 0)) (Just (ValueInteger 9))
                       , isRegular = True
                       , isComplete = False
                       , size = Nothing
                       , minSize = Nothing
                       , maxSize = Nothing
                       , partSize = Nothing
                       , minPartSize = Nothing
                       , maxPartSize = Nothing
                       , numParts = Nothing
                       , minNumParts = Nothing
                       , maxNumParts = Just (ValueInteger 5)
                       , attrDontCare = True
                       , representation = Just "foo"
                       }

*** ParsePrint
    1 + 2
    ~~ GenericNode Plus [ValueInteger 1, ValueInteger 2]

*** ParsePrint
    1 + 2 + 3
    ~~ GenericNode Plus [ GenericNode Plus [ ValueInteger 1
                                           , ValueInteger 2
                                           ]
                        , ValueInteger 3
                        ]

*** ParsePrint
    1 * 2 + 3 * 4
    ~~ GenericNode Plus [ GenericNode Times [ ValueInteger 1
                                            , ValueInteger 2
                                            ]
                        , GenericNode Times [ ValueInteger 3
                                            , ValueInteger 4
                                            ]
                        ]

*** ParsePrint
    1 * (2 + 3) * 4
    ~~ GenericNode Times [ GenericNode Times [ ValueInteger 1
                                             , GenericNode Plus [ ValueInteger 2
                                                                , ValueInteger 3
                                                                ]
                                             ]
                         , ValueInteger 4
                         ]

*** ParsePrint
    1 * (2 + 3) * 4 = 5
    ~~ GenericNode Eq [ GenericNode Times [ GenericNode Times [ ValueInteger 1
                                                              , GenericNode Plus [ ValueInteger 2
                                                                                 , ValueInteger 3
                                                                                 ]
                                                              ]
                                          , ValueInteger 4
                                          ]
                      , ValueInteger 5
                      ]

*** NoParse
    1 = 2 = 3

*** ParsePrint
    1 = 2 <=> 2 = 3
    ~~ GenericNode Iff [ GenericNode Eq [ ValueInteger 1
                                        , ValueInteger 2
                                        ]
                       , GenericNode Eq [ ValueInteger 2
                                        , ValueInteger 3
                                        ]
                       ]

*** NoParse
    1 = (2 <=> 2) = 3

*** ParsePrint
    -1 + 3 = a
    ~~ GenericNode Eq [ GenericNode Plus [ GenericNode Negate [ValueInteger 1]
                                         , ValueInteger 3
                                         ]
                      , Identifier "a"
                      ]

*** ParsePrint
    -a = -b + 1
    ~~ GenericNode Eq [ GenericNode Negate [Identifier "a"]
                      , GenericNode Plus [ GenericNode Negate [Identifier "b"]
                                         , ValueInteger 1
                                         ]
                      ]

*** ParsePrint
    abs(a)
    ~~ GenericNode Abs [ Identifier "a" ]

*** Eval
    abs ( -2 + 1 )
    ~~ 1

*** Eval
    1 + 1
    ~~ 2

*** Eval
    1 + 2 * 3
    ~~ 7

*** Eval
    (1 + 2) * 3
    ~~ 9

*** Eval
    (1 + 2) * 3 = 10 - 2 + 1
    ~~ true

*** Eval
    1 + 2 + a
    ~~ 3 + a

*** Eval
    1 + a + 2
    ~~ 3 + a

*** Eval
    a + 1 + 2
    ~~ 3 + a

*** Eval
    1 + c + 2 + b + 3 + a
    ~~ 6 + a + b + c

*** Eval
    11-11-11
    ~~ -11

*** Eval
    11-(11-11)
    ~~ 11

*** Eval
    2 * c * d * 0
    ~~ 0

*** Eval
    (2 - c + d) * (2 * 2 - 4)
    ~~ 0

*** Eval
    (a - a) * 3
    ~~ 0

*** Eval
    a * 3 + 2 * b
    ~~ 2*b + 3*a

*** Eval
    a * b - b * a
    ~~ 0

*** Eval
    1+1+1+1+1+1+1+1+1+1
    ~~ 10

*** Eval
    1-1-1-1-1-1-1-1-1-1
    ~~ -8

*** Eval
    1*1*1*1*1*1*1*1*1*1
    ~~ 1

*** Eval
    1/1/1/1/1/1/1/1/1/1
    ~~ 1

*** Eval
    14 % 8
    ~~ 6

*** Eval
    14 % 8 % 4
    ~~ 2

*** Eval
    1+a+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1
    ~~ 21 + a

*** Eval
    1+a+1+1+1+1+1+1+1+1+1+1
    ~~ 11 + a

*** Eval
    1+a+1+1+1+b+1+1+1+1+1+1
    ~~ 10 + a + b

*** Eval
    1+b+1+1+1+a+1+1+1+1+1+1
    ~~ 10 + a + b

*** Eval
    1 + a - a
    ~~ 1

*** Eval
    b + a - a
    ~~ b

*** Eval
    a+b=b+a
    ~~ true

*** Eval
    12 + 3 > 11
    ~~ true

*** Eval
    12 + 3 < 11
    ~~ false

*** Eval
    1 elem set {1,2,3}
    ~~ true

*** Eval
    set {1,3,5} union set {2,4,6}
    ~~ set {1,2,3,4,5,6}

*** Eval
    set {1,3,5} intersect set {2,4,6}
    ~~ set {}

*** Eval
    1+a+2+b*0
    ~~ 3+a

*** Eval
    true /\ false
    ~~ false

*** Eval
    (true /\ false) => false
    ~~ true

*** Eval
    ((2^4 >= 2^3) /\ (2^4 <= 2^5)) => (2^3 <= 2^5)
    ~~ true

*** ParsePrint
    2 ^ 4 >= 2 ^ 3 /\ 2 ^ 4 <= 2 ^ 5 => 2 ^ 3 <= 2 ^ 5
    ~~ GenericNode Imply [ GenericNode And [ GenericNode Geq [ GenericNode Pow [ ValueInteger 2
                                                                               , ValueInteger 4
                                                                               ]
                                                             , GenericNode Pow [ ValueInteger 2
                                                                               , ValueInteger 3
                                                                               ]
                                                             ]
                                           , GenericNode Leq [ GenericNode Pow [ ValueInteger 2
                                                                               , ValueInteger 4
                                                                               ]
                                                             , GenericNode Pow [ ValueInteger 2
                                                                               ,ValueInteger 5
                                                                               ]
                                                             ]
                                           ]
                         , GenericNode Leq [ GenericNode Pow [ ValueInteger 2
                                                             , ValueInteger 3
                                                             ]
                                           , GenericNode Pow [ ValueInteger 2
                                                             , ValueInteger 5
                                                             ]
                                           ]
                         ]

*** ParsePrintIso
    true /\ false

*** ParsePrintIso
    2 ^ 4 >= 2 ^ 3 /\ 2 ^ 4 <= 2 ^ 5 => 2 ^ 3 <= 2 ^ 5

*** ParsePrintIso
    true /\ false => false

*** ParsePrintIso
    (1 + 2) * 3 = 10 - 2 + 1

*** Eval
    (1 + 2) * 3 = 10 - 2 + 1
    ~~ true

*** ParsePrintIso
    1 + 2 * 3 = 10 - 2 + 1

*** Eval
    1 + 2 * 3 = 10 - 2 + 1
    ~~ false
