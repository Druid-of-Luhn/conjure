Spec
  { language = "Essence"
  , version = [ 2
              , 0
              ]
  , topLevelBindings = [ ( Letting
                         , "forall"
                         , DeclQuantifier (
                             DeclLambda
                               [ ( "__forall_x"
                                 , TypeBoolean
                                 )
                               , ( "__forall_y"
                                 , TypeBoolean
                                 )
                               ] (
                               GenericNode
                                 And
                                 [ Identifier "__forall_x"
                                 , Identifier "__forall_y"
                                 ] ) ) (
                             DeclLambda
                               [ ( "__forall_x"
                                 , TypeBoolean
                                 )
                               , ( "__forall_y"
                                 , TypeBoolean
                                 )
                               ] (
                               GenericNode
                                 Imply
                                 [ Identifier "__forall_x"
                                 , Identifier "__forall_y"
                                 ] ) ) (
                             ValueBoolean True )
                         )
                       , ( Letting
                         , "exists"
                         , DeclQuantifier (
                             DeclLambda
                               [ ( "__exists_x"
                                 , TypeBoolean
                                 )
                               , ( "__exists_y"
                                 , TypeBoolean
                                 )
                               ] (
                               GenericNode
                                 Or
                                 [ Identifier "__exists_x"
                                 , Identifier "__exists_y"
                                 ] ) ) (
                             DeclLambda
                               [ ( "__exists_x"
                                 , TypeBoolean
                                 )
                               , ( "__exists_y"
                                 , TypeBoolean
                                 )
                               ] (
                               GenericNode
                                 And
                                 [ Identifier "__exists_x"
                                 , Identifier "__exists_y"
                                 ] ) ) (
                             ValueBoolean False )
                         )
                       , ( Letting
                         , "sum"
                         , DeclQuantifier (
                             DeclLambda
                               [ ( "__sum_x"
                                 , TypeInteger
                                 )
                               , ( "__sum_y"
                                 , TypeInteger
                                 )
                               ] (
                               GenericNode
                                 Plus
                                 [ Identifier "__sum_x"
                                 , Identifier "__sum_y"
                                 ] ) ) (
                             DeclLambda
                               [ ( "__sum_x"
                                 , TypeBoolean
                                 )
                               , ( "__sum_y"
                                 , TypeInteger
                                 )
                               ] (
                               GenericNode
                                 Times
                                 [ Identifier "__sum_x"
                                 , Identifier "__sum_y"
                                 ] ) ) (
                             ValueInteger 0 )
                         )
                       , ( Find
                         , "x"
                         , DomainFunction
                             { functionFrom = DomainIntegerFromTo (
                                                Just ( ValueInteger 3 ) ) (
                                                Just ( ValueInteger 7 ) )
                             , functionTo = DomainIntegerFromTo (
                                              Just ( ValueInteger 1 ) ) (
                                              Just ( ValueInteger 6 ) )
                             , isTotal = False
                             , isPartial = False
                             , isInjective = False
                             , isBijective = False
                             , isSurjective = False
                             , attrDontCare = False
                             , representation = Nothing
                             }
                         )
                       ]
  , topLevelWheres = []
  , objective = Nothing
  , constraints = [ GenericNode
                      Neq
                      [ GenericNode
                          Image
                          [ Identifier "x"
                          , ValueInteger 4
                          ]
                      , GenericNode
                          Image
                          [ Identifier "x"
                          , ValueInteger 6
                          ]
                      ]
                  ]
  , metadata = []
  }